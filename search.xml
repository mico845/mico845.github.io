<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>advanced mathematics(持续更新中)</title>
      <link href="/2023/02/13/Math/2023-month-13-advanced-mathematics/"/>
      <url>/2023/02/13/Math/2023-month-13-advanced-mathematics/</url>
      
        <content type="html"><![CDATA[<h2 id="table-tr-td-bgcolor-yellow-color-black-advanced-mathematics-td-tr-table"><table><tr><td bgcolor=yellow color=black>Advanced Mathematics</td></tr></table></h2><p><strong>Final exam focus</strong></p><ul><li>[ ] <a href="#1">Inverse functions</a></li><li>[ ] <a href="#2">Basic elementary functions</a></li><li>[ ] <a href="#3">Limits of sequences</a></li><li>[ ] <a href="#4">The limit of a function (two important limits of functions)</a></li></ul><hr><h1 id="span-id-1-1-inverse-functions-span"><span id="1">1 Inverse functions</span></h1><h2 id="1-1-mapping">1.1 Mapping</h2><p>Let <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi mathvariant="normal">A</mi></mrow><annotation encoding="application/x-tex">\Alpha</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord"><span class="mord mathrm">A</span></span></span></span></span> and <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi mathvariant="normal">B</mi></mrow><annotation encoding="application/x-tex">\Beta</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord"><span class="mord mathrm">B</span></span></span></span></span> be two nonempty sets. If there exists such a rule <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>f</mi></mrow><annotation encoding="application/x-tex">f</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord mathdefault" style="margin-right:0.10764em;">f</span></span></span></span> that every element <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>x</mi></mrow><annotation encoding="application/x-tex">x</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">x</span></span></span></span> in <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi mathvariant="normal">A</mi></mrow><annotation encoding="application/x-tex">\Alpha</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord"><span class="mord mathrm">A</span></span></span></span></span> is associated with one unique element <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>y</mi></mrow><annotation encoding="application/x-tex">y</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.19444em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">y</span></span></span></span> in <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi mathvariant="normal">B</mi></mrow><annotation encoding="application/x-tex">\Beta</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord"><span class="mord mathrm">B</span></span></span></span></span> under the rule <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>f</mi></mrow><annotation encoding="application/x-tex">f</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord mathdefault" style="margin-right:0.10764em;">f</span></span></span></span>, then <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>f</mi></mrow><annotation encoding="application/x-tex">f</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord mathdefault" style="margin-right:0.10764em;">f</span></span></span></span> is called a <strong>mapping</strong> from <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi mathvariant="normal">A</mi></mrow><annotation encoding="application/x-tex">\Alpha</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord"><span class="mord mathrm">A</span></span></span></span></span> to <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi mathvariant="normal">B</mi></mrow><annotation encoding="application/x-tex">\Beta</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord"><span class="mord mathrm">B</span></span></span></span></span>, which is denoted by<br><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>f</mi><mo>:</mo><mi>A</mi><mo>→</mo><mi>B</mi><mo separator="true">,</mo></mrow><annotation encoding="application/x-tex">f:A \rightarrow B,</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">:</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault">A</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">→</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.8777699999999999em;vertical-align:-0.19444em;"></span><span class="mord mathdefault" style="margin-right:0.05017em;">B</span><span class="mpunct">,</span></span></span></span><br><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>f</mi><mo>:</mo><mi>x</mi><mo>→</mo><mi>y</mi><mo>=</mo><mi>f</mi><mo stretchy="false">(</mo><mi>x</mi><mo stretchy="false">)</mo><mo separator="true">,</mo><mi>x</mi><mo>∈</mo><mi>A</mi><mi mathvariant="normal">.</mi></mrow><annotation encoding="application/x-tex">f:x \rightarrow y = f(x), x \in A.</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">:</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">x</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">→</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.19444em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="mopen">(</span><span class="mord mathdefault">x</span><span class="mclose">)</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">x</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">∈</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault">A</span><span class="mord">.</span></span></span></span></p><p>Here <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>y</mi></mrow><annotation encoding="application/x-tex">y</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.19444em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">y</span></span></span></span> is called the <strong>image</strong> of x under the mapping <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>f</mi></mrow><annotation encoding="application/x-tex">f</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord mathdefault" style="margin-right:0.10764em;">f</span></span></span></span>, and <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>x</mi></mrow><annotation encoding="application/x-tex">x</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">x</span></span></span></span> is called the <strong>inverse image</strong> of y under the mapping <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>f</mi></mrow><annotation encoding="application/x-tex">f</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord mathdefault" style="margin-right:0.10764em;">f</span></span></span></span>.<br>The set <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi mathvariant="normal">A</mi></mrow><annotation encoding="application/x-tex">\Alpha</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord"><span class="mord mathrm">A</span></span></span></span></span> is called the <strong>domain</strong> (or <strong>domain of definition</strong>) of the mapping <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>f</mi></mrow><annotation encoding="application/x-tex">f</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord mathdefault" style="margin-right:0.10764em;">f</span></span></span></span>, denoted by <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>D</mi><mi>f</mi></msub></mrow><annotation encoding="application/x-tex">D_f</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.969438em;vertical-align:-0.286108em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.02778em;">D</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3361079999999999em;"><span style="top:-2.5500000000000003em;margin-left:-0.02778em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.10764em;">f</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span></span></span></span>.<br>And the set composed of the image(i.e. y) points of all the elements in A is called the <strong>range</strong> of the mapping <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>f</mi></mrow><annotation encoding="application/x-tex">f</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord mathdefault" style="margin-right:0.10764em;">f</span></span></span></span>, denoted by <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>R</mi><mi>f</mi></msub></mrow><annotation encoding="application/x-tex">R_f</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.969438em;vertical-align:-0.286108em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.00773em;">R</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3361079999999999em;"><span style="top:-2.5500000000000003em;margin-left:-0.00773em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.10764em;">f</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span></span></span></span> or <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>f</mi><mo stretchy="false">(</mo><mi>A</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">f(A)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="mopen">(</span><span class="mord mathdefault">A</span><span class="mclose">)</span></span></span></span>.</p><p><strong>surjection:</strong> If every element <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>y</mi></mrow><annotation encoding="application/x-tex">y</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.19444em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">y</span></span></span></span> in <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi mathvariant="normal">B</mi></mrow><annotation encoding="application/x-tex">\Beta</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord"><span class="mord mathrm">B</span></span></span></span></span> is the image of some element of A<br><strong>injection:</strong> If any two different elements of <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi mathvariant="normal">A</mi></mrow><annotation encoding="application/x-tex">\Alpha</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord"><span class="mord mathrm">A</span></span></span></span></span> are associated with two different image points.<br><strong>bijection:</strong> one-to-one mapping, not only an injection, but also a surjection.</p><h2 id="1-2-inverse-mapping">1.2 Inverse mapping</h2><p>Let <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi mathvariant="normal">A</mi></mrow><annotation encoding="application/x-tex">\Alpha</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord"><span class="mord mathrm">A</span></span></span></span></span> and <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi mathvariant="normal">B</mi></mrow><annotation encoding="application/x-tex">\Beta</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord"><span class="mord mathrm">B</span></span></span></span></span> be two nonempty sets.Suppose that <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>f</mi></mrow><annotation encoding="application/x-tex">f</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord mathdefault" style="margin-right:0.10764em;">f</span></span></span></span> is an injection from A to B.Then one can define a new mapping <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>g</mi></mrow><annotation encoding="application/x-tex">g</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.19444em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">g</span></span></span></span> from <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>R</mi><mi>f</mi></msub></mrow><annotation encoding="application/x-tex">R_f</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.969438em;vertical-align:-0.286108em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.00773em;">R</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3361079999999999em;"><span style="top:-2.5500000000000003em;margin-left:-0.00773em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.10764em;">f</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span></span></span></span> to <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi mathvariant="normal">A</mi></mrow><annotation encoding="application/x-tex">\Alpha</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord"><span class="mord mathrm">A</span></span></span></span></span>, i.e. <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>g</mi><mo>:</mo><msub><mi>R</mi><mi>f</mi></msub><mo>→</mo><mi mathvariant="normal">A</mi><mi mathvariant="normal">.</mi></mrow><annotation encoding="application/x-tex">g:R_f\rightarrow \Alpha.</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.19444em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">g</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">:</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.969438em;vertical-align:-0.286108em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.00773em;">R</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3361079999999999em;"><span style="top:-2.5500000000000003em;margin-left:-0.00773em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.10764em;">f</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">→</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord"><span class="mord mathrm">A</span></span><span class="mord">.</span></span></span></span><br>For every <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>y</mi><mo>∈</mo><msub><mi>R</mi><mi>f</mi></msub></mrow><annotation encoding="application/x-tex">y \in R_f</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.7335400000000001em;vertical-align:-0.19444em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">∈</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.969438em;vertical-align:-0.286108em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.00773em;">R</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3361079999999999em;"><span style="top:-2.5500000000000003em;margin-left:-0.00773em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.10764em;">f</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span></span></span></span>, we define <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>g</mi><mo stretchy="false">(</mo><mi>y</mi><mo stretchy="false">)</mo><mo>=</mo><mi>x</mi></mrow><annotation encoding="application/x-tex">g(y) = x</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">g</span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">x</span></span></span></span> so that <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>x</mi></mrow><annotation encoding="application/x-tex">x</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">x</span></span></span></span> satisfies <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>f</mi><mo stretchy="false">(</mo><mi>x</mi><mo stretchy="false">)</mo><mo>=</mo><mi>y</mi></mrow><annotation encoding="application/x-tex">f(x) = y</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="mopen">(</span><span class="mord mathdefault">x</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.19444em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">y</span></span></span></span>, and the mapping <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>g</mi></mrow><annotation encoding="application/x-tex">g</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.19444em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">g</span></span></span></span> is called <strong>inverse mapping</strong> of <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>f</mi></mrow><annotation encoding="application/x-tex">f</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord mathdefault" style="margin-right:0.10764em;">f</span></span></span></span>, denoted by <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msup><mi>f</mi><mrow><mo>−</mo><mn>1</mn></mrow></msup></mrow><annotation encoding="application/x-tex">f^{-1}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.008548em;vertical-align:-0.19444em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">−</span><span class="mord mtight">1</span></span></span></span></span></span></span></span></span></span></span></span>.The domain of <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>g</mi></mrow><annotation encoding="application/x-tex">g</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.19444em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">g</span></span></span></span> is <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>D</mi><msup><mi>f</mi><mrow><mo>−</mo><mn>1</mn></mrow></msup></msub><mo>=</mo><msub><mi>R</mi><mi>f</mi></msub></mrow><annotation encoding="application/x-tex">D_{f^{-1}} = R_f</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.997058em;vertical-align:-0.313728em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.02778em;">D</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3448em;"><span style="top:-2.52238em;margin-left:-0.02778em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.10764em;">f</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.7463142857142857em;"><span style="top:-2.786em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight"><span class="mord mtight">−</span><span class="mord mtight">1</span></span></span></span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.313728em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.969438em;vertical-align:-0.286108em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.00773em;">R</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3361079999999999em;"><span style="top:-2.5500000000000003em;margin-left:-0.00773em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.10764em;">f</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span></span></span></span> and the range of <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>g</mi></mrow><annotation encoding="application/x-tex">g</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.19444em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">g</span></span></span></span> is <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>R</mi><msup><mi>f</mi><mrow><mo>−</mo><mn>1</mn></mrow></msup></msub><mo>=</mo><mi mathvariant="normal">A</mi></mrow><annotation encoding="application/x-tex">R_{f^{-1}} = \Alpha</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.997058em;vertical-align:-0.313728em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.00773em;">R</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3448em;"><span style="top:-2.52238em;margin-left:-0.00773em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.10764em;">f</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.7463142857142857em;"><span style="top:-2.786em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight"><span class="mord mtight">−</span><span class="mord mtight">1</span></span></span></span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.313728em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord"><span class="mord mathrm">A</span></span></span></span></span>.</p><p><strong>Only an injection has an inverse mapping.</strong></p><h2 id="1-3-inverse-functions">1.3 Inverse functions</h2><p>If the function <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>f</mi><mo>:</mo><mi>D</mi><mo>→</mo><mi>f</mi><mo stretchy="false">(</mo><mi>D</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">f:D\rightarrow f(D)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">:</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">D</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">→</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.02778em;">D</span><span class="mclose">)</span></span></span></span> is injection, Then it has the inverse mapping <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msup><mi>f</mi><mrow><mo>−</mo><mn>1</mn></mrow></msup><mo>:</mo><mi>f</mi><mo stretchy="false">(</mo><mi>D</mi><mo stretchy="false">)</mo><mo>→</mo><mi>D</mi></mrow><annotation encoding="application/x-tex">f^{-1}: f(D)\rightarrow D</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.008548em;vertical-align:-0.19444em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">−</span><span class="mord mtight">1</span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">:</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.02778em;">D</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">→</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">D</span></span></span></span>, and the mapping <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msup><mi>f</mi><mrow><mo>−</mo><mn>1</mn></mrow></msup></mrow><annotation encoding="application/x-tex">f^{-1}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.008548em;vertical-align:-0.19444em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">−</span><span class="mord mtight">1</span></span></span></span></span></span></span></span></span></span></span></span> is called the <strong>inverse function</strong> of <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>f</mi></mrow><annotation encoding="application/x-tex">f</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord mathdefault" style="margin-right:0.10764em;">f</span></span></span></span>.<br><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>e</mi><mi mathvariant="normal">.</mi><mi>g</mi><mi mathvariant="normal">.</mi></mrow><annotation encoding="application/x-tex">e.g.</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.19444em;"></span><span class="mord mathdefault">e</span><span class="mord">.</span><span class="mord mathdefault" style="margin-right:0.03588em;">g</span><span class="mord">.</span></span></span></span><br><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>y</mi><mo>=</mo><mn>2</mn><mi>s</mi><mi>i</mi><mi>n</mi><mn>3</mn><mi>x</mi><mo stretchy="false">(</mo><mo>−</mo><mfrac><mi>π</mi><mn>2</mn></mfrac><mo>≤</mo><mi>x</mi><mo>≤</mo><mfrac><mi>π</mi><mn>2</mn></mfrac><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">y = 2sin3x(-\frac{\pi}{2} \le x \le \frac{\pi}{2})</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.19444em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.095em;vertical-align:-0.345em;"></span><span class="mord">2</span><span class="mord mathdefault">s</span><span class="mord mathdefault">i</span><span class="mord mathdefault">n</span><span class="mord">3</span><span class="mord mathdefault">x</span><span class="mopen">(</span><span class="mord">−</span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.695392em;"><span style="top:-2.6550000000000002em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.394em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.03588em;">π</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.345em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.7719400000000001em;vertical-align:-0.13597em;"></span><span class="mord mathdefault">x</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.095em;vertical-align:-0.345em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.695392em;"><span style="top:-2.6550000000000002em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.394em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.03588em;">π</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.345em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mclose">)</span></span></span></span></p><p><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>s</mi><mi>o</mi><mi>l</mi><mi>u</mi><mi>t</mi><mi>i</mi><mi>o</mi><mi>n</mi><mi>s</mi><mo>:</mo></mrow><annotation encoding="application/x-tex">solutions:</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathdefault">s</span><span class="mord mathdefault">o</span><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="mord mathdefault">u</span><span class="mord mathdefault">t</span><span class="mord mathdefault">i</span><span class="mord mathdefault">o</span><span class="mord mathdefault">n</span><span class="mord mathdefault">s</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">:</span></span></span></span><br><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>y</mi></mrow><annotation encoding="application/x-tex">y</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.19444em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">y</span></span></span></span> is a injection, so exists inverse function.<br><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mfrac><mi>y</mi><mn>2</mn></mfrac><mo>=</mo><mi>sin</mi><mo>⁡</mo><mn>3</mn><mi>x</mi></mrow><annotation encoding="application/x-tex">\frac{y}{2} = \sin 3x</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.0925em;vertical-align:-0.345em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.7475em;"><span style="top:-2.6550000000000002em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.446108em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.03588em;">y</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.345em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.66786em;vertical-align:0em;"></span><span class="mop">sin</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">3</span><span class="mord mathdefault">x</span></span></span></span><br><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>3</mn><mi>x</mi><mo>=</mo><mi>arcsin</mi><mo>⁡</mo><mfrac><mi>y</mi><mn>2</mn></mfrac></mrow><annotation encoding="application/x-tex">3x = \arcsin \frac{y}{2}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">3</span><span class="mord mathdefault">x</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.0925em;vertical-align:-0.345em;"></span><span class="mop">arcsin</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.7475em;"><span style="top:-2.6550000000000002em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.446108em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.03588em;">y</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.345em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span><br><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>x</mi><mo>=</mo><mfrac><mn>1</mn><mn>3</mn></mfrac><mi>arcsin</mi><mo>⁡</mo><mfrac><mi>y</mi><mn>2</mn></mfrac></mrow><annotation encoding="application/x-tex">x = \frac{1}{3} \arcsin \frac{y}{2}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">x</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.190108em;vertical-align:-0.345em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.845108em;"><span style="top:-2.6550000000000002em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">3</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.394em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.345em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mop">arcsin</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.7475em;"><span style="top:-2.6550000000000002em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.446108em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.03588em;">y</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.345em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span><br>Then the inverse function is <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>y</mi><mo>=</mo><mfrac><mn>1</mn><mn>3</mn></mfrac><mi>arcsin</mi><mo>⁡</mo><mfrac><mi>x</mi><mn>2</mn></mfrac></mrow><annotation encoding="application/x-tex">y = \frac{1}{3} \arcsin \frac{x}{2}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.19444em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.190108em;vertical-align:-0.345em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.845108em;"><span style="top:-2.6550000000000002em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">3</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.394em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.345em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mop">arcsin</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.695392em;"><span style="top:-2.6550000000000002em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.394em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">x</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.345em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span></p><h1 id="span-id-2-2-basic-elementary-functions-span"><span id="2">2 Basic elementary functions</span></h1><ol><li>Power functions: <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>y</mi><mo>=</mo><msup><mi>x</mi><mi>μ</mi></msup></mrow><annotation encoding="application/x-tex">y = x^{\mu}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.19444em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.664392em;vertical-align:0em;"></span><span class="mord"><span class="mord mathdefault">x</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.664392em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">μ</span></span></span></span></span></span></span></span></span></span></span></span></li><li>Exponential functions: <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>y</mi><mo>=</mo><msup><mi>a</mi><mi>x</mi></msup></mrow><annotation encoding="application/x-tex">y = a^{x}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.19444em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.664392em;vertical-align:0em;"></span><span class="mord"><span class="mord mathdefault">a</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.664392em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">x</span></span></span></span></span></span></span></span></span></span></span></span></li><li>Logarithmic functions: <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>y</mi><mo>=</mo><msub><mo><mi>log</mi><mo>⁡</mo></mo><mi>a</mi></msub><mi>x</mi></mrow><annotation encoding="application/x-tex">y = \log_a{x}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.19444em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.93858em;vertical-align:-0.24414em;"></span><span class="mop"><span class="mop">lo<span style="margin-right:0.01389em;">g</span></span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.057252em;"><span style="top:-2.4558600000000004em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">a</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.24414em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault">x</span></span></span></span></span></li><li>Trigonometric functions:<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>y</mi><mo>=</mo><mi>sin</mi><mo>⁡</mo><mi>x</mi><mo separator="true">,</mo><mi>y</mi><mo>=</mo><mi>cos</mi><mo>⁡</mo><mi>x</mi><mo separator="true">,</mo><mi>y</mi><mo>=</mo><mi>tan</mi><mo>⁡</mo><mi>x</mi></mrow><annotation encoding="application/x-tex">y = \sin{x}, y = \cos{x}, y = \tan{x}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.19444em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.8623000000000001em;vertical-align:-0.19444em;"></span><span class="mop">sin</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault">x</span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.19444em;"></span><span class="mop">cos</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault">x</span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.61508em;vertical-align:0em;"></span><span class="mop">tan</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault">x</span></span></span></span></span></li><li>Inverse trigonometric functions:<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>y</mi><mo>=</mo><mi>arcsin</mi><mo>⁡</mo><mi>x</mi><mo separator="true">,</mo><mi>y</mi><mo>=</mo><mi>arccos</mi><mo>⁡</mo><mi>x</mi><mo separator="true">,</mo><mi>y</mi><mo>=</mo><mi>arctan</mi><mo>⁡</mo><mi>x</mi></mrow><annotation encoding="application/x-tex">y = \arcsin{x}, y = \arccos{x}, y = \arctan{x}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.19444em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.8623000000000001em;vertical-align:-0.19444em;"></span><span class="mop">arcsin</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault">x</span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.19444em;"></span><span class="mop">arccos</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault">x</span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.61508em;vertical-align:0em;"></span><span class="mop">arctan</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault">x</span></span></span></span></span></li></ol><h1 id="span-id-3-3-limits-of-sequences-span"><span id="3">3 Limits of sequences</span></h1><p>Suppose that there exists a constant <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi mathvariant="normal">A</mi></mrow><annotation encoding="application/x-tex">\Alpha</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord"><span class="mord mathrm">A</span></span></span></span></span> such that, for any given <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>ϵ</mi><mo>&gt;</mo><mn>0</mn></mrow><annotation encoding="application/x-tex">\epsilon &gt; 0</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.5782em;vertical-align:-0.0391em;"></span><span class="mord mathdefault">ϵ</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">&gt;</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">0</span></span></span></span>, we can find a positive integer <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>N</mi></mrow><annotation encoding="application/x-tex">N</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.10903em;">N</span></span></span></span> satisfying  <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi mathvariant="normal">∣</mi><msub><mi>a</mi><mi>n</mi></msub><mo>−</mo><mi mathvariant="normal">A</mi><mi mathvariant="normal">∣</mi><mo>&lt;</mo><mi>ϵ</mi></mrow><annotation encoding="application/x-tex">|a_n - \Alpha| &lt; \epsilon</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">∣</span><span class="mord"><span class="mord mathdefault">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">n</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathrm">A</span></span><span class="mord">∣</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">&lt;</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">ϵ</span></span></span></span> for all <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>n</mi><mo>&gt;</mo><mi>N</mi></mrow><annotation encoding="application/x-tex">n &gt; N</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.5782em;vertical-align:-0.0391em;"></span><span class="mord mathdefault">n</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">&gt;</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.10903em;">N</span></span></span></span>.<br>Then the number <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi mathvariant="normal">A</mi></mrow><annotation encoding="application/x-tex">\Alpha</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord"><span class="mord mathrm">A</span></span></span></span></span>  is the <strong>limit</strong> of the sequence <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo stretchy="false">{</mo><msub><mi>a</mi><mi>n</mi></msub><mo stretchy="false">}</mo></mrow><annotation encoding="application/x-tex">\{a_n\}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">{</span><span class="mord"><span class="mord mathdefault">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">n</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">}</span></span></span></span>, and we say that the sequence <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo stretchy="false">{</mo><msub><mi>a</mi><mi>n</mi></msub><mo stretchy="false">}</mo></mrow><annotation encoding="application/x-tex">\{a_n\}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">{</span><span class="mord"><span class="mord mathdefault">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">n</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">}</span></span></span></span> is <strong>convergent</strong> and converges to <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi mathvariant="normal">A</mi></mrow><annotation encoding="application/x-tex">\Alpha</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord"><span class="mord mathrm">A</span></span></span></span></span> , denoted by<br><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><munder><mo><mi>lim</mi><mo>⁡</mo></mo><mrow><mi>n</mi><mo>→</mo><mi mathvariant="normal">∞</mi></mrow></munder><msub><mi>a</mi><mi>n</mi></msub><mo>=</mo><mi mathvariant="normal">A</mi></mrow><annotation encoding="application/x-tex">\lim\limits_{n \rightarrow \infty} a_n = \Alpha</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.39444em;vertical-align:-0.7em;"></span><span class="mop op-limits"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.69444em;"><span style="top:-2.4em;margin-left:0em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">n</span><span class="mrel mtight">→</span><span class="mord mtight">∞</span></span></span></span><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span><span class="mop">lim</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.7em;"><span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">n</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord"><span class="mord mathrm">A</span></span></span></span></span><br>or  <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>a</mi><mi>n</mi></msub><mo>→</mo><mi mathvariant="normal">A</mi></mrow><annotation encoding="application/x-tex">a_n \rightarrow \Alpha</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.58056em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">n</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">→</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord"><span class="mord mathrm">A</span></span></span></span></span> <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo stretchy="false">(</mo><mi>n</mi><mo>→</mo><mi mathvariant="normal">∞</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">(n \rightarrow \infty)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord mathdefault">n</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">→</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">∞</span><span class="mclose">)</span></span></span></span></p><p>If there does not exist such a constant <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi mathvariant="normal">A</mi></mrow><annotation encoding="application/x-tex">\Alpha</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord"><span class="mord mathrm">A</span></span></span></span></span>, then we say that the sequence <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo stretchy="false">{</mo><msub><mi>a</mi><mi>n</mi></msub><mo stretchy="false">}</mo></mrow><annotation encoding="application/x-tex">\{a_n \}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">{</span><span class="mord"><span class="mord mathdefault">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">n</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">}</span></span></span></span> is <strong>divergent</strong>.</p><p>Then the definition of limit can be written as follows:<br><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><munder><mo><mi>lim</mi><mo>⁡</mo></mo><mrow><mi>n</mi><mo>→</mo><mi mathvariant="normal">∞</mi></mrow></munder><msub><mi>a</mi><mi>n</mi></msub><mo>=</mo><mi mathvariant="normal">A</mi></mrow><annotation encoding="application/x-tex">\lim\limits_{n \rightarrow \infty} a_n = \Alpha</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.39444em;vertical-align:-0.7em;"></span><span class="mop op-limits"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.69444em;"><span style="top:-2.4em;margin-left:0em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">n</span><span class="mrel mtight">→</span><span class="mord mtight">∞</span></span></span></span><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span><span class="mop">lim</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.7em;"><span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">n</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord"><span class="mord mathrm">A</span></span></span></span></span> <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo>⇐</mo><mo>⇒</mo></mrow><annotation encoding="application/x-tex">\Leftarrow\Rightarrow</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.36687em;vertical-align:0em;"></span><span class="mrel">⇐</span></span><span class="base"><span class="strut" style="height:0.36687em;vertical-align:0em;"></span><span class="mrel">⇒</span></span></span></span> <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi mathvariant="normal">∀</mi><mi>ϵ</mi><mo>&gt;</mo><mn>0</mn><mo separator="true">,</mo><mi mathvariant="normal">∃</mi><mi>N</mi><mo>∈</mo><msub><mi>N</mi><mo>+</mo></msub><mtext> such that </mtext><mi mathvariant="normal">∣</mi><msub><mi>a</mi><mi>n</mi></msub><mo>−</mo><mi mathvariant="normal">A</mi><mi mathvariant="normal">∣</mi><mo>&lt;</mo><mi>ϵ</mi><mtext> when </mtext><mi>n</mi><mo>&gt;</mo><mi>N</mi></mrow><annotation encoding="application/x-tex">\forall \epsilon &gt; 0, \exists N \in N_+ \text{ such that } |a_n - \Alpha| &lt; \epsilon \text{ when } n &gt; N</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.73354em;vertical-align:-0.0391em;"></span><span class="mord">∀</span><span class="mord mathdefault">ϵ</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">&gt;</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord">0</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">∃</span><span class="mord mathdefault" style="margin-right:0.10903em;">N</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">∈</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.10903em;">N</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.25833100000000003em;"><span style="top:-2.5500000000000003em;margin-left:-0.10903em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mbin mtight">+</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.208331em;"><span></span></span></span></span></span></span><span class="mord text"><span class="mord"> such that </span></span><span class="mord">∣</span><span class="mord"><span class="mord mathdefault">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">n</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathrm">A</span></span><span class="mord">∣</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">&lt;</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.73354em;vertical-align:-0.0391em;"></span><span class="mord mathdefault">ϵ</span><span class="mord text"><span class="mord"> when </span></span><span class="mord mathdefault">n</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">&gt;</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.10903em;">N</span></span></span></span></p><p>$e.g. <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow></mrow><annotation encoding="application/x-tex"></annotation></semantics></math></span><span class="katex-html" aria-hidden="true"></span></span>proof \text{ that }\lim\limits_{n \rightarrow \infty}\frac{n + (-1)^{n-1}}{n} = 1$</p><p><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>s</mi><mi>o</mi><mi>l</mi><mi>u</mi><mi>t</mi><mi>i</mi><mi>o</mi><mi>n</mi><mo>:</mo></mrow><annotation encoding="application/x-tex">solution:</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathdefault">s</span><span class="mord mathdefault">o</span><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="mord mathdefault">u</span><span class="mord mathdefault">t</span><span class="mord mathdefault">i</span><span class="mord mathdefault">o</span><span class="mord mathdefault">n</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">:</span></span></span></span><br><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi mathvariant="normal">∀</mi><mi>ϵ</mi><mo>&gt;</mo><mn>0</mn><mo separator="true">,</mo><mtext> there exists a positive integer N such that the inquality </mtext></mrow><annotation encoding="application/x-tex">\forall \epsilon&gt; 0,\text{ there exists a positive integer N such that the inquality }</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.73354em;vertical-align:-0.0391em;"></span><span class="mord">∀</span><span class="mord mathdefault">ϵ</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">&gt;</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord">0</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord text"><span class="mord"> there exists a positive integer N such that the inquality </span></span></span></span></span><br><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi mathvariant="normal">∣</mi><mfrac><mrow><mi>n</mi><mo>+</mo><mo stretchy="false">(</mo><mo>−</mo><mn>1</mn><msup><mo stretchy="false">)</mo><mrow><mi>n</mi><mo>−</mo><mn>1</mn></mrow></msup></mrow><mi>n</mi></mfrac><mo>−</mo><mn>1</mn><mi mathvariant="normal">∣</mi><mo>&lt;</mo><mi>ϵ</mi></mrow><annotation encoding="application/x-tex">| \frac{n + (-1)^{n-1}}{n} - 1 | &lt; \epsilon</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.4539199999999999em;vertical-align:-0.345em;"></span><span class="mord">∣</span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.10892em;"><span style="top:-2.6550000000000002em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">n</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.485em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">n</span><span class="mbin mtight">+</span><span class="mopen mtight">(</span><span class="mord mtight">−</span><span class="mord mtight">1</span><span class="mclose mtight"><span class="mclose mtight">)</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8913142857142857em;"><span style="top:-2.931em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">n</span><span class="mbin mtight">−</span><span class="mord mtight">1</span></span></span></span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.345em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mord">∣</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">&lt;</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">ϵ</span></span></span></span><br>$\text{ holds for all n &gt; N.} <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow></mrow><annotation encoding="application/x-tex"></annotation></semantics></math></span><span class="katex-html" aria-hidden="true"></span></span>| \frac{n + (-1)^{n-1}}{n} - 1 | = \frac{1}{n} &lt; \epsilon <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow></mrow><annotation encoding="application/x-tex"></annotation></semantics></math></span><span class="katex-html" aria-hidden="true"></span></span>\frac{1}{n} &lt; \epsilon$,<br>i.e. <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>n</mi><mo>&gt;</mo><mfrac><mn>1</mn><mi>ϵ</mi></mfrac></mrow><annotation encoding="application/x-tex">n &gt; \frac{1}{\epsilon}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.5782em;vertical-align:-0.0391em;"></span><span class="mord mathdefault">n</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">&gt;</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.190108em;vertical-align:-0.345em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.845108em;"><span style="top:-2.6550000000000002em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">ϵ</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.394em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.345em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span><br>Then we assign <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>N</mi><mo>=</mo><mo stretchy="false">[</mo><mfrac><mn>1</mn><mi>ϵ</mi></mfrac><mo stretchy="false">]</mo></mrow><annotation encoding="application/x-tex">N = [\frac{1}{\epsilon}]</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.10903em;">N</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.190108em;vertical-align:-0.345em;"></span><span class="mopen">[</span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.845108em;"><span style="top:-2.6550000000000002em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">ϵ</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.394em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.345em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mclose">]</span></span></span></span></p><p>Hance <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi mathvariant="normal">∀</mi><mi>ϵ</mi><mo>&gt;</mo><mn>0</mn></mrow><annotation encoding="application/x-tex">\forall \epsilon&gt; 0</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.73354em;vertical-align:-0.0391em;"></span><span class="mord">∀</span><span class="mord mathdefault">ϵ</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">&gt;</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">0</span></span></span></span>, we set <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>N</mi><mo>=</mo><mo stretchy="false">[</mo><mfrac><mn>1</mn><mi>ϵ</mi></mfrac><mo stretchy="false">]</mo></mrow><annotation encoding="application/x-tex">N = [\frac{1}{\epsilon}]</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.10903em;">N</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.190108em;vertical-align:-0.345em;"></span><span class="mopen">[</span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.845108em;"><span style="top:-2.6550000000000002em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">ϵ</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.394em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.345em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mclose">]</span></span></span></span>, and then for all <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>n</mi><mo>&gt;</mo><mi>N</mi></mrow><annotation encoding="application/x-tex">n &gt; N</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.5782em;vertical-align:-0.0391em;"></span><span class="mord mathdefault">n</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">&gt;</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.10903em;">N</span></span></span></span>, the inequality <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi mathvariant="normal">∣</mi><mfrac><mrow><mi>n</mi><mo>+</mo><mo stretchy="false">(</mo><mo>−</mo><mn>1</mn><msup><mo stretchy="false">)</mo><mrow><mi>n</mi><mo>−</mo><mn>1</mn></mrow></msup></mrow><mi>n</mi></mfrac><mo>−</mo><mn>1</mn><mi mathvariant="normal">∣</mi><mo>&lt;</mo><mi>ϵ</mi></mrow><annotation encoding="application/x-tex">| \frac{n + (-1)^{n-1}}{n} - 1 | &lt; \epsilon</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.4539199999999999em;vertical-align:-0.345em;"></span><span class="mord">∣</span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.10892em;"><span style="top:-2.6550000000000002em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">n</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.485em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">n</span><span class="mbin mtight">+</span><span class="mopen mtight">(</span><span class="mord mtight">−</span><span class="mord mtight">1</span><span class="mclose mtight"><span class="mclose mtight">)</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8913142857142857em;"><span style="top:-2.931em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">n</span><span class="mbin mtight">−</span><span class="mord mtight">1</span></span></span></span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.345em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mord">∣</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">&lt;</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">ϵ</span></span></span></span> holds.</p><p>Q.E.D</p><h1 id="span-id-4-4-the-limit-of-a-function-two-important-limits-of-functions-span"><span id="4">4 The limit of a function (two important limits of functions)</span></h1><h2 id="4-1-the-limit-of-a-function">4.1 The limit of a function</h2><p><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><munder><mo><mi>lim</mi><mo>⁡</mo></mo><mrow><mi>x</mi><mo>→</mo><msub><mi>x</mi><mn>0</mn></msub></mrow></munder><mi>f</mi><mo stretchy="false">(</mo><mi>x</mi><mo stretchy="false">)</mo><mo>=</mo><mi mathvariant="normal">A</mi></mrow><annotation encoding="application/x-tex">\lim\limits_{x \rightarrow x_0} f(x) = \Alpha</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.5501em;vertical-align:-0.8000999999999999em;"></span><span class="mop op-limits"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.69444em;"><span style="top:-2.4em;margin-left:0em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">x</span><span class="mrel mtight">→</span><span class="mord mtight"><span class="mord mathdefault mtight">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31731428571428577em;"><span style="top:-2.357em;margin-left:0em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.143em;"><span></span></span></span></span></span></span></span></span></span><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span><span class="mop">lim</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.8000999999999999em;"><span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="mopen">(</span><span class="mord mathdefault">x</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord"><span class="mord mathrm">A</span></span></span></span></span> <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo>⇐</mo><mo>⇒</mo></mrow><annotation encoding="application/x-tex">\Leftarrow\Rightarrow</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.36687em;vertical-align:0em;"></span><span class="mrel">⇐</span></span><span class="base"><span class="strut" style="height:0.36687em;vertical-align:0em;"></span><span class="mrel">⇒</span></span></span></span> <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi mathvariant="normal">∀</mi><mi>ϵ</mi><mo>&gt;</mo><mn>0</mn><mo separator="true">,</mo><mi mathvariant="normal">∃</mi><mi>δ</mi><mo>&gt;</mo><mn>0</mn><mtext> such that </mtext><mi mathvariant="normal">∣</mi><mi>f</mi><mo stretchy="false">(</mo><mi>x</mi><mo stretchy="false">)</mo><mo>−</mo><mi mathvariant="normal">A</mi><mi mathvariant="normal">∣</mi><mo>&lt;</mo><mi>ϵ</mi><mtext> whenever </mtext><mn>0</mn><mo>&lt;</mo><mi mathvariant="normal">∣</mi><mi>x</mi><mo>−</mo><msub><mi>x</mi><mn>0</mn></msub><mi mathvariant="normal">∣</mi><mo>&lt;</mo><mi>δ</mi></mrow><annotation encoding="application/x-tex">\forall \epsilon &gt; 0, \exists \delta &gt; 0 \text{ such that } |f(x) - \Alpha| &lt; \epsilon \text{ whenever } 0 &lt; |x - x_0| &lt; \delta</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.73354em;vertical-align:-0.0391em;"></span><span class="mord">∀</span><span class="mord mathdefault">ϵ</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">&gt;</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord">0</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">∃</span><span class="mord mathdefault" style="margin-right:0.03785em;">δ</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">&gt;</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">0</span><span class="mord text"><span class="mord"> such that </span></span><span class="mord">∣</span><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="mopen">(</span><span class="mord mathdefault">x</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathrm">A</span></span><span class="mord">∣</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">&lt;</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.73354em;vertical-align:-0.0391em;"></span><span class="mord mathdefault">ϵ</span><span class="mord text"><span class="mord"> whenever </span></span><span class="mord">0</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">&lt;</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">∣</span><span class="mord mathdefault">x</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathdefault">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord">∣</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">&lt;</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.03785em;">δ</span></span></span></span></p><p>The <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>f</mi><mo stretchy="false">(</mo><mi>x</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">f(x)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="mopen">(</span><span class="mord mathdefault">x</span><span class="mclose">)</span></span></span></span> defined in a <strong>deleted neighborhood</strong> of <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>x</mi><mn>0</mn></msub></mrow><annotation encoding="application/x-tex">x_0</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.58056em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>.(i.e. <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>x</mi><mo mathvariant="normal">≠</mo><msub><mi>x</mi><mn>0</mn></msub></mrow><annotation encoding="application/x-tex">x \ne x_0</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord mathdefault">x</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel"><span class="mrel"><span class="mord"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.69444em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="rlap"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="inner"><span class="mrel"></span></span><span class="fix"></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.19444em;"><span></span></span></span></span></span></span><span class="mrel">=</span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.58056em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>)</p><h2 id="4-2-infinitesimal-and-infinity">4.2 Infinitesimal and infinity</h2><h3 id="4-2-1-infinitesimal">4.2.1 Infinitesimal</h3><p>If the limit of a function <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>α</mi><mo stretchy="false">(</mo><mi>x</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">\alpha(x)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.0037em;">α</span><span class="mopen">(</span><span class="mord mathdefault">x</span><span class="mclose">)</span></span></span></span> is <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mtext> </mtext><mn>0</mn><mtext> </mtext></mrow><annotation encoding="application/x-tex">~0~</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mspace nobreak"> </span><span class="mord">0</span><span class="mspace nobreak"> </span></span></span></span> as <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>x</mi><mo>→</mo><msub><mi>x</mi><mn>0</mn></msub><mtext> </mtext><mo stretchy="false">(</mo><mi>o</mi><mi>r</mi><mtext> </mtext><mi>x</mi><mo>→</mo><mi mathvariant="normal">∞</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">x \rightarrow x_0 ~ (or ~ x \rightarrow \infty)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">x</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">→</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathdefault">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace nobreak"> </span><span class="mopen">(</span><span class="mord mathdefault">o</span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mspace nobreak"> </span><span class="mord mathdefault">x</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">→</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">∞</span><span class="mclose">)</span></span></span></span>, then we say that the function <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>α</mi><mo stretchy="false">(</mo><mi>x</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">\alpha(x)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.0037em;">α</span><span class="mopen">(</span><span class="mord mathdefault">x</span><span class="mclose">)</span></span></span></span> is called an infinitesimal quantity as <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>x</mi><mo>→</mo><msub><mi>x</mi><mn>0</mn></msub><mtext> </mtext><mo stretchy="false">(</mo><mi>o</mi><mi>r</mi><mtext> </mtext><mi>x</mi><mo>→</mo><mi mathvariant="normal">∞</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">x \rightarrow x_0 ~ (or ~ x \rightarrow \infty)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">x</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">→</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathdefault">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace nobreak"> </span><span class="mopen">(</span><span class="mord mathdefault">o</span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mspace nobreak"> </span><span class="mord mathdefault">x</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">→</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">∞</span><span class="mclose">)</span></span></span></span>, or simply called an <strong>infinitesimal</strong>.</p><p><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>lim</mi><mo>⁡</mo><mi>f</mi><mo stretchy="false">(</mo><mi>x</mi><mo stretchy="false">)</mo><mo>=</mo><mi>A</mi><mtext> </mtext></mrow><annotation encoding="application/x-tex">\lim f(x) = A~</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mop">lim</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="mopen">(</span><span class="mord mathdefault">x</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault">A</span><span class="mspace nobreak"> </span></span></span></span> if and only if <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mtext> </mtext><mi>lim</mi><mo>⁡</mo><mi>f</mi><mo stretchy="false">(</mo><mi>x</mi><mo stretchy="false">)</mo><mo>=</mo><mi>A</mi><mo>+</mo><mi>α</mi><mo stretchy="false">(</mo><mi>x</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">~\lim f(x) = A + \alpha(x)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mspace nobreak"> </span><span class="mop">lim</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="mopen">(</span><span class="mord mathdefault">x</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.76666em;vertical-align:-0.08333em;"></span><span class="mord mathdefault">A</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.0037em;">α</span><span class="mopen">(</span><span class="mord mathdefault">x</span><span class="mclose">)</span></span></span></span>, where <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>α</mi><mo stretchy="false">(</mo><mi>x</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">\alpha(x)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.0037em;">α</span><span class="mopen">(</span><span class="mord mathdefault">x</span><span class="mclose">)</span></span></span></span> is an infinitesimal.</p><ol><li>if $\lim \frac{\alpha(x)}{\beta(x)} = 0 $, <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>α</mi><mo stretchy="false">(</mo><mi>x</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">\alpha(x)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.0037em;">α</span><span class="mopen">(</span><span class="mord mathdefault">x</span><span class="mclose">)</span></span></span></span> is called an <strong>infinitesimal of higher order</strong> than <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>β</mi><mo stretchy="false">(</mo><mi>x</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">\beta(x)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.05278em;">β</span><span class="mopen">(</span><span class="mord mathdefault">x</span><span class="mclose">)</span></span></span></span>, denoted by <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>α</mi><mo stretchy="false">(</mo><mi>x</mi><mo stretchy="false">)</mo><mo>=</mo><mi>o</mi><mo stretchy="false">(</mo><mi>β</mi><mo stretchy="false">(</mo><mi>x</mi><mo stretchy="false">)</mo><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">\alpha(x) = o(\beta(x))</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.0037em;">α</span><span class="mopen">(</span><span class="mord mathdefault">x</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">o</span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.05278em;">β</span><span class="mopen">(</span><span class="mord mathdefault">x</span><span class="mclose">)</span><span class="mclose">)</span></span></span></span></li><li>if $\lim \frac{\alpha(x)}{\beta(x)} = \infty $, <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>α</mi><mo stretchy="false">(</mo><mi>x</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">\alpha(x)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.0037em;">α</span><span class="mopen">(</span><span class="mord mathdefault">x</span><span class="mclose">)</span></span></span></span> is called an <strong>infinitesimal of lower order</strong> than <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>β</mi><mo stretchy="false">(</mo><mi>x</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">\beta(x)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.05278em;">β</span><span class="mopen">(</span><span class="mord mathdefault">x</span><span class="mclose">)</span></span></span></span>.</li><li>if $\lim \frac{\alpha(x)}{\beta(x)} = C \neq 0 $, <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>α</mi><mo stretchy="false">(</mo><mi>x</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">\alpha(x)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.0037em;">α</span><span class="mopen">(</span><span class="mord mathdefault">x</span><span class="mclose">)</span></span></span></span> and <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>β</mi><mo stretchy="false">(</mo><mi>x</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">\beta(x)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.05278em;">β</span><span class="mopen">(</span><span class="mord mathdefault">x</span><span class="mclose">)</span></span></span></span> are called two <strong>infinitesimals with the same order</strong>.</li><li>if <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>lim</mi><mo>⁡</mo><mfrac><mrow><mi>α</mi><mo stretchy="false">(</mo><mi>x</mi><mo stretchy="false">)</mo></mrow><mrow><mi>β</mi><mo stretchy="false">(</mo><mi>x</mi><mo stretchy="false">)</mo></mrow></mfrac><mo>=</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">\lim \frac{\alpha(x)}{\beta(x)} = 1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.53em;vertical-align:-0.52em;"></span><span class="mop">lim</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.01em;"><span style="top:-2.655em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.05278em;">β</span><span class="mopen mtight">(</span><span class="mord mathdefault mtight">x</span><span class="mclose mtight">)</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.485em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.0037em;">α</span><span class="mopen mtight">(</span><span class="mord mathdefault mtight">x</span><span class="mclose mtight">)</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.52em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span></span></span></span>, <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>α</mi><mo stretchy="false">(</mo><mi>x</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">\alpha(x)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.0037em;">α</span><span class="mopen">(</span><span class="mord mathdefault">x</span><span class="mclose">)</span></span></span></span> and <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>β</mi><mo stretchy="false">(</mo><mi>x</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">\beta(x)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.05278em;">β</span><span class="mopen">(</span><span class="mord mathdefault">x</span><span class="mclose">)</span></span></span></span> are called two <strong>equivalent infinitesimals</strong>, denoted by <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>α</mi><mo stretchy="false">(</mo><mi>x</mi><mo stretchy="false">)</mo><mo>∼</mo><mi>β</mi><mo stretchy="false">(</mo><mi>x</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">\alpha(x)  \sim \beta(x)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.0037em;">α</span><span class="mopen">(</span><span class="mord mathdefault">x</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">∼</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.05278em;">β</span><span class="mopen">(</span><span class="mord mathdefault">x</span><span class="mclose">)</span></span></span></span>.</li><li>if <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>lim</mi><mo>⁡</mo><mfrac><mrow><mi>α</mi><mo stretchy="false">(</mo><mi>x</mi><mo stretchy="false">)</mo></mrow><mrow><mo stretchy="false">[</mo><mi>β</mi><mo stretchy="false">(</mo><mi>x</mi><mo stretchy="false">)</mo><msup><mo stretchy="false">]</mo><mi>k</mi></msup></mrow></mfrac><mo>=</mo><mi>C</mi><mo mathvariant="normal">≠</mo><mn>0</mn></mrow><annotation encoding="application/x-tex">\lim \frac{\alpha(x)}{[\beta(x)]^k}=C \neq 0</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.54242em;vertical-align:-0.5324199999999999em;"></span><span class="mop">lim</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.01em;"><span style="top:-2.6425799999999997em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mopen mtight">[</span><span class="mord mathdefault mtight" style="margin-right:0.05278em;">β</span><span class="mopen mtight">(</span><span class="mord mathdefault mtight">x</span><span class="mclose mtight">)</span><span class="mclose mtight"><span class="mclose mtight">]</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.7820285714285713em;"><span style="top:-2.786em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mathdefault mtight" style="margin-right:0.03148em;">k</span></span></span></span></span></span></span></span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.485em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.0037em;">α</span><span class="mopen mtight">(</span><span class="mord mathdefault mtight">x</span><span class="mclose mtight">)</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.5324199999999999em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord mathdefault" style="margin-right:0.07153em;">C</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel"><span class="mrel"><span class="mord"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.69444em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="rlap"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="inner"><span class="mrel"></span></span><span class="fix"></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.19444em;"><span></span></span></span></span></span></span><span class="mrel">=</span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">0</span></span></span></span>, <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>α</mi><mo stretchy="false">(</mo><mi>x</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">\alpha(x)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.0037em;">α</span><span class="mopen">(</span><span class="mord mathdefault">x</span><span class="mclose">)</span></span></span></span> is called an <strong>k-order infinitesimal</strong> of <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>β</mi><mo stretchy="false">(</mo><mi>x</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">\beta(x)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.05278em;">β</span><span class="mopen">(</span><span class="mord mathdefault">x</span><span class="mclose">)</span></span></span></span>.</li></ol><h3 id="4-2-2-equivalent-infinitesimals">4.2.2 equivalent infinitesimals</h3><p><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>β</mi><mo stretchy="false">(</mo><mi>x</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">\beta(x)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.05278em;">β</span><span class="mopen">(</span><span class="mord mathdefault">x</span><span class="mclose">)</span></span></span></span> and <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>α</mi><mo stretchy="false">(</mo><mi>x</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">\alpha(x)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.0037em;">α</span><span class="mopen">(</span><span class="mord mathdefault">x</span><span class="mclose">)</span></span></span></span> are equivalent infinitesimals, denoted by <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>α</mi><mo stretchy="false">(</mo><mi>x</mi><mo stretchy="false">)</mo><mo>∼</mo><mi>β</mi><mo stretchy="false">(</mo><mi>x</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">\alpha(x)  \sim \beta(x)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.0037em;">α</span><span class="mopen">(</span><span class="mord mathdefault">x</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">∼</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.05278em;">β</span><span class="mopen">(</span><span class="mord mathdefault">x</span><span class="mclose">)</span></span></span></span>. And for <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>α</mi><mo stretchy="false">(</mo><mi>x</mi><mo stretchy="false">)</mo><mo>∼</mo><mi>β</mi><mo stretchy="false">(</mo><mi>x</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">\alpha(x)  \sim \beta(x)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.0037em;">α</span><span class="mopen">(</span><span class="mord mathdefault">x</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">∼</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.05278em;">β</span><span class="mopen">(</span><span class="mord mathdefault">x</span><span class="mclose">)</span></span></span></span>, a necessary and sufficient condition is <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>β</mi><mo stretchy="false">(</mo><mi>x</mi><mo stretchy="false">)</mo><mo>=</mo><mi>α</mi><mo stretchy="false">(</mo><mi>x</mi><mo stretchy="false">)</mo><mo>+</mo><mi>o</mi><mo stretchy="false">(</mo><mi>α</mi><mo stretchy="false">(</mo><mi>x</mi><mo stretchy="false">)</mo><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">\beta(x) = \alpha(x) + o(\alpha(x))</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.05278em;">β</span><span class="mopen">(</span><span class="mord mathdefault">x</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.0037em;">α</span><span class="mopen">(</span><span class="mord mathdefault">x</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">o</span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.0037em;">α</span><span class="mopen">(</span><span class="mord mathdefault">x</span><span class="mclose">)</span><span class="mclose">)</span></span></span></span>.</p><p>Proof:<br>Necessity:<br>Suppose that <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>α</mi><mo stretchy="false">(</mo><mi>x</mi><mo stretchy="false">)</mo><mo>∼</mo><mi>β</mi><mo stretchy="false">(</mo><mi>x</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">\alpha(x)  \sim \beta(x)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.0037em;">α</span><span class="mopen">(</span><span class="mord mathdefault">x</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">∼</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.05278em;">β</span><span class="mopen">(</span><span class="mord mathdefault">x</span><span class="mclose">)</span></span></span></span>,<br>Then <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>lim</mi><mo>⁡</mo><mfrac><mrow><mi>β</mi><mo stretchy="false">(</mo><mi>x</mi><mo stretchy="false">)</mo><mo>−</mo><mi>α</mi><mo stretchy="false">(</mo><mi>x</mi><mo stretchy="false">)</mo></mrow><mrow><mi>α</mi><mo stretchy="false">(</mo><mi>x</mi><mo stretchy="false">)</mo></mrow></mfrac><mo>=</mo><mi>lim</mi><mo>⁡</mo><mo stretchy="false">(</mo><mfrac><mrow><mi>β</mi><mo stretchy="false">(</mo><mi>x</mi><mo stretchy="false">)</mo></mrow><mrow><mi>α</mi><mo stretchy="false">(</mo><mi>x</mi><mo stretchy="false">)</mo></mrow></mfrac><mo>−</mo><mn>1</mn><mo stretchy="false">)</mo><mo>=</mo><mi>lim</mi><mo>⁡</mo><mfrac><mrow><mi>β</mi><mo stretchy="false">(</mo><mi>x</mi><mo stretchy="false">)</mo></mrow><mrow><mi>α</mi><mo stretchy="false">(</mo><mi>x</mi><mo stretchy="false">)</mo></mrow></mfrac><mo>−</mo><mn>1</mn><mo>=</mo><mn>0</mn></mrow><annotation encoding="application/x-tex">\lim \frac{\beta(x) - \alpha(x)}{\alpha(x)} = \lim (\frac{\beta(x)}{\alpha(x)} - 1) = \lim \frac{\beta(x)}{\alpha(x)} - 1 = 0</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.53em;vertical-align:-0.52em;"></span><span class="mop">lim</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.01em;"><span style="top:-2.655em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.0037em;">α</span><span class="mopen mtight">(</span><span class="mord mathdefault mtight">x</span><span class="mclose mtight">)</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.485em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.05278em;">β</span><span class="mopen mtight">(</span><span class="mord mathdefault mtight">x</span><span class="mclose mtight">)</span><span class="mbin mtight">−</span><span class="mord mathdefault mtight" style="margin-right:0.0037em;">α</span><span class="mopen mtight">(</span><span class="mord mathdefault mtight">x</span><span class="mclose mtight">)</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.52em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.53em;vertical-align:-0.52em;"></span><span class="mop">lim</span><span class="mopen">(</span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.01em;"><span style="top:-2.655em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.0037em;">α</span><span class="mopen mtight">(</span><span class="mord mathdefault mtight">x</span><span class="mclose mtight">)</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.485em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.05278em;">β</span><span class="mopen mtight">(</span><span class="mord mathdefault mtight">x</span><span class="mclose mtight">)</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.52em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.53em;vertical-align:-0.52em;"></span><span class="mop">lim</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.01em;"><span style="top:-2.655em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.0037em;">α</span><span class="mopen mtight">(</span><span class="mord mathdefault mtight">x</span><span class="mclose mtight">)</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.485em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.05278em;">β</span><span class="mopen mtight">(</span><span class="mord mathdefault mtight">x</span><span class="mclose mtight">)</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.52em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">0</span></span></span></span><br>i.e. <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>lim</mi><mo>⁡</mo><mfrac><mrow><mi>β</mi><mo stretchy="false">(</mo><mi>x</mi><mo stretchy="false">)</mo><mo>−</mo><mi>α</mi><mo stretchy="false">(</mo><mi>x</mi><mo stretchy="false">)</mo></mrow><mrow><mi>α</mi><mo stretchy="false">(</mo><mi>x</mi><mo stretchy="false">)</mo></mrow></mfrac><mo>=</mo><mn>0</mn></mrow><annotation encoding="application/x-tex">\lim \frac{\beta(x) - \alpha(x)}{\alpha(x)} = 0</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.53em;vertical-align:-0.52em;"></span><span class="mop">lim</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.01em;"><span style="top:-2.655em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.0037em;">α</span><span class="mopen mtight">(</span><span class="mord mathdefault mtight">x</span><span class="mclose mtight">)</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.485em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.05278em;">β</span><span class="mopen mtight">(</span><span class="mord mathdefault mtight">x</span><span class="mclose mtight">)</span><span class="mbin mtight">−</span><span class="mord mathdefault mtight" style="margin-right:0.0037em;">α</span><span class="mopen mtight">(</span><span class="mord mathdefault mtight">x</span><span class="mclose mtight">)</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.52em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">0</span></span></span></span>, so <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>β</mi><mo stretchy="false">(</mo><mi>x</mi><mo stretchy="false">)</mo><mo>−</mo><mi>α</mi><mo stretchy="false">(</mo><mi>x</mi><mo stretchy="false">)</mo><mo>=</mo><mi>o</mi><mo stretchy="false">(</mo><mi>α</mi><mo stretchy="false">(</mo><mi>x</mi><mo stretchy="false">)</mo><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">\beta(x) - \alpha(x) = o(\alpha(x))</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.05278em;">β</span><span class="mopen">(</span><span class="mord mathdefault">x</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.0037em;">α</span><span class="mopen">(</span><span class="mord mathdefault">x</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">o</span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.0037em;">α</span><span class="mopen">(</span><span class="mord mathdefault">x</span><span class="mclose">)</span><span class="mclose">)</span></span></span></span><br>Hence, we obtain<br><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>β</mi><mo stretchy="false">(</mo><mi>x</mi><mo stretchy="false">)</mo><mo>=</mo><mi>α</mi><mo stretchy="false">(</mo><mi>x</mi><mo stretchy="false">)</mo><mo>+</mo><mi>o</mi><mo stretchy="false">(</mo><mi>α</mi><mo stretchy="false">(</mo><mi>x</mi><mo stretchy="false">)</mo><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">\beta(x) = \alpha(x) + o(\alpha(x))</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.05278em;">β</span><span class="mopen">(</span><span class="mord mathdefault">x</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.0037em;">α</span><span class="mopen">(</span><span class="mord mathdefault">x</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">o</span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.0037em;">α</span><span class="mopen">(</span><span class="mord mathdefault">x</span><span class="mclose">)</span><span class="mclose">)</span></span></span></span>.</p><p>Sufficiency:<br>Suppose that <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>β</mi><mo stretchy="false">(</mo><mi>x</mi><mo stretchy="false">)</mo><mo>=</mo><mi>α</mi><mo stretchy="false">(</mo><mi>x</mi><mo stretchy="false">)</mo><mo>+</mo><mi>o</mi><mo stretchy="false">(</mo><mi>α</mi><mo stretchy="false">(</mo><mi>x</mi><mo stretchy="false">)</mo><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">\beta(x) = \alpha(x) + o(\alpha(x))</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.05278em;">β</span><span class="mopen">(</span><span class="mord mathdefault">x</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.0037em;">α</span><span class="mopen">(</span><span class="mord mathdefault">x</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">o</span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.0037em;">α</span><span class="mopen">(</span><span class="mord mathdefault">x</span><span class="mclose">)</span><span class="mclose">)</span></span></span></span>,<br>Then <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>lim</mi><mo>⁡</mo><mfrac><mrow><mi>β</mi><mo stretchy="false">(</mo><mi>x</mi><mo stretchy="false">)</mo></mrow><mrow><mi>α</mi><mo stretchy="false">(</mo><mi>x</mi><mo stretchy="false">)</mo></mrow></mfrac><mo>=</mo><mi>lim</mi><mo>⁡</mo><mfrac><mrow><mi>α</mi><mo stretchy="false">(</mo><mi>x</mi><mo stretchy="false">)</mo><mo>+</mo><mi>o</mi><mo stretchy="false">(</mo><mi>α</mi><mo stretchy="false">(</mo><mi>x</mi><mo stretchy="false">)</mo><mo stretchy="false">)</mo></mrow><mrow><mi>α</mi><mo stretchy="false">(</mo><mi>x</mi><mo stretchy="false">)</mo></mrow></mfrac><mo>=</mo><mi>lim</mi><mo>⁡</mo><mo stretchy="false">(</mo><mfrac><mrow><mi>o</mi><mo stretchy="false">(</mo><mi>α</mi><mo stretchy="false">(</mo><mi>x</mi><mo stretchy="false">)</mo><mo stretchy="false">)</mo></mrow><mrow><mi>α</mi><mo stretchy="false">(</mo><mi>x</mi><mo stretchy="false">)</mo></mrow></mfrac><mo>+</mo><mn>1</mn><mo stretchy="false">)</mo><mo>=</mo><mi>lim</mi><mo>⁡</mo><mo stretchy="false">(</mo><mfrac><mrow><mi>o</mi><mo stretchy="false">(</mo><mi>α</mi><mo stretchy="false">(</mo><mi>x</mi><mo stretchy="false">)</mo><mo stretchy="false">)</mo></mrow><mrow><mi>α</mi><mo stretchy="false">(</mo><mi>x</mi><mo stretchy="false">)</mo></mrow></mfrac><mo stretchy="false">)</mo><mo>+</mo><mn>1</mn><mo>=</mo><mn>0</mn><mo>+</mo><mn>1</mn><mo>=</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">\lim \frac{\beta(x)}{\alpha(x)} = \lim \frac{\alpha(x) + o(\alpha(x))}{\alpha(x)} = \lim (\frac{o(\alpha(x))}{\alpha(x)} + 1) = \lim (\frac{o(\alpha(x))}{\alpha(x)}) +1 = 0 + 1 = 1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.53em;vertical-align:-0.52em;"></span><span class="mop">lim</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.01em;"><span style="top:-2.655em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.0037em;">α</span><span class="mopen mtight">(</span><span class="mord mathdefault mtight">x</span><span class="mclose mtight">)</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.485em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.05278em;">β</span><span class="mopen mtight">(</span><span class="mord mathdefault mtight">x</span><span class="mclose mtight">)</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.52em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.53em;vertical-align:-0.52em;"></span><span class="mop">lim</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.01em;"><span style="top:-2.655em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.0037em;">α</span><span class="mopen mtight">(</span><span class="mord mathdefault mtight">x</span><span class="mclose mtight">)</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.485em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.0037em;">α</span><span class="mopen mtight">(</span><span class="mord mathdefault mtight">x</span><span class="mclose mtight">)</span><span class="mbin mtight">+</span><span class="mord mathdefault mtight">o</span><span class="mopen mtight">(</span><span class="mord mathdefault mtight" style="margin-right:0.0037em;">α</span><span class="mopen mtight">(</span><span class="mord mathdefault mtight">x</span><span class="mclose mtight">)</span><span class="mclose mtight">)</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.52em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.53em;vertical-align:-0.52em;"></span><span class="mop">lim</span><span class="mopen">(</span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.01em;"><span style="top:-2.655em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.0037em;">α</span><span class="mopen mtight">(</span><span class="mord mathdefault mtight">x</span><span class="mclose mtight">)</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.485em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">o</span><span class="mopen mtight">(</span><span class="mord mathdefault mtight" style="margin-right:0.0037em;">α</span><span class="mopen mtight">(</span><span class="mord mathdefault mtight">x</span><span class="mclose mtight">)</span><span class="mclose mtight">)</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.52em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.53em;vertical-align:-0.52em;"></span><span class="mop">lim</span><span class="mopen">(</span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.01em;"><span style="top:-2.655em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.0037em;">α</span><span class="mopen mtight">(</span><span class="mord mathdefault mtight">x</span><span class="mclose mtight">)</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.485em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">o</span><span class="mopen mtight">(</span><span class="mord mathdefault mtight" style="margin-right:0.0037em;">α</span><span class="mopen mtight">(</span><span class="mord mathdefault mtight">x</span><span class="mclose mtight">)</span><span class="mclose mtight">)</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.52em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.72777em;vertical-align:-0.08333em;"></span><span class="mord">0</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span></span></span></span><br>i.e. $\lim \frac{\beta(x)}{\alpha(x)} = 1 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>H</mi><mi>e</mi><mi>n</mi><mi>c</mi><mi>e</mi><mo separator="true">,</mo><mi>w</mi><mi>e</mi><mi>o</mi><mi>b</mi><mi>t</mi><mi>a</mi><mi>i</mi><mi>n</mi></mrow><annotation encoding="application/x-tex">Hence, we obtain</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord mathdefault" style="margin-right:0.08125em;">H</span><span class="mord mathdefault">e</span><span class="mord mathdefault">n</span><span class="mord mathdefault">c</span><span class="mord mathdefault">e</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault" style="margin-right:0.02691em;">w</span><span class="mord mathdefault">e</span><span class="mord mathdefault">o</span><span class="mord mathdefault">b</span><span class="mord mathdefault">t</span><span class="mord mathdefault">a</span><span class="mord mathdefault">i</span><span class="mord mathdefault">n</span></span></span></span>\alpha(x)  \sim \beta(x)$.</p><p><strong>Theorem:</strong><br>Suppose that <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>α</mi><mo>∼</mo><mover accent="true"><mi>α</mi><mo>ˉ</mo></mover></mrow><annotation encoding="application/x-tex">\alpha \sim \bar{\alpha}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.0037em;">α</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">∼</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.56778em;vertical-align:0em;"></span><span class="mord accent"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.56778em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.0037em;">α</span></span></span><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="accent-body" style="left:-0.22222em;"><span class="mord">ˉ</span></span></span></span></span></span></span></span></span></span> and <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>β</mi><mo>∼</mo><mover accent="true"><mi>β</mi><mo>ˉ</mo></mover></mrow><annotation encoding="application/x-tex">\beta \sim \bar{\beta}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord mathdefault" style="margin-right:0.05278em;">β</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">∼</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.0256599999999998em;vertical-align:-0.19444em;"></span><span class="mord accent"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8312199999999998em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.05278em;">β</span></span></span><span style="top:-3.26344em;"><span class="pstrut" style="height:3em;"></span><span class="accent-body" style="left:-0.16666em;"><span class="mord">ˉ</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.19444em;"><span></span></span></span></span></span></span></span></span>, and <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>lim</mi><mo>⁡</mo><mfrac><mover accent="true"><mi>α</mi><mo>ˉ</mo></mover><mover accent="true"><mi>β</mi><mo>ˉ</mo></mover></mfrac></mrow><annotation encoding="application/x-tex">\lim \frac{\bar{\alpha}}{\bar{\beta}}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.3194079999999997em;vertical-align:-0.5279619999999998em;"></span><span class="mop">lim</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.791446em;"><span style="top:-2.6081460000000005em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord accent mtight"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8312199999999998em;"><span style="top:-2.7em;"><span class="pstrut" style="height:2.7em;"></span><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.05278em;">β</span></span></span><span style="top:-2.9634400000000003em;"><span class="pstrut" style="height:2.7em;"></span><span class="accent-body" style="left:-0.16666em;"><span class="mord mtight">ˉ</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.19444em;"><span></span></span></span></span></span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.394em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord accent mtight"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.56778em;"><span style="top:-2.7em;"><span class="pstrut" style="height:2.7em;"></span><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.0037em;">α</span></span></span><span style="top:-2.7em;"><span class="pstrut" style="height:2.7em;"></span><span class="accent-body" style="left:-0.22222em;"><span class="mord mtight">ˉ</span></span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.5279619999999998em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span> exists.<br>Then <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>lim</mi><mo>⁡</mo><mfrac><mi>α</mi><mi>β</mi></mfrac><mo>=</mo><mi>lim</mi><mo>⁡</mo><mfrac><mover accent="true"><mi>α</mi><mo>ˉ</mo></mover><mover accent="true"><mi>β</mi><mo>ˉ</mo></mover></mfrac></mrow><annotation encoding="application/x-tex">\lim \frac{\alpha}{\beta} = \lim \frac{\bar{\alpha}}{\bar{\beta}}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.1764999999999999em;vertical-align:-0.481108em;"></span><span class="mop">lim</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.695392em;"><span style="top:-2.6550000000000002em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.05278em;">β</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.394em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.0037em;">α</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.481108em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.3194079999999997em;vertical-align:-0.5279619999999998em;"></span><span class="mop">lim</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.791446em;"><span style="top:-2.6081460000000005em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord accent mtight"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8312199999999998em;"><span style="top:-2.7em;"><span class="pstrut" style="height:2.7em;"></span><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.05278em;">β</span></span></span><span style="top:-2.9634400000000003em;"><span class="pstrut" style="height:2.7em;"></span><span class="accent-body" style="left:-0.16666em;"><span class="mord mtight">ˉ</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.19444em;"><span></span></span></span></span></span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.394em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord accent mtight"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.56778em;"><span style="top:-2.7em;"><span class="pstrut" style="height:2.7em;"></span><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.0037em;">α</span></span></span><span style="top:-2.7em;"><span class="pstrut" style="height:2.7em;"></span><span class="accent-body" style="left:-0.22222em;"><span class="mord mtight">ˉ</span></span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.5279619999999998em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span></p><p><strong>Common equivalent infinitesimals:</strong><br>whenever <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>x</mi><mo>→</mo><mn>0</mn></mrow><annotation encoding="application/x-tex">x \rightarrow 0</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">x</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">→</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">0</span></span></span></span>:</p><ol><li><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>sin</mi><mo>⁡</mo><mi>x</mi><mo>∼</mo><mi>x</mi></mrow><annotation encoding="application/x-tex">\sin{x} \sim x</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.66786em;vertical-align:0em;"></span><span class="mop">sin</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault">x</span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">∼</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">x</span></span></span></span>,<br><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>tan</mi><mo>⁡</mo><mi>x</mi><mo>∼</mo><mi>x</mi></mrow><annotation encoding="application/x-tex">\tan{x} \sim x</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.61508em;vertical-align:0em;"></span><span class="mop">tan</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault">x</span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">∼</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">x</span></span></span></span>,<br><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>arcsin</mi><mo>⁡</mo><mi>x</mi><mo>∼</mo><mi>x</mi></mrow><annotation encoding="application/x-tex">\arcsin{x} \sim x</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.66786em;vertical-align:0em;"></span><span class="mop">arcsin</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault">x</span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">∼</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">x</span></span></span></span>,<br><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>arctan</mi><mo>⁡</mo><mi>x</mi><mo>∼</mo><mi>x</mi></mrow><annotation encoding="application/x-tex">\arctan{x} \sim x</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.61508em;vertical-align:0em;"></span><span class="mop">arctan</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault">x</span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">∼</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">x</span></span></span></span>,<br><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msup><mi>e</mi><mi>x</mi></msup><mo>−</mo><mn>1</mn><mo>∼</mo><mi>x</mi></mrow><annotation encoding="application/x-tex">e^{x} - 1 \sim x</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.747722em;vertical-align:-0.08333em;"></span><span class="mord"><span class="mord mathdefault">e</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.664392em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">x</span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">∼</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">x</span></span></span></span>,<br><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>ln</mi><mo>⁡</mo><mrow><mo stretchy="false">(</mo><mn>1</mn><mo>+</mo><mi>x</mi><mo stretchy="false">)</mo></mrow><mo>−</mo><mn>1</mn><mo>∼</mo><mi>x</mi></mrow><annotation encoding="application/x-tex">\ln{(1+x)} - 1 \sim x</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mop">ln</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mopen">(</span><span class="mord">1</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord mathdefault">x</span><span class="mclose">)</span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">∼</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">x</span></span></span></span></li><li><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>1</mn><mo>−</mo><mi>cos</mi><mo>⁡</mo><mi>x</mi><mo>∼</mo><mfrac><mn>1</mn><mn>2</mn></mfrac><msup><mi>x</mi><mn>2</mn></msup></mrow><annotation encoding="application/x-tex">1 - \cos{x} \sim \frac{1}{2}x^2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.72777em;vertical-align:-0.08333em;"></span><span class="mord">1</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mop">cos</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault">x</span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">∼</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.190108em;vertical-align:-0.345em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.845108em;"><span style="top:-2.6550000000000002em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.394em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.345em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mord"><span class="mord mathdefault">x</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span></span></span></span></li><li><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo stretchy="false">(</mo><mn>1</mn><mo>+</mo><mi>x</mi><msup><mo stretchy="false">)</mo><mi>δ</mi></msup><mo>∼</mo><mi>δ</mi><mi>x</mi></mrow><annotation encoding="application/x-tex">(1 + x)^{\delta} \sim \delta x</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord">1</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1.099108em;vertical-align:-0.25em;"></span><span class="mord mathdefault">x</span><span class="mclose"><span class="mclose">)</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.849108em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.03785em;">δ</span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">∼</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.03785em;">δ</span><span class="mord mathdefault">x</span></span></span></span></li><li><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msup><mi>a</mi><mi>x</mi></msup><mo>−</mo><mn>1</mn><mo>∼</mo><mi>x</mi><mi>ln</mi><mo>⁡</mo><mi>a</mi></mrow><annotation encoding="application/x-tex">a^x - 1 \sim x\ln{a}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.747722em;vertical-align:-0.08333em;"></span><span class="mord"><span class="mord mathdefault">a</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.664392em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">x</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">∼</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathdefault">x</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mop">ln</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault">a</span></span></span></span></span></li><li><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>sin</mi><mo>⁡</mo><mi>x</mi><mo>−</mo><mi>x</mi><mo>∼</mo><mo>−</mo><mfrac><msup><mi>x</mi><mn>3</mn></msup><mn>6</mn></mfrac></mrow><annotation encoding="application/x-tex">\sin{x} - x \sim - \frac{x^3}{6}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.75119em;vertical-align:-0.08333em;"></span><span class="mop">sin</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault">x</span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">x</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">∼</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.36292em;vertical-align:-0.345em;"></span><span class="mord">−</span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.01792em;"><span style="top:-2.6550000000000002em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">6</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.394em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mord mathdefault mtight">x</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8913142857142857em;"><span style="top:-2.931em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight">3</span></span></span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.345em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span><br><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>arcsin</mi><mo>⁡</mo><mi>x</mi><mo>−</mo><mi>x</mi><mo>∼</mo><mfrac><msup><mi>x</mi><mn>3</mn></msup><mn>6</mn></mfrac></mrow><annotation encoding="application/x-tex">\arcsin{x} - x \sim  \frac{x^3}{6}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.75119em;vertical-align:-0.08333em;"></span><span class="mop">arcsin</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault">x</span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">x</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">∼</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.36292em;vertical-align:-0.345em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.01792em;"><span style="top:-2.6550000000000002em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">6</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.394em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mord mathdefault mtight">x</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8913142857142857em;"><span style="top:-2.931em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight">3</span></span></span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.345em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span><br><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>tan</mi><mo>⁡</mo><mi>x</mi><mo>−</mo><mi>x</mi><mo>∼</mo><mfrac><msup><mi>x</mi><mn>3</mn></msup><mn>3</mn></mfrac></mrow><annotation encoding="application/x-tex">\tan{x} - x \sim \frac{x^3}{3}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69841em;vertical-align:-0.08333em;"></span><span class="mop">tan</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault">x</span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">x</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">∼</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.36292em;vertical-align:-0.345em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.01792em;"><span style="top:-2.6550000000000002em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">3</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.394em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mord mathdefault mtight">x</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8913142857142857em;"><span style="top:-2.931em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight">3</span></span></span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.345em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span><br><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>arctan</mi><mo>⁡</mo><mi>x</mi><mo>−</mo><mi>x</mi><mo>∼</mo><mo>−</mo><mfrac><msup><mi>x</mi><mn>3</mn></msup><mn>3</mn></mfrac></mrow><annotation encoding="application/x-tex">\arctan{x} - x \sim - \frac{x^3}{3}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69841em;vertical-align:-0.08333em;"></span><span class="mop">arctan</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault">x</span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">x</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">∼</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.36292em;vertical-align:-0.345em;"></span><span class="mord">−</span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.01792em;"><span style="top:-2.6550000000000002em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">3</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.394em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mord mathdefault mtight">x</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8913142857142857em;"><span style="top:-2.931em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight">3</span></span></span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.345em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span><br><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>ln</mi><mo>⁡</mo><mrow><mo stretchy="false">(</mo><mn>1</mn><mo>+</mo><mi>x</mi><mo stretchy="false">)</mo></mrow><mo>−</mo><mi>x</mi><mo>∼</mo><mo>−</mo><mfrac><msup><mi>x</mi><mn>2</mn></msup><mn>2</mn></mfrac></mrow><annotation encoding="application/x-tex">\ln{(1+x)} - x \sim - \frac{x^2}{2}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mop">ln</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mopen">(</span><span class="mord">1</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord mathdefault">x</span><span class="mclose">)</span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">x</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">∼</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.36292em;vertical-align:-0.345em;"></span><span class="mord">−</span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.01792em;"><span style="top:-2.6550000000000002em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.394em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mord mathdefault mtight">x</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8913142857142857em;"><span style="top:-2.931em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.345em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span></li></ol><h3 id="4-2-3-infinity">4.2.3 infinity</h3><p>If <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi mathvariant="normal">∀</mi><mi>M</mi><mo>&gt;</mo><mn>0</mn><mo separator="true">,</mo><mtext> </mtext><mi mathvariant="normal">∃</mi><mi>δ</mi><mo>&gt;</mo><mn>0</mn></mrow><annotation encoding="application/x-tex">\forall M &gt; 0, ~\exist \delta &gt; 0</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.73354em;vertical-align:-0.0391em;"></span><span class="mord">∀</span><span class="mord mathdefault" style="margin-right:0.10903em;">M</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">&gt;</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord">0</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mspace nobreak"> </span><span class="mord">∃</span><span class="mord mathdefault" style="margin-right:0.03785em;">δ</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">&gt;</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">0</span></span></span></span> such that<br><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi mathvariant="normal">∣</mi><mi>f</mi><mo stretchy="false">(</mo><mi>x</mi><mo stretchy="false">)</mo><mi mathvariant="normal">∣</mi><mo>&gt;</mo><mi>M</mi></mrow><annotation encoding="application/x-tex">|f(x)| &gt; M</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">∣</span><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="mopen">(</span><span class="mord mathdefault">x</span><span class="mclose">)</span><span class="mord">∣</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">&gt;</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.10903em;">M</span></span></span></span><br>whenever <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>0</mn><mo>&lt;</mo><mi mathvariant="normal">∣</mi><mi>x</mi><mo>−</mo><msub><mi>x</mi><mn>0</mn></msub><mi mathvariant="normal">∣</mi><mo>&lt;</mo><mi>δ</mi></mrow><annotation encoding="application/x-tex">0 &lt; |x - x_0| &lt; \delta</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68354em;vertical-align:-0.0391em;"></span><span class="mord">0</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">&lt;</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">∣</span><span class="mord mathdefault">x</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathdefault">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord">∣</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">&lt;</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.03785em;">δ</span></span></span></span> ,<br>then the function <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>f</mi><mo stretchy="false">(</mo><mi>x</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">f(x)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="mopen">(</span><span class="mord mathdefault">x</span><span class="mclose">)</span></span></span></span> is called an infinite quantity as <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>x</mi><mo>→</mo><msub><mi>x</mi><mn>0</mn></msub><mtext> </mtext><mo stretchy="false">(</mo><mi>o</mi><mi>r</mi><mtext> </mtext><mi>x</mi><mo>→</mo><mi mathvariant="normal">∞</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">x \rightarrow x_0 ~ (or ~ x \rightarrow \infty)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">x</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">→</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathdefault">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace nobreak"> </span><span class="mopen">(</span><span class="mord mathdefault">o</span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mspace nobreak"> </span><span class="mord mathdefault">x</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">→</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">∞</span><span class="mclose">)</span></span></span></span>, or simply called an <strong>infinity</strong>.</p><h2 id="4-3-two-important-limits-of-functions">4.3 Two important limits of functions</h2><ol><li><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mtext> </mtext></mrow><annotation encoding="application/x-tex">~</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0em;vertical-align:0em;"></span><span class="mspace nobreak"> </span></span></span></span> <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><munder><mo><mi>lim</mi><mo>⁡</mo></mo><mrow><mi>x</mi><mo>→</mo><mn>0</mn></mrow></munder><mfrac><mrow><mi>s</mi><mi>i</mi><mi>n</mi><mi>x</mi></mrow><mi>x</mi></mfrac><mo>=</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">\lim\limits_{x \rightarrow 0}\frac{sinx}{x} = 1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.572772em;vertical-align:-0.717108em;"></span><span class="mop op-limits"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.69444em;"><span style="top:-2.382892em;margin-left:0em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">x</span><span class="mrel mtight">→</span><span class="mord mtight">0</span></span></span></span><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span><span class="mop">lim</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.717108em;"><span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.855664em;"><span style="top:-2.6550000000000002em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">x</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.394em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">s</span><span class="mord mathdefault mtight">i</span><span class="mord mathdefault mtight">n</span><span class="mord mathdefault mtight">x</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.345em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span></span></span></span><br>But, <br><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mtext> </mtext></mrow><annotation encoding="application/x-tex">~</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0em;vertical-align:0em;"></span><span class="mspace nobreak"> </span></span></span></span> <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><munder><mo><mi>lim</mi><mo>⁡</mo></mo><mrow><mi>x</mi><mo>→</mo><mi mathvariant="normal">∞</mi></mrow></munder><mfrac><mrow><mi>s</mi><mi>i</mi><mi>n</mi><mi>x</mi></mrow><mi>x</mi></mfrac><mo>=</mo><mn>0</mn></mrow><annotation encoding="application/x-tex">\lim\limits_{x \rightarrow \infty}\frac{sinx}{x} = 0</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.555664em;vertical-align:-0.7em;"></span><span class="mop op-limits"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.69444em;"><span style="top:-2.4em;margin-left:0em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">x</span><span class="mrel mtight">→</span><span class="mord mtight">∞</span></span></span></span><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span><span class="mop">lim</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.7em;"><span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.855664em;"><span style="top:-2.6550000000000002em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">x</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.394em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">s</span><span class="mord mathdefault mtight">i</span><span class="mord mathdefault mtight">n</span><span class="mord mathdefault mtight">x</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.345em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">0</span></span></span></span> (infinitesimal (<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mfrac><mn>1</mn><mi>x</mi></mfrac></mrow><annotation encoding="application/x-tex">\frac{1}{x}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.190108em;vertical-align:-0.345em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.845108em;"><span style="top:-2.6550000000000002em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">x</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.394em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.345em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span>) <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo>×</mo></mrow><annotation encoding="application/x-tex">\times</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.66666em;vertical-align:-0.08333em;"></span><span class="mord">×</span></span></span></span> bounded function (<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>s</mi><mi>i</mi><mi>n</mi><mi>x</mi></mrow><annotation encoding="application/x-tex">sinx</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.65952em;vertical-align:0em;"></span><span class="mord mathdefault">s</span><span class="mord mathdefault">i</span><span class="mord mathdefault">n</span><span class="mord mathdefault">x</span></span></span></span>))<br><br></li><li><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mtext> </mtext></mrow><annotation encoding="application/x-tex">~</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0em;vertical-align:0em;"></span><span class="mspace nobreak"> </span></span></span></span> <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><munder><mo><mi>lim</mi><mo>⁡</mo></mo><mrow><mi>x</mi><mo>→</mo><mi mathvariant="normal">∞</mi></mrow></munder><mrow><mo stretchy="false">(</mo><mn>1</mn><mo>+</mo><mfrac><mn>1</mn><mi>x</mi></mfrac><msup><mo stretchy="false">)</mo><mi>x</mi></msup></mrow><mo>=</mo><mi>e</mi></mrow><annotation encoding="application/x-tex">\lim\limits_{x \rightarrow \infty}{(1 + \frac{1}{x})^{x}} = e</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.545108em;vertical-align:-0.7em;"></span><span class="mop op-limits"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.69444em;"><span style="top:-2.4em;margin-left:0em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">x</span><span class="mrel mtight">→</span><span class="mord mtight">∞</span></span></span></span><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span><span class="mop">lim</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.7em;"><span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mopen">(</span><span class="mord">1</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.845108em;"><span style="top:-2.6550000000000002em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">x</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.394em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.345em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mclose"><span class="mclose">)</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.664392em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">x</span></span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">e</span></span></span></span></li></ol><p><strong>The sandwich theorem</strong><br>If <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><munder><mo><mi>lim</mi><mo>⁡</mo></mo><mrow><mi>x</mi><mo>→</mo><msub><mi>x</mi><mn>0</mn></msub></mrow></munder><mi>f</mi><mo stretchy="false">(</mo><mi>x</mi><mo stretchy="false">)</mo><mo>=</mo><mi>A</mi></mrow><annotation encoding="application/x-tex">\lim\limits_{x \rightarrow x_0} f(x) = A</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.5501em;vertical-align:-0.8000999999999999em;"></span><span class="mop op-limits"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.69444em;"><span style="top:-2.4em;margin-left:0em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">x</span><span class="mrel mtight">→</span><span class="mord mtight"><span class="mord mathdefault mtight">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31731428571428577em;"><span style="top:-2.357em;margin-left:0em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.143em;"><span></span></span></span></span></span></span></span></span></span><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span><span class="mop">lim</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.8000999999999999em;"><span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="mopen">(</span><span class="mord mathdefault">x</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault">A</span></span></span></span>, <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><munder><mo><mi>lim</mi><mo>⁡</mo></mo><mrow><mi>x</mi><mo>→</mo><msub><mi>x</mi><mn>0</mn></msub></mrow></munder><mi>g</mi><mo stretchy="false">(</mo><mi>x</mi><mo stretchy="false">)</mo><mo>=</mo><mi>A</mi></mrow><annotation encoding="application/x-tex">\lim\limits_{x \rightarrow x_0} g(x) = A</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.5501em;vertical-align:-0.8000999999999999em;"></span><span class="mop op-limits"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.69444em;"><span style="top:-2.4em;margin-left:0em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">x</span><span class="mrel mtight">→</span><span class="mord mtight"><span class="mord mathdefault mtight">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31731428571428577em;"><span style="top:-2.357em;margin-left:0em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.143em;"><span></span></span></span></span></span></span></span></span></span><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span><span class="mop">lim</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.8000999999999999em;"><span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">g</span><span class="mopen">(</span><span class="mord mathdefault">x</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault">A</span></span></span></span> and <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi mathvariant="normal">∃</mi><mi>δ</mi><mo>&gt;</mo><mn>0</mn></mrow><annotation encoding="application/x-tex">\exist \delta &gt; 0</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.73354em;vertical-align:-0.0391em;"></span><span class="mord">∃</span><span class="mord mathdefault" style="margin-right:0.03785em;">δ</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">&gt;</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">0</span></span></span></span> such that <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>f</mi><mo stretchy="false">(</mo><mi>x</mi><mo stretchy="false">)</mo><mo>≤</mo><mi>φ</mi><mo stretchy="false">(</mo><mi>x</mi><mo stretchy="false">)</mo><mo>≤</mo><mi>g</mi><mo stretchy="false">(</mo><mi>x</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">f(x) \le \varphi(x) \le g(x)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="mopen">(</span><span class="mord mathdefault">x</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">φ</span><span class="mopen">(</span><span class="mord mathdefault">x</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">g</span><span class="mopen">(</span><span class="mord mathdefault">x</span><span class="mclose">)</span></span></span></span> whenever <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>0</mn><mo>&lt;</mo><mi mathvariant="normal">∣</mi><mi>x</mi><mo>−</mo><msub><mi>x</mi><mn>0</mn></msub><mi mathvariant="normal">∣</mi><mo>&lt;</mo><mi>δ</mi></mrow><annotation encoding="application/x-tex">0 &lt; | x - x_0 | &lt; \delta</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68354em;vertical-align:-0.0391em;"></span><span class="mord">0</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">&lt;</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">∣</span><span class="mord mathdefault">x</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathdefault">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord">∣</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">&lt;</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.03785em;">δ</span></span></span></span>, then <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><munder><mo><mi>lim</mi><mo>⁡</mo></mo><mrow><mi>x</mi><mo>→</mo><msub><mi>x</mi><mn>0</mn></msub></mrow></munder><mi>φ</mi><mo stretchy="false">(</mo><mi>x</mi><mo stretchy="false">)</mo><mo>=</mo><mi>A</mi></mrow><annotation encoding="application/x-tex">\lim\limits_{ x \rightarrow x_0 } \varphi(x) = A</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.5501em;vertical-align:-0.8000999999999999em;"></span><span class="mop op-limits"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.69444em;"><span style="top:-2.4em;margin-left:0em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">x</span><span class="mrel mtight">→</span><span class="mord mtight"><span class="mord mathdefault mtight">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31731428571428577em;"><span style="top:-2.357em;margin-left:0em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.143em;"><span></span></span></span></span></span></span></span></span></span><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span><span class="mop">lim</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.8000999999999999em;"><span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">φ</span><span class="mopen">(</span><span class="mord mathdefault">x</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault">A</span></span></span></span></p>]]></content>
      
      
      <categories>
          
          <category> advanced mathematics </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Math </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【KMP算法】算法分析和代码解析</title>
      <link href="/2023/02/11/ProgramLog/%5BKMP%E7%AE%97%E6%B3%95%5D%E7%AE%97%E6%B3%95%E5%88%86%E6%9E%90%E5%92%8C%E4%BB%A3%E7%A0%81%E8%A7%A3%E6%9E%90/"/>
      <url>/2023/02/11/ProgramLog/%5BKMP%E7%AE%97%E6%B3%95%5D%E7%AE%97%E6%B3%95%E5%88%86%E6%9E%90%E5%92%8C%E4%BB%A3%E7%A0%81%E8%A7%A3%E6%9E%90/</url>
      
        <content type="html"><![CDATA[<span id="more"></span><h3 id="文章目录">文章目录</h3><ul><li><a href="#%E4%B8%80%E9%97%AE%E9%A2%98%E8%83%8C%E6%99%AF">一、问题背景</a></li><li><a href="#%E4%BA%8C%E5%8E%9F%E7%90%86%E5%88%86%E6%9E%90">二、原理分析</a></li><li><a href="#%E4%B8%89next%E6%95%B0%E7%BB%84">三、next数组</a></li><li><a href="#%E5%9B%9B%E5%8C%B9%E9%85%8D%E6%9F%A5%E6%89%BE">四、匹配查找</a><ul><li><a href="#1-bf%E7%AE%97%E6%B3%95">1 BF算法</a></li><li><a href="#2-kmp%E7%AE%97%E6%B3%95">2 KMP算法</a></li></ul></li><li><a href="#%E4%BA%94%E7%AE%97%E6%B3%95%E4%BC%98%E5%8C%96">五、算法优化</a></li><li><a href="#%E5%85%AD%E5%AE%8C%E6%95%B4%E4%BB%A3%E7%A0%81">六、完整代码</a></li></ul><hr><h1 id="一-问题背景">一、问题背景</h1><p>被KMP算法折磨之余，记录此笔记。<br>笔者只是拾人牙慧的小屁孩，站在巨人的肩膀上做一些总结。</p><p>此笔记加入了部分笔者自己的理解，如有不对还请大家指正。</p><p>推荐补课视频：</p><ul><li>b站：</li></ul><p><img src="https://img-blog.csdnimg.cn/2d85dfcfddef41bda13d6d53427ea86d.png" alt=""><br><img src="https://img-blog.csdnimg.cn/b3999bd845814424af96546391a0aced.png" alt=""></p><h1 id="二-原理分析">二、原理分析</h1><p>此处参考：程杰作者的《大话数据结构（溢彩加强版）》<br><img src="https://img-blog.csdnimg.cn/fa9a3bf59c514c65b75591a693e6bd33.jpeg" alt=""></p><p>我们平时在字符串匹配时，常常使用BF算法（暴力算法），即一个字符串和另外一个字符串依次比较，如果有一个字符不相等，就让被比较的字符串后移一位，再进行比较：<br><img src="https://img-blog.csdnimg.cn/633cd25864ef46fbacb3c06d6bfcbc58.jpeg" alt=""><br>但我们仔细观察，字符<code>a</code>与<code>bcdex</code>没有一个相同，而情况①的时候，前五个字符又处处相等，这也就告诉我们<code>a</code>不可能与蓝色串的第2到5位相同。②③④⑤ 的判断都是多余。<br>而<code>x</code> 不等于 <code>f</code>，<code>x</code> 不等于 <code>a</code>，我们无法推出<code>a</code> 不等于 <code>f</code>。<br>是的，非常像小时候玩的脑筋急转弯：一个三个人A、B、C，其中一个是犯人，A说我没杀人，B说我杀了人，C说我们其中有一个人说了谎。</p><p>我们再来看下面一个例子：</p><p><img src="https://img-blog.csdnimg.cn/4e2907c251164ec4a3ec996c63b971cd.jpeg" alt=""><br><img src="https://img-blog.csdnimg.cn/9c73dade69ec474d989ed3a2af20dd32.jpeg" alt=""><br>也是，前 5 个字符完全相等，第 6 个字符不等。<br>黄色字符串的首字符<code>a</code>与黄色字符串的第二位字符<code>b</code>、第三位字符<code>c</code>均不等。<br>故，②③ 都是多余的。<br>但因为黄色字符串的首字符<code>a</code>和第四位<code>a</code>相等，二五位的<code>b</code>也是。<br>而在情况①的时候，红色字符串和黄色字符串前5个字符相等，故 ④⑤ 这两个比较得出字符相等的步骤也可以省略。（这里④⑤⑥没有移动字符串，仅仅表示比较流程）</p><p>我们可以得出结论，对于在子串中有与首字符相等的字符，也是可以省略一部分不必要的判断步骤。<br><img src="https://img-blog.csdnimg.cn/3b14e225c03940d5b54e1975249a1645.jpeg" alt=""><br>这样<code>i</code>就不必一次又一次的从<code>1</code>到有差异的地方（这里的例子为<code>6</code>），然后又从<code>2</code>到<code>6</code> <strong>…</strong></p><p>我们的 KMP 模式匹配算法就是为了让这没必要的回溯不发生。</p><p>既然<code>i</code>值不回溯，也就是不可以变小，那么要考虑的变化就是<code>j</code>值了。<br>通过观察也可以发现，我们屡屡提到了 黄色和绿色字符串的首字符与自身后面字符的比较，发现如果有相等字符，<code>j</code>值的变化就会不相同。也就是说，这个<code>j</code>值的变化与主串其实没什么关系，关键就取决于这些字符串的结构中是否有重复的问题。</p><p>比如这个：<code>abcdex</code>当中没有任何重复的字符，所以j就由 <code>6</code> 变成了 <code>1</code>。<br><img src="https://img-blog.csdnimg.cn/a95f35ab4176417ca728288a0bc3525c.jpeg" alt=""><br>也就是说，我们在需要查找字符串前，先对要查找的字符串做一个分析，这样可以大大减少我们查找的难度，提高查找的速度。</p><h1 id="三-next数组">三、next数组</h1><p>我们把要比较字符串的各个位置<code>j</code>值的变化定义为一个数组 <code>next</code>，那么 <code>next</code> 的长度就是该字符串的长度。</p><p>此处参考：</p><p>next数组手算教学：<br><a href="https://www.bilibili.com/video/BV1jb411V78H/?spm_id_from=333.337.search-card.all.click&amp;vd_source=f9b9ba0205fa326231b3666cd4134be1">【天勤考研】KMP算法易懂版</a></p><p>next数组代码解释：<br><a href="https://www.bilibili.com/video/BV16X4y137qw/?spm_id_from=333.337.search-card.all.click&amp;vd_source=f9b9ba0205fa326231b3666cd4134be1">KMP算法之求next数组代码讲解</a></p><p>next数组手算其实很简单，，找到最长前后缀（从第一个不同的地方往前找，首字符开始的和第一个不同的地方的前一个字符，各自与相邻的组合，如果双方可以组合为相等字符串，且位数最长的时候）即可：<br><img src="https://img-blog.csdnimg.cn/5f2e55285d1242988434347d67ff3c36.png" alt=""><br>然后移动<code>j</code>位数到【1（因为字符串从1开始，固加1）+最长前后缀的长度（这里为2）=3】，故我们把<code>j</code>从<code>6</code>，移动到<code>3</code><br>当然，字符串下标从0开始的也可以表示为：<code>j</code>从<code>5</code>移动到<code>2</code>（这里的<code>2</code>直接为最长前后缀的长度）</p><p><img src="https://img-blog.csdnimg.cn/e6aff8ac69ba49908b4171b30e27b4b6.png" alt=""><br>而这个next数组，就是<code>next[6]=3</code>（这里的字符串下标从1开始）<br><code>next[5]=2</code>（这里的字符串下标从0开始）</p><p>接下来，笔者为了兼容C++的string，都默认使用下标从0开始的字符串。</p><p>此时就有一个难点，如何高效的找出next数组。我们不可能一次一次的字符串相连并比较，这样就违背了我们发明KMP算法的效率优势，故，找出next数组也有很多讲究。</p><p>参考：<br>CSDN：<br><a href="https://blog.csdn.net/Amahisa/article/details/105137652">KMP算法详解及next数组代码解释</a><br>b站视频：<br><a href="https://www.bilibili.com/video/BV16X4y137qw/?spm_id_from=333.337.search-card.all.click&amp;vd_source=f9b9ba0205fa326231b3666cd4134be1">KMP算法之求next数组代码讲解</a></p><p>这也是关于KMP算法疑问最多的地方，next数组是如何得到的？关键在于要牢牢记住next数组中值的含义到底是什么，记住这一点才能更好得理解next数组。</p><p>我们说过，next数组中每一项的值都是该位置字符之前子串的相等最长前后缀长度。</p><table><thead><tr><th>下标</th><th>0</th><th>1</th><th>2</th><th>3</th><th>4</th><th>5</th><th>6</th><th>7</th><th>8</th><th>9</th><th>10</th><th>11</th><th>12</th><th>13</th><th>14</th><th>15</th><th>16</th></tr></thead><tbody><tr><td>next</td><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td>7</td><td>？</td></tr></tbody></table><p>当我们要求第16位的next数组时，我们就查看<code>next[15]</code> ，假设其值为<code>7</code>。<br>我们由此可知，最长前后缀位为长度为7，而2 × \times × 7 = 14，0到14一共有15个位置，故我们可以得知红色的两个区域重合：</p><p><img src="https://img-blog.csdnimg.cn/ecba59cf6da24b609bcd8d62c85425d2.png" alt=""></p><p>此时，设字符串为<code>s</code>，如果<code>s[7]==s[15]</code>，那么<strong>字符串0-7</strong>等于<strong>字符串8-15</strong>，则<code>next[16] = 8</code>。（故，当<code>next[15] == 7</code>时，是位16最理想的情况，因为它有一定几率突破<code>8</code>）<br>如果<code>s[7]!=s[15]</code>，则再看7的值：</p><table><thead><tr><th>下标</th><th>0</th><th>1</th><th>2</th><th>3</th><th>4</th><th>5</th><th>6</th><th>7</th><th>8</th><th>9</th><th>10</th><th>11</th><th>12</th><th>13</th><th>14</th><th>15</th><th>16</th></tr></thead><tbody><tr><td>next</td><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td>3</td><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td>7</td><td>？</td></tr></tbody></table><p>这里我们也假设最长前后缀位为长度为3：<br><img src="https://img-blog.csdnimg.cn/386352ebc15d454aa6baf58eef130de0.png" alt=""><br>如果<code>s[3]==s[15]</code>，那么<strong>字符串0-3</strong>等于<strong>字符串12-15</strong>，则<code>next[16] = 4</code>。<br>否则再继续细分<br><strong>…</strong><br>当然如果没有找到最长前后缀，则<code>next[16] = 0</code></p><p>于是我们回到代码中来：<br>笔者这里利用vector代替了数组，主要是数组是定大小的，字符串长度是不定大小的，害怕数组不够，于是改用vector，其核心原理与数组版是一致的。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">std::vector&lt;<span class="type">int</span>&gt; <span class="title">get_next</span><span class="params">(<span class="type">const</span> std::string &amp;s)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (s.<span class="built_in">length</span>() &lt; <span class="number">1</span>)</span><br><span class="line">        <span class="keyword">return</span> &#123;&#125;;</span><br><span class="line">    std::vector&lt;<span class="type">int</span>&gt; next&#123;<span class="number">-1</span>&#125;;</span><br><span class="line">    <span class="type">int</span> i = <span class="number">0</span>, j = <span class="number">-1</span>;</span><br><span class="line">    <span class="type">long</span> len = s.<span class="built_in">length</span>();</span><br><span class="line">    <span class="keyword">while</span> (i &lt; len - <span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (j == <span class="number">-1</span> || s[i] == s[j])</span><br><span class="line">        &#123;</span><br><span class="line">            ++i;++j;</span><br><span class="line">            next.<span class="built_in">push_back</span>(j);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            j = next[j];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> next;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>next[0]</code>即对应了字符串0位置之前子串的相等最长前后缀长度，0已经是第一个字符了，之前不存在子串，因此，将<code>next[0]</code>设置为<code>-1</code>。<br>接着，我们让<code>i</code>作为之前我们寻找差异之处的位置的含义，则<code>i</code>之前的区域就是我们寻找最长前后缀的区域。故，当我们存储的时候，<code>++i</code>，表示我们存储的是<code>i</code>之后的那个下标。（就像刚刚举例中的位15和位16的关系）<br>而<code>j</code>现在还指向空字符的<code>next</code>的值，我们也让<code>++j</code>，让它现在为第一个字符的<code>next</code>值。并存入<code>next[1]</code>中。<br>而此时我们寻找的区域随着<code>i</code>的扩大，也变成了两个字符了。<br>此时我们比较第一第二两个字符，如果相等，继续扩大<code>i</code>，增加范围，<code>j</code>所代表的最长前后缀也再次<code>++</code>。<br>如果不等就说明现在的最理想的最长前后缀不适用，只能退而求其次。借用刚刚推荐视频中UP主【凡三岁爱学习】的一种说法，KMP算法，又叫「看门牌算法」，我们找寻最长前后缀则是一种看门牌的过程，门牌就是下标，意为拿着下标找数，按照刚刚的例子来说就是位15的值为<code>7</code>，<code>7</code>不行，则去找位7，位7的值为<code>3</code>，<code>3</code>不行，则找位3。<br>用代码表示即为：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">j = next[j];</span><br></pre></td></tr></table></figure><p>让我们继续我们的推演，刚刚说到不等于的情况，<code>j</code>刚刚从<code>-1</code>加到<code>0</code>，而<code>next[0] == \-1</code>，则意思是最长前后缀为<code>0</code>，因为<code>j == \-1</code>的结果是马上<code>++j</code>到<code>0</code>并被丢进<code>next[2]</code>。</p><p>当然，让我们继续推演，揭开<code>s[j]</code>的含义的面纱：<br>由于之前<code>next[2] == 0</code>，而现在<code>i == 2</code>，即现在探讨的问题是<code>next</code>位3（即字符串位3）之前的最长前后缀问题，而我们知道最长前后缀可以看上一位的值，来看门牌，上一位就是<code>j</code>，也是<code>0</code>，也就是说之前的最长前后缀为零，0和0之前夹着的就是0；当然也可以按照规则，我们看门牌比较字符，即比较<code>s[i] == s[j]</code>，如果相等，则为<code>i</code>和<code>j</code>加1，比较下一位字符；反之，继续门牌递减。</p><h1 id="四-匹配查找">四、匹配查找</h1><p>当然，解决了next数组问题，我们也就完成了任务的大部分，剩下的问题借坡下驴就行。</p><h2 id="1-bf算法">1 BF算法</h2><p>我们先看看BF算法的思路，汲取灵感：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">string_cmp</span><span class="params">(<span class="type">const</span> std::string &amp;s1, <span class="type">const</span> std::string &amp;s2)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> i = <span class="number">0</span>, j = <span class="number">0</span>;</span><br><span class="line">    <span class="type">long</span> len1 = s1.<span class="built_in">length</span>(), len2 = s2.<span class="built_in">length</span>();</span><br><span class="line">    <span class="keyword">while</span> (i &lt; len1 &amp;&amp; j &lt; len2)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (s1[i] == s2[j])</span><br><span class="line">        &#123;</span><br><span class="line">            ++i;</span><br><span class="line">            ++j;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            i = i - j +<span class="number">1</span> ;</span><br><span class="line">            j = <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (j == len2)</span><br><span class="line">        <span class="keyword">return</span> i - len2;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们让字符相等时<code>++i;++j;</code>，而字符不等时，我们让<code>i</code>回到之前的状态并加1。然后清空<code>j</code>。<br>这里第一次<code>i-j</code>肯定为<code>0</code>，之后<code>j = 0;</code>，每次<code>++i</code>后，<code>j</code>也跟着<code>++</code>，相当于<code>j</code>也记录了<code>i</code>的状态（多加的数），当再次出现字符不同时，<code>i-j</code>就能回到上次匹配开始时<code>i</code>的位置，这次我们再加1，开始下一轮匹配。</p><h2 id="2-kmp算法">2 KMP算法</h2><p>仿照BF算法，遍历两个字符串，一旦不相等，<code>j</code>就返回<code>next</code>中存储的位置：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">kmp</span><span class="params">(<span class="type">const</span> std::string &amp;s1, <span class="type">const</span> std::string &amp;s2)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> i = <span class="number">0</span>, j = <span class="number">0</span>;</span><br><span class="line">    <span class="type">long</span> len1 = s1.<span class="built_in">length</span>(), len2 = s2.<span class="built_in">length</span>();</span><br><span class="line">    std::vector&lt;<span class="type">int</span>&gt; next = <span class="built_in">get_next</span>(s2);</span><br><span class="line">    <span class="keyword">while</span> (i &lt; len1 &amp;&amp; j &lt; len2)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (j == <span class="number">-1</span> || s1[i] == s2[j])</span><br><span class="line">        &#123;</span><br><span class="line">            ++i;</span><br><span class="line">            ++j;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            j = next[j];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (j == len2)</span><br><span class="line">        <span class="keyword">return</span> i - len2;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里的<code>i</code>将不再回溯，<code>s1[i]</code>去与<code>s1[j]</code>，如果匹配，就<code>++i</code>，<code>++j</code>，比较下一个字符，反之就通过<code>next</code>数组，让<code>j</code>移位。<br>其实按照这个逻辑，代码应该写成这样：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (s1[i] == s2[j])</span><br><span class="line">      &#123;</span><br><span class="line">          ++i;</span><br><span class="line">          ++j;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">else</span></span><br><span class="line">          j = next[j];</span><br></pre></td></tr></table></figure><p>不过，当我们<code>j</code>通过一次又一次的找门牌，直到回到了<code>next[0] == \-1</code>，那么说明不是字符串<code>s2</code>的问题，是字符串<code>s1</code>的问题了，该移动一下<code>i</code>了，于是我们让<code>j</code>从<code>-1</code>到<code>0</code>，从新开始比对，比对的是后一位的<code>i</code>。<br>所以，我们修改条件为：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (j == <span class="number">-1</span> || s1[i] == s2[j])</span><br></pre></td></tr></table></figure><p>参考：<br><img src="https://img-blog.csdnimg.cn/d2371b824f994fa9a9a193f88daea4e9.png" alt=""></p><p><a href="https://www.bilibili.com/video/BV1k8411h7oV/?spm_id_from=333.337.search-card.all.click">KMP算法从常规思维到解题思路(全网最全,感谢博主: sofu6)</a></p><h1 id="五-算法优化">五、算法优化</h1><p>参考：<br>b站视频（这个视频好像也是转载的王道的）：<br><img src="https://img-blog.csdnimg.cn/1b1ab2b92cf84394b2680c5eb56d8885.png" alt=""></p><p>我们设想一种情况：<br><img src="https://img-blog.csdnimg.cn/a318e7d72e19429a89a0f9bf7fb267e8.png#pic_center" alt=""><br>字符串1位的<code>g</code>和4位的<code>g</code>相同，而此时<code>next[4]==1</code>，当<code>j==1</code>时，还是<code>g</code>，又拿<code>g</code>和<code>l</code>比较了一次，这不就重复了嘛。<br>解决方法也很简单，让它直接在求next数组时，就比较一下新门牌号的字符（<code>++i;++j</code>之后的字符），如果是相等的，就说明是重复的，直接再看一次门牌。<br>这里有点抽象，我们拿刚刚的例子来说：<br>比如刚刚我们在计算<code>next[4]</code>，按照以前的方法就会被赋值为<code>1</code>（因为字符串从1开始，长度0+1），但因为重复，我们必然会重返<code>next[1]</code>，所以我们可以直接将<code>next[4]=1</code>改成<code>next[4]==next[1]</code>。<br>普遍一点就是：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">next[i] = next[j];</span><br></pre></td></tr></table></figure><p>我们用的vector，那就是<code>next.push_back(next[j]);</code></p><p>于是，我们改写求<code>next</code>数组的代码：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">std::vector&lt;<span class="type">int</span>&gt; <span class="title">get_next</span><span class="params">(<span class="type">const</span> std::string &amp;s)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (s.<span class="built_in">length</span>() &lt; <span class="number">1</span>)</span><br><span class="line">        <span class="keyword">return</span> &#123;&#125;;</span><br><span class="line">    std::vector&lt;<span class="type">int</span>&gt; next&#123;<span class="number">-1</span>&#125;;</span><br><span class="line">    <span class="type">int</span> i = <span class="number">0</span>, j = <span class="number">-1</span>;</span><br><span class="line">    <span class="type">long</span> len = s.<span class="built_in">length</span>();</span><br><span class="line">    <span class="keyword">while</span> (i &lt; len - <span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (j == <span class="number">-1</span> || s[i] == s[j])</span><br><span class="line">        &#123;</span><br><span class="line">            ++i;++j;</span><br><span class="line">            <span class="keyword">if</span> (s[i] != s[j])</span><br><span class="line">                next.<span class="built_in">push_back</span>(j);</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                next.<span class="built_in">push_back</span>(next[j]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            j = next[j];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> next;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="六-完整代码">六、完整代码</h1><p>结尾附上完整代码：</p><p>kmp.h</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// Created by Whisky on 2023/2/10.</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">ifndef</span> DATA_STRUCTURE_KMP_H</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> DATA_STRUCTURE_KMP_H</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function">std::vector&lt;<span class="type">int</span>&gt; <span class="title">get_next</span><span class="params">(<span class="type">const</span> std::string &amp;)</span></span>;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">kmp</span><span class="params">(<span class="type">const</span> std::string &amp;, <span class="type">const</span> std::string &amp;, <span class="type">int</span> = <span class="number">0</span>)</span></span>;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">cmp</span><span class="params">(<span class="type">const</span> std::string &amp;, <span class="type">const</span> std::string &amp;)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span> <span class="comment">//DATA_STRUCTURE_KMP_H</span></span></span><br></pre></td></tr></table></figure><p>kmp.cpp</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// Created by Whisky on 2023/2/10.</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;kmp.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">//BF算法</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">cmp</span><span class="params">(<span class="type">const</span> std::string &amp;s1, <span class="type">const</span> std::string &amp;s2)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> i = <span class="number">0</span>, j = <span class="number">0</span>;</span><br><span class="line">    <span class="type">long</span> len1 = s1.<span class="built_in">length</span>(), len2 = s2.<span class="built_in">length</span>();</span><br><span class="line">    <span class="keyword">while</span> (i &lt; len1 &amp;&amp; j &lt; len2)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (s1[i] == s2[j])</span><br><span class="line">        &#123;</span><br><span class="line">            ++i;</span><br><span class="line">            ++j;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            i = i - j +<span class="number">1</span> ;</span><br><span class="line">            j = <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (j == len2)</span><br><span class="line">        <span class="keyword">return</span> i - len2;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//求next数组</span></span><br><span class="line"><span class="function">std::vector&lt;<span class="type">int</span>&gt; <span class="title">get_next</span><span class="params">(<span class="type">const</span> std::string &amp;s)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (s.<span class="built_in">length</span>() &lt; <span class="number">1</span>)</span><br><span class="line">        <span class="keyword">return</span> &#123;&#125;;</span><br><span class="line">    std::vector&lt;<span class="type">int</span>&gt; next&#123;<span class="number">-1</span>&#125;;</span><br><span class="line">    <span class="type">int</span> i = <span class="number">0</span>, j = <span class="number">-1</span>;</span><br><span class="line">    <span class="type">long</span> len = s.<span class="built_in">length</span>();</span><br><span class="line">    <span class="keyword">while</span> (i &lt; len - <span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (j == <span class="number">-1</span> || s[i] == s[j])</span><br><span class="line">        &#123;</span><br><span class="line">            ++i;++j;</span><br><span class="line">            <span class="keyword">if</span> (s[i] != s[j])</span><br><span class="line">                next.<span class="built_in">push_back</span>(j);</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                next.<span class="built_in">push_back</span>(next[j]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            j = next[j];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> next;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//KMP算法</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">kmp</span><span class="params">(<span class="type">const</span> std::string &amp;s1, <span class="type">const</span> std::string &amp;s2, <span class="type">int</span> pos)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> i = pos, j = <span class="number">0</span>;</span><br><span class="line">    <span class="type">long</span> len1 = s1.<span class="built_in">length</span>(), len2 = s2.<span class="built_in">length</span>();</span><br><span class="line">    std::vector&lt;<span class="type">int</span>&gt; next = <span class="built_in">get_next</span>(s2);</span><br><span class="line">    <span class="keyword">while</span> (i &lt; len1 &amp;&amp; j &lt; len2)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (j == <span class="number">-1</span> || s1[i] == s2[j])</span><br><span class="line">        &#123;</span><br><span class="line">            ++i;</span><br><span class="line">            ++j;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            j = next[j];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (j == len2)</span><br><span class="line">        <span class="keyword">return</span> i - len2;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 记录一次编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> c++ </tag>
            
            <tag> 算法 </tag>
            
            <tag> 数据结构 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【C/C++】 复杂计算器——四则运算表达式求值（中缀转后缀表达式）</title>
      <link href="/2023/02/09/ProgramLog/%5BC!C++%5D%20%E5%A4%8D%E6%9D%82%E8%AE%A1%E7%AE%97%E5%99%A8%E2%80%94%E2%80%94%E5%9B%9B%E5%88%99%E8%BF%90%E7%AE%97%E8%A1%A8%E8%BE%BE%E5%BC%8F%E6%B1%82%E5%80%BC%EF%BC%88%E4%B8%AD%E7%BC%80%E8%BD%AC%E5%90%8E%E7%BC%80%E8%A1%A8%E8%BE%BE%E5%BC%8F%EF%BC%89/"/>
      <url>/2023/02/09/ProgramLog/%5BC!C++%5D%20%E5%A4%8D%E6%9D%82%E8%AE%A1%E7%AE%97%E5%99%A8%E2%80%94%E2%80%94%E5%9B%9B%E5%88%99%E8%BF%90%E7%AE%97%E8%A1%A8%E8%BE%BE%E5%BC%8F%E6%B1%82%E5%80%BC%EF%BC%88%E4%B8%AD%E7%BC%80%E8%BD%AC%E5%90%8E%E7%BC%80%E8%A1%A8%E8%BE%BE%E5%BC%8F%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<span id="more"></span><h3 id="文章目录">文章目录</h3><ul><li><a href="#%E4%B8%80%E9%97%AE%E9%A2%98%E8%83%8C%E6%99%AF">一、问题背景</a></li><li><a href="#%E4%BA%8C%E5%8E%9F%E7%90%86%E5%88%86%E6%9E%90">二、原理分析</a><ul><li><a href="#1-%E5%90%8E%E7%BC%80%E8%A1%A8%E8%BE%BE%E5%BC%8F%E8%AE%A1%E7%AE%97%E7%BB%93%E6%9E%9C">1 后缀表达式计算结果</a></li><li><a href="#2-%E4%B8%AD%E7%BC%80%E8%A1%A8%E8%BE%BE%E5%BC%8F%E8%BD%AC%E5%90%8E%E7%BC%80%E8%A1%A8%E8%BE%BE%E5%BC%8F">2 中缀表达式转后缀表达式</a></li></ul></li><li><a href="#%E4%B8%89%E5%87%86%E5%A4%87%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84">三、准备数据结构</a><ul><li><a href="#1-%E6%A0%88">1 栈</a></li><li><a href="#2-%E9%98%9F%E5%88%97">2 队列</a></li></ul></li><li><a href="#%E5%9B%9B%E8%AE%BE%E8%AE%A1%E8%AE%A1%E7%AE%97%E5%99%A8">四、设计计算器</a><ul><li><a href="#1-%E6%8F%90%E5%8F%96%E5%AD%97%E7%AC%A6%E4%B8%B2%E7%9A%84%E6%95%B0%E5%AD%97">1 提取字符串的数字</a></li><li><a href="#2-%E8%BF%9B%E6%A0%88%E5%A4%84%E7%90%86">2 进栈处理</a></li><li><a href="#3-%E5%90%8E%E7%BC%80%E8%AE%A1%E7%AE%97">3 后缀计算</a></li><li><a href="#4-%E8%BE%93%E5%87%BA%E7%BB%93%E6%9E%9C">4 输出结果</a></li></ul></li></ul><h1 id="一-问题背景">一、问题背景</h1><p>【复杂计算器】：使用C/C++编程，从字符串中获取表达式，比如<code>9+(3-1)×3+10÷2</code>，并完成计算。</p><p>在之前，由于笔者才疏学浅，掌握知识甚少，完成某次任务【复杂计算器】时，利用了三个栈，而且还是使用的STL中的栈的实现，极大的增大了内存的开销。<br>于是，这次算是一次补票：利用栈和队列重新实现复杂计算器。</p><p>设想是：</p><ul><li>首先，我们输入中缀表达式的四则运算表达式</li><li>将中缀表达式转换为后缀表达式，并存入队列之中</li><li>将队列中的后缀表达式取出，并计算结果</li></ul><h1 id="二-原理分析">二、原理分析</h1><p>此处参考为程杰作者的《大话数据结构[溢彩加强版]》<br><img src="https://img-blog.csdnimg.cn/d41afe910bf448aba30f929e8d8f3068.jpeg" alt=""></p><h2 id="1-后缀表达式计算结果">1 后缀表达式计算结果</h2><p>为了解释后缀表达式的好处，我们先来看看，计算机如何应用后缀表达式计算出最终的结果 <code>20</code> 的。<br>后缀表达式：<code>9 3 1-3 *+10 2 /+</code></p><p>规则：从左到右遍历表达式的每个数字和符号，遇到是数字就进栈，遇到是符号，就将处于栈顶两个数字出栈，进行运算，运算结果进栈，一直到最终获得结果。</p><ol><li><p>初始化一个空栈。此栈用来对要运算的数字进出使用。</p><p><img src="https://img-blog.csdnimg.cn/9c2eaf2ddc9c4e3e84f6e0bca3941f3b.jpeg#pic_left" alt=""><br>2. 后缀表达式中前三个都是数字，所以 <code>9</code>、<code>3</code>、<code>1</code> 进栈。</p><p><img src="https://img-blog.csdnimg.cn/db11405e8c4b4bb28d4d3a94ea90cb43.jpeg#pic_left" alt=""><br>3. 接下来是 <code>-</code>，所以将栈中的 <code>1</code> 出栈作为减数，<code>3</code> 出栈作为被减数，并运算 <code>3-1</code> 得到 <code>2</code>，再将 <code>2</code> 进栈。</p><p><img src="https://img-blog.csdnimg.cn/a6ca139d3c2647c2b021fe429e995e28.jpeg#pic_left" alt=""><br>4. 接着是数字 <code>3</code> 进栈</p></li></ol><p><img src="https://img-blog.csdnimg.cn/eb693ec55c774b1e89ffe221bc64b01e.jpeg#pic_left" alt=""><br><strong>…</strong><br>以此类推，直到表达式遍历完成，得到结果：</p><p><img src="https://img-blog.csdnimg.cn/d075bc4b7edd4eb6be8197b5952228d5.jpeg#pic_left" alt=""><br>最后出栈：<br><img src="https://img-blog.csdnimg.cn/fd84607d57c1472e8851e50dc7c296f3.jpeg#pic_left" alt=""></p><h2 id="2-中缀表达式转后缀表达式">2 中缀表达式转后缀表达式</h2><p>那么，我们是如何由中缀表达式得到后缀表达式的呢？</p><p>我们把平时所用的标准四则运算表达式，即<code>9+(3-1)×3+10÷2</code>叫做中缀表达式。</p><p>我们现在将中缀表达式转换为后缀表达式。<br>规则：从左到右遍历中缀表达式的每个数字和符号，若是数字就输出，即成为后缀表达式的一部分；若是符号，则判断其与栈顶符号的优先级，是右括号或优先级不高于栈顶符号（乘除优先加减）则栈顶元素依次出栈并输出，并将当前符号进栈，一直到最终得到后缀表达式为止。</p><ol><li>初始化一空栈，用来对符号进出栈使用。</li></ol><p><img src="https://img-blog.csdnimg.cn/26a4747e31414e3ba0580f211f8c9a1a.jpeg#pic_left" alt=""><br>2. 第一个字符是数字 <code>9</code>，输出 <code>9</code>，后面是符号 <code>+</code>，进栈。</p><p><img src="https://img-blog.csdnimg.cn/2c4a3b2359ae4f20bccb3cfc1880447d.jpeg#pic_left" alt=""></p><ol start="3"><li>第三个字符是 <code>(</code>，依然是符号，因其只是左括号，还未配对，故进栈。</li></ol><p><img src="https://img-blog.csdnimg.cn/70f051c04aad48958125ec06ea21b81f.jpeg#pic_left" alt=""></p><ol start="4"><li>第四个字符是数字 <code>3</code>，输出，总表达式为 <code>9 3</code>，接着是 <code>-</code>，进栈。</li></ol><p><img src="https://img-blog.csdnimg.cn/eb881599b36c4a89bb2fe208de851a23.jpeg#pic_left" alt=""><br>5. 接下来是数字 <code>1</code>，输出，总表达式为 <code>9 3 1</code>，后面是符号 <code>）</code> ，此时，我们需要去匹配此前的 <code>(</code> ，所以栈顶依次出栈，并输出，直到 <code>(</code> 出栈为止。此时左括号上方只有 <code>-</code> ，因此输出 <code>-</code> 。总的输出表达式为 <code>9 3 1-</code></p><p><img src="https://img-blog.csdnimg.cn/9bb0fee71efe4340b1ac9bc81cc8fbfb.jpeg#pic_left" alt=""></p><ol start="6"><li>紧接着是符号 <code>×</code>，因为此时的栈顶符号为 <code>+</code>，优先级低于 <code>×</code>，因此不输出， <code>*</code>进栈。接着是数字 <code>3</code>，输出，总的表达式为 <code>9 3 1 – 3</code>。</li></ol><p><img src="https://img-blog.csdnimg.cn/f2eacf3ef2f44ceaad129dd8ded9368d.jpeg#pic_left" alt=""></p><ol start="7"><li>之后是符号 <code>+</code> ，此时当前栈顶元素 <code>*</code> 比这个 <code>+</code> 的优先级高，因此栈中元素出栈并输出 （没有比 <code>+</code> 更低的优先级，所以全部出栈），总输出表达式为 <code>9 3 1-3 * +</code>。然后将当前这个符号 <code>+</code> 进栈。也就是说，前 6 张图的栈底的 <code>+</code> 是指中缀表达式中开头的 <code>9</code> 后面那个 <code>+</code> ，而左图中的栈底 （也是栈顶）的 <code>+</code> 是指 <code>9+ (3-1)×3+</code> 中的最后一个 <code>+</code> 。</li></ol><p><img src="https://img-blog.csdnimg.cn/bc1dd18d6c3b4f3cb24bdd9401ecd2f1.jpeg#pic_left" alt=""><br>8. 紧接着数字 <code>10</code>，输出，总表达式变为 <code>9 3 1-3 *+10</code>。后是符号 <code>÷</code>，所以 <code>/</code>进栈。如右图所示。</p><p><img src="https://img-blog.csdnimg.cn/c212a71ce7a1417e8cb0fb5555c09dd7.jpeg#pic_left" alt=""></p><ol start="9"><li>最后一个数字 <code>2</code>，输出，总的表达式为 <code>9 3 1 – 3 *+10 2</code>。</li></ol><p><img src="https://img-blog.csdnimg.cn/938d1afdec7844879e73e39fab10bd8d.jpeg#pic_left" alt=""></p><ol start="10"><li>因为已经到最后，所以将栈中符号全部出栈并输出。最终输出的后缀表达式结果为 <code>9 3 1 – 3 *+10 2 /+</code>。</li></ol><p><img src="https://img-blog.csdnimg.cn/675568b51e684eebbddbf7d24b2a7568.jpeg#pic_left" alt=""></p><h1 id="三-准备数据结构">三、准备数据结构</h1><p>我们为计算器编写一个栈和队列，这里笔者使用的C++，仅仅只使用了部分C++的类的特性，方便封装和整合，核心代码部分，C语言也可以食用。</p><h2 id="1-栈">1 栈</h2><p>定义两个类型，分别表示数字和符号：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="type">double</span> ElemType;</span><br><span class="line">   <span class="keyword">typedef</span> <span class="type">char</span> OpType;</span><br></pre></td></tr></table></figure><p>我们使用链式结构进行设计我们的结构：<br>先定义好节点，这里我们为每个节点的数据域声明两个类型，再使用<code>is_data</code>进行判断是数字还是符号：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">Node</span> &#123;</span><br><span class="line">        ElemType data = <span class="number">0.0</span>;</span><br><span class="line">        OpType op = <span class="number">0</span>;</span><br><span class="line">        <span class="type">bool</span> is_data = <span class="literal">true</span>;</span><br><span class="line">        Node *next = <span class="literal">nullptr</span>;</span><br><span class="line">    &#125;;</span><br></pre></td></tr></table></figure><p>其他部分和一般链栈无异，仅仅用了一些<a href="https://blog.csdn.net/DreamTrue520/article/details/128823046?spm=1001.2014.3001.5501">C++的构造函数，重载函数</a>，<a href="https://blog.csdn.net/DreamTrue520/article/details/128773321?spm=1001.2014.3001.5501">错误检查</a>等功能，C语言修改多增加不重名函数也可以实现。<br>这里直接上源码：</p><p>LinkStack.h</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// Created by Whisky on 2023/2/9.</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="meta">#<span class="keyword">ifndef</span> DATA_STRUCTURE_LINKSTACK_H</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> DATA_STRUCTURE_LINKSTACK_H</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">LinkStack</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="keyword">typedef</span> <span class="type">double</span> ElemType;</span><br><span class="line">    <span class="keyword">typedef</span> <span class="type">char</span> OpType;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="keyword">struct</span> <span class="title class_">Node</span> &#123;</span><br><span class="line">        ElemType data = <span class="number">0.0</span>;</span><br><span class="line">        OpType op = <span class="number">0</span>;</span><br><span class="line">        <span class="type">bool</span> is_data = <span class="literal">true</span>;</span><br><span class="line">        Node *next = <span class="literal">nullptr</span>;</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">check</span><span class="params">()</span></span>;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">push</span><span class="params">(<span class="type">const</span> ElemType &amp;)</span></span>;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">push</span><span class="params">(<span class="type">const</span> OpType &amp;)</span></span>;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">pop</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">clear</span><span class="params">()</span></span>;</span><br><span class="line">    Node *top = <span class="literal">nullptr</span>;</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">int</span> size = <span class="number">0</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span> <span class="comment">//DATA_STRUCTURE_LINKSTACK_H</span></span></span><br></pre></td></tr></table></figure><p>LinkStack.cpp</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// Created by Whisky on 2023/2/9.</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;LinkStack.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdexcept&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cassert&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">LinkStack::push</span><span class="params">(<span class="type">const</span> LinkStack::ElemType &amp;e)</span> </span>&#123;</span><br><span class="line">    Node *p = <span class="built_in">static_cast</span>&lt;Node *&gt;(<span class="built_in">malloc</span>(<span class="built_in">sizeof</span> (Node)));</span><br><span class="line">    p-&gt;is_data = <span class="literal">true</span>;</span><br><span class="line">    p-&gt;data = e;</span><br><span class="line">    p-&gt;next = top;</span><br><span class="line">    top = p;</span><br><span class="line">    ++size;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">LinkStack::push</span><span class="params">(<span class="type">const</span> LinkStack::OpType &amp;e)</span> </span>&#123;</span><br><span class="line">    Node *p = <span class="built_in">static_cast</span>&lt;Node *&gt;(<span class="built_in">malloc</span>(<span class="built_in">sizeof</span> (Node)));</span><br><span class="line">    p-&gt;is_data = <span class="literal">false</span>;</span><br><span class="line">    p-&gt;op = e;</span><br><span class="line">    p-&gt;next = top;</span><br><span class="line">    top = p;</span><br><span class="line">    ++size;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">LinkStack::pop</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">check</span>();</span><br><span class="line">    Node *p = top;</span><br><span class="line">    top = top-&gt;next;</span><br><span class="line">    <span class="built_in">free</span>(p);</span><br><span class="line">    --size;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">LinkStack::check</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (top == <span class="literal">nullptr</span>)</span><br><span class="line">            <span class="keyword">throw</span> std::<span class="built_in">underflow_error</span>(<span class="string">&quot;the stack is empty&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">catch</span> (std::exception &amp;err)</span><br><span class="line">    &#123;</span><br><span class="line">        std::cerr &lt;&lt; err.<span class="built_in">what</span>() &lt;&lt; <span class="string">&quot;\n&quot;</span>;</span><br><span class="line">        <span class="built_in">assert</span>(<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">LinkStack::clear</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">while</span> (top != <span class="literal">nullptr</span>) &#123;</span><br><span class="line">        Node *p =top;</span><br><span class="line">        top = top-&gt;next;</span><br><span class="line">        <span class="built_in">free</span>(p);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2-队列">2 队列</h2><p>我们的队列的节点的数据域也设计为两种类型：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">Node</span> &#123;</span><br><span class="line">        ElemType data = <span class="number">0</span>;</span><br><span class="line">        OpType op = <span class="number">0</span>;</span><br><span class="line">        <span class="type">bool</span> is_data = <span class="literal">true</span>;</span><br><span class="line">        Node *next = <span class="literal">nullptr</span>;</span><br><span class="line">    &#125;;</span><br></pre></td></tr></table></figure><p>其他与一般链式队列无异。<br>这里也直接上源码：</p><p>LinkQueue.h</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// Created by Whisky on 2023/2/9.</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">ifndef</span> DATA_STRUCTURE_LINKQUEUE_H</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> DATA_STRUCTURE_LINKQUEUE_H</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">LinkQueue</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="keyword">typedef</span> <span class="type">double</span> ElemType;</span><br><span class="line">    <span class="keyword">typedef</span> <span class="type">char</span> OpType;</span><br><span class="line">    <span class="function"><span class="type">unsigned</span> <span class="type">int</span> <span class="title">length</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="built_in">LinkQueue</span>() &#123; front = rear = &amp;node; &#125;;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">push</span><span class="params">(<span class="type">const</span> ElemType &amp;)</span></span>;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">push</span><span class="params">(<span class="type">const</span> OpType &amp;)</span></span>;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">pop</span><span class="params">()</span></span>;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="keyword">struct</span> <span class="title class_">Node</span> &#123;</span><br><span class="line">        ElemType data = <span class="number">0</span>;</span><br><span class="line">        OpType op = <span class="number">0</span>;</span><br><span class="line">        <span class="type">bool</span> is_data = <span class="literal">true</span>;</span><br><span class="line">        Node *next = <span class="literal">nullptr</span>;</span><br><span class="line">    &#125;;</span><br><span class="line">    Node node;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    Node *front = <span class="literal">nullptr</span>;</span><br><span class="line">    Node *rear = <span class="literal">nullptr</span>;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span> <span class="comment">//DATA_STRUCTURE_LINKQUEUE_H</span></span></span><br></pre></td></tr></table></figure><p>LinkQueue.cpp</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// Created by Whisky on 2023/2/9.</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;LinkQueue.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cassert&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">LinkQueue::push</span><span class="params">(<span class="type">const</span> LinkQueue::ElemType &amp;e)</span> </span>&#123;</span><br><span class="line">    Node *p = <span class="built_in">static_cast</span>&lt;Node *&gt;(<span class="built_in">malloc</span>(<span class="built_in">sizeof</span> (Node)));</span><br><span class="line">    <span class="built_in">assert</span>(!(p == <span class="literal">nullptr</span>));<span class="comment">//申请失败</span></span><br><span class="line">    p-&gt;data = e;</span><br><span class="line">    p-&gt;is_data = <span class="literal">true</span>;</span><br><span class="line">    p-&gt;next = <span class="literal">nullptr</span>;</span><br><span class="line">    rear-&gt;next = p;</span><br><span class="line">    rear = p;</span><br><span class="line">    ++node.data;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">LinkQueue::push</span><span class="params">(<span class="type">const</span> LinkQueue::OpType &amp;o)</span> </span>&#123;</span><br><span class="line">    Node *p = <span class="built_in">static_cast</span>&lt;Node *&gt;(<span class="built_in">malloc</span>(<span class="built_in">sizeof</span> (Node)));</span><br><span class="line">    <span class="built_in">assert</span>(!(p == <span class="literal">nullptr</span>));<span class="comment">//申请失败</span></span><br><span class="line">    p-&gt;op = o;</span><br><span class="line">    p-&gt;is_data = <span class="literal">false</span>;</span><br><span class="line">    p-&gt;next = <span class="literal">nullptr</span>;</span><br><span class="line">    rear-&gt;next = p;</span><br><span class="line">    rear = p;</span><br><span class="line">    ++node.data;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">LinkQueue::pop</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">assert</span>(!(front == rear));<span class="comment">//空了</span></span><br><span class="line">    Node *p = front-&gt;next;</span><br><span class="line">    ElemType tmp = p-&gt;data;</span><br><span class="line">    front-&gt;next = p-&gt;next;</span><br><span class="line">    <span class="keyword">if</span> (rear == p)</span><br><span class="line">        rear = front;</span><br><span class="line">    <span class="built_in">free</span>(p);</span><br><span class="line">    --node.data;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">unsigned</span> <span class="type">int</span> <span class="title">LinkQueue::length</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> node.data;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="四-设计计算器">四、设计计算器</h1><p>完成了这基本数据结构的搭建，我们也可以开始设计计算器了。</p><p>我们首先定义大致结构，后续功能根据实际编程添加：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Calculator</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">Calculator</span>(std::istream &amp;);</span><br><span class="line">    <span class="built_in">Calculator</span>() = <span class="keyword">default</span>;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">input</span><span class="params">(std::istream &amp;)</span></span>;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">print</span><span class="params">()</span></span>;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    LinkStack cal_stack;</span><br><span class="line">    LinkQueue cal_queue;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>计算器利用<code>input</code>成员函数得到表达式，并使用<code>print</code>成员函数输出结果。<br>为了方便使用我们类的程序员使用，我们添加了重载构造函数，用来直接<code>input</code>。而且<code>input</code>的参数为<code>std::istream &amp;</code>基本IO类，这让用户可以选择多种输入方式（文件、命令框、string字符串流等等）。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Calculator::<span class="built_in">Calculator</span>(std::istream &amp;is) &#123;</span><br><span class="line">    <span class="built_in">input</span>(is);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="1-提取字符串的数字">1 提取字符串的数字</h2><p>从IO获取一行数据并存入字符串：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">std::string line;</span><br><span class="line">   <span class="built_in">getline</span>(is, line);</span><br></pre></td></tr></table></figure><p>我们通过遍历字符串，对每个字符进行判断，连续数字就进行移位加合，遇到小数点就利用向右移位加合（这里的移位都是针对10进制的），遇到我们需要的字符就进行处理：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">auto</span> it = line.<span class="built_in">begin</span>(); it != line.<span class="built_in">end</span>() &amp;&amp; running; ++it)</span><br><span class="line">&#123;</span><br><span class="line">      <span class="type">double</span> sum = <span class="number">0.0</span>;</span><br><span class="line">       <span class="type">bool</span> float_flag = <span class="literal">false</span>;</span><br><span class="line">       <span class="type">float</span> sum2 = <span class="number">0.0</span>;</span><br><span class="line">       <span class="type">double</span> power = <span class="number">0.1</span>;</span><br><span class="line">       <span class="keyword">while</span> (<span class="built_in">isdigit</span>(*it) || (*it == <span class="string">&#x27;.&#x27;</span>))</span><br><span class="line">       &#123;</span><br><span class="line">           <span class="keyword">if</span> (<span class="built_in">isdigit</span>(*it)) &#123;</span><br><span class="line">               <span class="keyword">if</span> (float_flag) &#123;</span><br><span class="line">                   sum2 += power * ((*it) - <span class="string">&#x27;0&#x27;</span>);</span><br><span class="line">                   power *= <span class="number">0.1</span>;</span><br><span class="line">               &#125;</span><br><span class="line">               <span class="keyword">else</span> sum = sum * <span class="number">10</span> + (*it) - <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">           &#125;</span><br><span class="line">           <span class="keyword">else</span> &#123;</span><br><span class="line">               float_flag = <span class="literal">true</span>;</span><br><span class="line">           &#125;</span><br><span class="line">           is_dight = <span class="literal">true</span>;</span><br><span class="line">           ++it;</span><br><span class="line">           <span class="keyword">if</span>  (it == line.<span class="built_in">end</span>())</span><br><span class="line">               running = <span class="literal">false</span>;</span><br><span class="line">       &#125;</span><br><span class="line">       sum += sum2;<span class="comment">//整数加小数部分</span></span><br><span class="line">       <span class="keyword">if</span> (is_dight)</span><br><span class="line">       &#123;</span><br><span class="line">           <span class="comment">//sum为数字，等待处理</span></span><br><span class="line">           is_dight = <span class="literal">false</span>;</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="keyword">if</span> (*it == <span class="string">&#x27;+&#x27;</span>|| *it == <span class="string">&#x27;-&#x27;</span>|| *it == <span class="string">&#x27;*&#x27;</span>||</span><br><span class="line">           *it == <span class="string">&#x27;/&#x27;</span>|| *it == <span class="string">&#x27;(&#x27;</span>|| *it == <span class="string">&#x27;)&#x27;</span>)</span><br><span class="line">       &#123;</span><br><span class="line">          <span class="comment">//*it为操作符，等待处理</span></span><br><span class="line">       &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2-进栈处理">2 进栈处理</h2><blockquote><p>规则：从左到右遍历中缀表达式的每个数字和符号，若是数字就输出，即成为后缀表达式的一部分；若是符号，则判断其与栈顶符号的优先级，是右括号或优先级不高于栈顶符号（乘除优先加减）则栈顶元素依次出栈并输出，并将当前符号进栈，一直到最终得到后缀表达式为止。</p></blockquote><p>按照之前原理中的方法，我们把得到的数和符号利用栈的特性处理，把结果放进队列。</p><p>判断优先级：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> PRI_HIGH 2</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> PRI_LOW 1</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">priority</span><span class="params">(<span class="type">char</span> ch)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (ch == <span class="string">&#x27;*&#x27;</span> || ch == <span class="string">&#x27;/&#x27;</span>)</span><br><span class="line">        <span class="keyword">return</span> PRI_HIGH;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="keyword">return</span> PRI_LOW;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>进栈处理并输出到队列：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">Calculator::input</span><span class="params">(std::istream &amp;is)</span> </span>&#123;</span><br><span class="line">    std::string line;</span><br><span class="line">    <span class="built_in">getline</span>(is, line);</span><br><span class="line">    <span class="type">bool</span> is_dight = <span class="literal">false</span>;</span><br><span class="line">    <span class="type">bool</span> running = <span class="literal">true</span>;</span><br><span class="line">    <span class="type">bool</span> begin_flag = <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">auto</span> it = line.<span class="built_in">begin</span>(); it != line.<span class="built_in">end</span>() &amp;&amp; running; ++it)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">double</span> sum = <span class="number">0.0</span>;</span><br><span class="line">        <span class="type">bool</span> float_flag = <span class="literal">false</span>;</span><br><span class="line">        <span class="type">float</span> sum2 = <span class="number">0.0</span>;</span><br><span class="line">        <span class="type">double</span> power = <span class="number">0.1</span>;</span><br><span class="line">        <span class="keyword">while</span> (<span class="built_in">isdigit</span>(*it) || (*it == <span class="string">&#x27;.&#x27;</span>))</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="built_in">isdigit</span>(*it)) &#123;</span><br><span class="line">                <span class="keyword">if</span> (float_flag) &#123;</span><br><span class="line">                    sum2 += power * ((*it) - <span class="string">&#x27;0&#x27;</span>);</span><br><span class="line">                    power *= <span class="number">0.1</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span> sum = sum * <span class="number">10</span> + (*it) - <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> &#123;</span><br><span class="line">                float_flag = <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            is_dight = <span class="literal">true</span>;</span><br><span class="line">            ++it;</span><br><span class="line">            <span class="keyword">if</span>  (it == line.<span class="built_in">end</span>())</span><br><span class="line">                running = <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        sum += sum2;<span class="comment">//整数加小数部分</span></span><br><span class="line">        <span class="keyword">if</span> (is_dight)</span><br><span class="line">        &#123;</span><br><span class="line">            cal_queue.<span class="built_in">push</span>(sum);<span class="comment">//数字直接输出进队列</span></span><br><span class="line">            is_dight = <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (*it == <span class="string">&#x27;+&#x27;</span>|| *it == <span class="string">&#x27;-&#x27;</span>|| *it == <span class="string">&#x27;*&#x27;</span>||</span><br><span class="line">            *it == <span class="string">&#x27;/&#x27;</span>|| *it == <span class="string">&#x27;(&#x27;</span>|| *it == <span class="string">&#x27;)&#x27;</span>)<span class="comment">//符号借用栈的特性解决</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (cal_stack.top == <span class="literal">nullptr</span> || begin_flag)</span><br><span class="line">            &#123;</span><br><span class="line">                begin_flag = <span class="literal">false</span>;</span><br><span class="line">                cal_stack.<span class="built_in">push</span>(*it);<span class="comment">//第一个直接放入栈</span></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span> (*it == <span class="string">&#x27;)&#x27;</span> || *it == <span class="string">&#x27;(&#x27;</span>)</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">if</span> (*it == <span class="string">&#x27;(&#x27;</span>)</span><br><span class="line">                        begin_flag = <span class="literal">true</span>;<span class="comment">//左括号之后的符号直接放入栈，避免与左括号比较</span></span><br><span class="line">                    cal_stack.<span class="built_in">push</span>(*it);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span> (<span class="built_in">priority</span>(*it) &gt; <span class="built_in">priority</span>(cal_stack.top-&gt;op))<span class="comment">//符号优先级高于栈顶符号</span></span><br><span class="line">                    cal_stack.<span class="built_in">push</span>(*it);</span><br><span class="line">                <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="comment">//判断符号与栈顶符号的优先级，优先级不高于栈顶符号（乘除优先加减）则栈顶元素依次出栈并输出（以括号为一个层级），并将当前符号进栈</span></span><br><span class="line">                    <span class="keyword">while</span> (cal_stack.top != <span class="literal">nullptr</span>)</span><br><span class="line">                    &#123;</span><br><span class="line">                    <span class="keyword">if</span> (cal_stack.top-&gt;op == <span class="string">&#x27;(&#x27;</span>)</span><br><span class="line">                            <span class="keyword">break</span>;</span><br><span class="line">                        cal_queue.<span class="built_in">push</span>(cal_stack.top-&gt;op);</span><br><span class="line">                        cal_stack.<span class="built_in">pop</span>();</span><br><span class="line">                    &#125;</span><br><span class="line">                    cal_stack.<span class="built_in">push</span>(*it);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (*it == <span class="string">&#x27;)&#x27;</span>)</span><br><span class="line">            &#123;</span><br><span class="line">            <span class="comment">//遇到右括号，去匹配左括号，同时把栈里面的符号都输出</span></span><br><span class="line">                <span class="keyword">while</span> (<span class="literal">true</span>)</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="type">char</span> tmp = cal_stack.top-&gt;op;</span><br><span class="line">                    <span class="keyword">if</span> (tmp != <span class="string">&#x27;(&#x27;</span> &amp;&amp; tmp != <span class="string">&#x27;)&#x27;</span>)</span><br><span class="line">                        cal_queue.<span class="built_in">push</span>(tmp);</span><br><span class="line">                    cal_stack.<span class="built_in">pop</span>();</span><br><span class="line">                    <span class="keyword">if</span> (tmp == <span class="string">&#x27;(&#x27;</span>)</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//剩下的依次出栈</span></span><br><span class="line">    <span class="keyword">while</span> (cal_stack.size)&#123;</span><br><span class="line">        cal_queue.<span class="built_in">push</span>(cal_stack.top-&gt;op);</span><br><span class="line">        cal_stack.<span class="built_in">pop</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="3-后缀计算">3 后缀计算</h2><blockquote><p>规则：从左到右遍历表达式的每个数字和符号，遇到是数字就进栈，遇到是符号，就将处于栈顶两个数字出栈，进行运算，运算结果进栈，一直到最终获得结果。</p></blockquote><p>用于计算的函数（这里没有处理除数为0的情况，大家可以自行补充）：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">double</span> <span class="title">cal_operator</span><span class="params">(<span class="type">double</span> a, <span class="type">char</span> c, <span class="type">double</span> b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">switch</span> (c) &#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&#x27;+&#x27;</span>:</span><br><span class="line">            <span class="keyword">return</span> a + b;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&#x27;-&#x27;</span>:</span><br><span class="line">            <span class="keyword">return</span> a - b;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&#x27;*&#x27;</span>:</span><br><span class="line">            <span class="keyword">return</span> a * b;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&#x27;/&#x27;</span>:</span><br><span class="line">            <span class="keyword">return</span> a / b;</span><br><span class="line">        <span class="keyword">default</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>后缀计算则非常简单了，遇到数字进栈，遇到符号就运算（注意谁减谁或者谁除谁）：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">Calculator::cal</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">while</span> (cal_queue.<span class="built_in">length</span>() != <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (cal_queue.front-&gt;next-&gt;is_data)<span class="comment">//数字进栈</span></span><br><span class="line">        &#123;</span><br><span class="line">            cal_stack.<span class="built_in">push</span>(cal_queue.front-&gt;next-&gt;data);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;<span class="comment">//符号运算</span></span><br><span class="line">            <span class="type">char</span> &amp;op = cal_queue.front-&gt;next-&gt;op;</span><br><span class="line">            <span class="type">double</span> tmp1, tmp2;</span><br><span class="line">            tmp1 = cal_stack.top-&gt;data;cal_stack.<span class="built_in">pop</span>();</span><br><span class="line">            tmp2 = cal_stack.top-&gt;data;cal_stack.<span class="built_in">pop</span>();</span><br><span class="line">            tmp2 =  <span class="built_in">cal_operator</span>(tmp2, op, tmp1);</span><br><span class="line">            cal_stack.<span class="built_in">push</span>(tmp2);<span class="comment">//运算完再进栈</span></span><br><span class="line">        &#125;</span><br><span class="line">        cal_queue.<span class="built_in">pop</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="4-输出结果">4 输出结果</h2><p>输出结果就是出栈就行了：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">Calculator::print_stack</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">while</span> (cal_stack.top)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (cal_stack.top-&gt;is_data)</span><br><span class="line">            std::cout &lt;&lt; cal_stack.top-&gt;data &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            std::cout &lt;&lt; cal_stack.top-&gt;op &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">        cal_stack.<span class="built_in">pop</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    std::cout &lt;&lt; std::endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>虽然其实写一个<code>cal_stack.top-&gt;data</code>就行（因为最后栈里只有一个元素）。这些是笔者用于测试时，用于输出整个栈的代码。</p><p>结尾附上完整代码：</p><p>Calculator.h</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// Created by Whisky on 2023/2/9.</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">ifndef</span> DATA_STRUCTURE_CALCULATOR_H</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> DATA_STRUCTURE_CALCULATOR_H</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;LinkStack.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;LinkQueue.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Calculator</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">Calculator</span>(std::istream &amp;);</span><br><span class="line">    <span class="built_in">Calculator</span>() = <span class="keyword">default</span>;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">input</span><span class="params">(std::istream &amp;)</span></span>;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">print</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">print_queue</span><span class="params">()</span></span>;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">cal</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">print_stack</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> PRI_HIGH 2</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> PRI_LOW 1</span></span><br><span class="line">    LinkStack cal_stack;</span><br><span class="line">    LinkQueue cal_queue;</span><br><span class="line">    <span class="function"><span class="keyword">friend</span> <span class="type">int</span> <span class="title">priority</span><span class="params">(<span class="type">char</span>)</span></span>;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">priority</span><span class="params">(<span class="type">char</span> ch)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span> <span class="comment">//DATA_STRUCTURE_CALCULATOR_H</span></span></span><br></pre></td></tr></table></figure><p>Calculator.cpp</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// Created by Whisky on 2023/2/9.</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;Calculator.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">priority</span><span class="params">(<span class="type">char</span> ch)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (ch == <span class="string">&#x27;*&#x27;</span> || ch == <span class="string">&#x27;/&#x27;</span>)</span><br><span class="line">        <span class="keyword">return</span> PRI_HIGH;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="keyword">return</span> PRI_LOW;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">double</span> <span class="title">cal_operator</span><span class="params">(<span class="type">double</span> a, <span class="type">char</span> c, <span class="type">double</span> b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">switch</span> (c) &#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&#x27;+&#x27;</span>:</span><br><span class="line">            <span class="keyword">return</span> a + b;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&#x27;-&#x27;</span>:</span><br><span class="line">            <span class="keyword">return</span> a - b;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&#x27;*&#x27;</span>:</span><br><span class="line">            <span class="keyword">return</span> a * b;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&#x27;/&#x27;</span>:</span><br><span class="line">            <span class="keyword">return</span> a / b;</span><br><span class="line">        <span class="keyword">default</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Calculator::cal</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">while</span> (cal_queue.<span class="built_in">length</span>() != <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (cal_queue.front-&gt;next-&gt;is_data)</span><br><span class="line">        &#123;</span><br><span class="line">            cal_stack.<span class="built_in">push</span>(cal_queue.front-&gt;next-&gt;data);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="type">char</span> &amp;op = cal_queue.front-&gt;next-&gt;op;</span><br><span class="line">            <span class="type">double</span> tmp1, tmp2;</span><br><span class="line">            tmp1 = cal_stack.top-&gt;data;cal_stack.<span class="built_in">pop</span>();</span><br><span class="line">            tmp2 = cal_stack.top-&gt;data;cal_stack.<span class="built_in">pop</span>();</span><br><span class="line">            tmp2 =  <span class="built_in">cal_operator</span>(tmp2, op, tmp1);</span><br><span class="line">            cal_stack.<span class="built_in">push</span>(tmp2);</span><br><span class="line">        &#125;</span><br><span class="line">        cal_queue.<span class="built_in">pop</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Calculator::print_queue</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">while</span> (cal_queue.front-&gt;next != <span class="literal">nullptr</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (cal_queue.front-&gt;next-&gt;is_data)</span><br><span class="line">            std::cout &lt;&lt; cal_queue.front-&gt;next-&gt;data &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            std::cout &lt;&lt; cal_queue.front-&gt;next-&gt;op &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">        cal_queue.<span class="built_in">pop</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    std::cout &lt;&lt; std::endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Calculator::print_stack</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">while</span> (cal_stack.top)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (cal_stack.top-&gt;is_data)</span><br><span class="line">            std::cout &lt;&lt; cal_stack.top-&gt;data &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            std::cout &lt;&lt; cal_stack.top-&gt;op &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">        cal_stack.<span class="built_in">pop</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    std::cout &lt;&lt; std::endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Calculator::input</span><span class="params">(std::istream &amp;is)</span> </span>&#123;</span><br><span class="line">    std::string line;</span><br><span class="line">    <span class="built_in">getline</span>(is, line);</span><br><span class="line">    <span class="type">bool</span> is_dight = <span class="literal">false</span>;</span><br><span class="line">    <span class="type">bool</span> running = <span class="literal">true</span>;</span><br><span class="line">    <span class="type">bool</span> begin_flag = <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">auto</span> it = line.<span class="built_in">begin</span>(); it != line.<span class="built_in">end</span>() &amp;&amp; running; ++it)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">double</span> sum = <span class="number">0.0</span>;</span><br><span class="line">        <span class="type">bool</span> float_flag = <span class="literal">false</span>;</span><br><span class="line">        <span class="type">float</span> sum2 = <span class="number">0.0</span>;</span><br><span class="line">        <span class="type">double</span> power = <span class="number">0.1</span>;</span><br><span class="line">        <span class="keyword">while</span> (<span class="built_in">isdigit</span>(*it) || (*it == <span class="string">&#x27;.&#x27;</span>))</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="built_in">isdigit</span>(*it)) &#123;</span><br><span class="line">                <span class="keyword">if</span> (float_flag) &#123;</span><br><span class="line">                    sum2 += power * ((*it) - <span class="string">&#x27;0&#x27;</span>);</span><br><span class="line">                    power *= <span class="number">0.1</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span> sum = sum * <span class="number">10</span> + (*it) - <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> &#123;</span><br><span class="line">                float_flag = <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            is_dight = <span class="literal">true</span>;</span><br><span class="line">            ++it;</span><br><span class="line">            <span class="keyword">if</span>  (it == line.<span class="built_in">end</span>())</span><br><span class="line">                running = <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        sum += sum2;</span><br><span class="line">        <span class="keyword">if</span> (is_dight)</span><br><span class="line">        &#123;</span><br><span class="line">            cal_queue.<span class="built_in">push</span>(sum);</span><br><span class="line">            is_dight = <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (*it == <span class="string">&#x27;+&#x27;</span>|| *it == <span class="string">&#x27;-&#x27;</span>|| *it == <span class="string">&#x27;*&#x27;</span>||</span><br><span class="line">            *it == <span class="string">&#x27;/&#x27;</span>|| *it == <span class="string">&#x27;(&#x27;</span>|| *it == <span class="string">&#x27;)&#x27;</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (cal_stack.top == <span class="literal">nullptr</span> || begin_flag)</span><br><span class="line">            &#123;</span><br><span class="line">                begin_flag = <span class="literal">false</span>;</span><br><span class="line">                cal_stack.<span class="built_in">push</span>(*it);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span> (*it == <span class="string">&#x27;)&#x27;</span> || *it == <span class="string">&#x27;(&#x27;</span>)</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">if</span> (*it == <span class="string">&#x27;(&#x27;</span>)</span><br><span class="line">                        begin_flag = <span class="literal">true</span>;</span><br><span class="line">                    cal_stack.<span class="built_in">push</span>(*it);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span> (<span class="built_in">priority</span>(*it) &gt; <span class="built_in">priority</span>(cal_stack.top-&gt;op))</span><br><span class="line">                    cal_stack.<span class="built_in">push</span>(*it);</span><br><span class="line">                <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="keyword">while</span> (cal_stack.top != <span class="literal">nullptr</span>)</span><br><span class="line">                    &#123;</span><br><span class="line">                        <span class="keyword">if</span> (cal_stack.top-&gt;op == <span class="string">&#x27;(&#x27;</span>)</span><br><span class="line">                            <span class="keyword">break</span>;</span><br><span class="line">                        cal_queue.<span class="built_in">push</span>(cal_stack.top-&gt;op);</span><br><span class="line">                        cal_stack.<span class="built_in">pop</span>();</span><br><span class="line">                    &#125;</span><br><span class="line">                    cal_stack.<span class="built_in">push</span>(*it);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (*it == <span class="string">&#x27;)&#x27;</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">while</span> (<span class="literal">true</span>)</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="type">char</span> tmp = cal_stack.top-&gt;op;</span><br><span class="line">                    <span class="keyword">if</span> (tmp != <span class="string">&#x27;(&#x27;</span> &amp;&amp; tmp != <span class="string">&#x27;)&#x27;</span>)</span><br><span class="line">                        cal_queue.<span class="built_in">push</span>(tmp);</span><br><span class="line">                    cal_stack.<span class="built_in">pop</span>();</span><br><span class="line">                    <span class="keyword">if</span> (tmp == <span class="string">&#x27;(&#x27;</span>)</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> (cal_stack.size)&#123;</span><br><span class="line">        cal_queue.<span class="built_in">push</span>(cal_stack.top-&gt;op);</span><br><span class="line">        cal_stack.<span class="built_in">pop</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Calculator::print</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">cal</span>();</span><br><span class="line">    <span class="built_in">print_stack</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Calculator::<span class="built_in">Calculator</span>(std::istream &amp;is) &#123;</span><br><span class="line">    <span class="built_in">input</span>(is);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>.</p>]]></content>
      
      
      <categories>
          
          <category> 记录一次编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> c++ </tag>
            
            <tag> 算法 </tag>
            
            <tag> 数据结构 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>IO库——跟我一起从C到C++(第九期)</title>
      <link href="/2023/02/07/C++/IO%E5%BA%93%E2%80%94%E2%80%94%E8%B7%9F%E6%88%91%E4%B8%80%E8%B5%B7%E4%BB%8EC%E5%88%B0C++(%E7%AC%AC%E4%B9%9D%E6%9C%9F)/"/>
      <url>/2023/02/07/C++/IO%E5%BA%93%E2%80%94%E2%80%94%E8%B7%9F%E6%88%91%E4%B8%80%E8%B5%B7%E4%BB%8EC%E5%88%B0C++(%E7%AC%AC%E4%B9%9D%E6%9C%9F)/</url>
      
        <content type="html"><![CDATA[<span id="more"></span><h3 id="文章目录">文章目录</h3><ul><li><a href="#9-io%E5%BA%93">9 IO库</a><ul><li><a href="#91-io%E7%B1%BB">9.1 IO类</a><ul><li><a href="#911-io%E7%B1%BB%E5%9E%8B%E4%B9%8B%E9%97%B4%E7%9A%84%E5%85%B3%E7%B3%BB">9.1.1 IO类型之间的关系</a></li><li><a href="#912-io%E5%AF%B9%E8%B1%A1%E6%97%A0%E6%8B%B7%E8%B4%9D%E5%92%8C%E8%B5%8B%E5%80%BC">9.1.2 IO对象无拷贝和赋值</a></li><li><a href="#913-%E6%9D%A1%E4%BB%B6%E7%8A%B6%E6%80%81">9.1.3 条件状态</a><ul><li><a href="#9131-%E6%9F%A5%E8%AF%A2%E6%B5%81%E7%9A%84%E7%8A%B6%E6%80%81">9.1.3.1 查询流的状态</a></li><li><a href="#9132-%E7%AE%A1%E7%90%86%E6%9D%A1%E4%BB%B6%E7%8A%B6%E6%80%81">9.1.3.2 管理条件状态</a></li></ul></li><li><a href="#914-%E7%AE%A1%E7%90%86%E8%BE%93%E5%87%BA%E7%BC%93%E5%86%B2">9.1.4 管理输出缓冲</a><ul><li><a href="#9141-%E5%88%B7%E6%96%B0%E8%BE%93%E5%87%BA%E7%BC%93%E5%86%B2%E5%8C%BA">9.1.4.1 刷新输出缓冲区</a></li><li><a href="#9142-unitbuf-%E6%93%8D%E4%BD%9C%E7%AC%A6">9.1.4.2 unitbuf 操作符</a></li><li><a href="#9143-%E5%85%B3%E8%81%94%E8%BE%93%E5%85%A5%E5%92%8C%E8%BE%93%E5%87%BA%E6%B5%81">9.1.4.3 关联输入和输出流</a></li></ul></li></ul></li><li><a href="#92-%E6%96%87%E4%BB%B6%E8%BE%93%E5%85%A5%E8%BE%93%E5%87%BA">9.2 文件输入输出</a><ul><li><a href="#921-%E6%89%93%E5%BC%80%E6%96%87%E4%BB%B6">9.2.1 打开文件</a><ul><li><a href="#9211-%E6%89%93%E5%BC%80%E6%96%87%E4%BB%B6%E7%9A%84%E6%96%B9%E6%B3%95">9.2.1.1 打开文件的方法</a></li><li><a href="#9212-%E6%96%87%E4%BB%B6%E6%A8%A1%E5%BC%8F">9.2.1.2 文件模式</a></li><li><a href="#9213-%E5%88%A4%E6%96%AD%E6%89%93%E5%BC%80%E6%98%AF%E5%90%A6%E6%88%90%E5%8A%9F">9.2.1.3 判断打开是否成功</a></li></ul></li><li><a href="#922-%E8%BE%93%E5%85%A5%E8%BE%93%E5%87%BA">9.2.2 输入输出</a><ul><li><a href="#9221-%E8%AF%BB%E5%8F%96%E5%86%85%E5%AE%B9">9.2.2.1 读取内容</a></li><li><a href="#9222-%E8%BE%93%E5%87%BA%E6%96%87%E4%BB%B6">9.2.2.2 输出文件</a></li></ul></li><li><a href="#923-%E5%85%B3%E9%97%AD%E6%96%87%E4%BB%B6">9.2.3 关闭文件</a></li></ul></li><li><a href="#93-string%E6%B5%81">9.3 string流</a><ul><li><a href="#931-%E4%BD%BF%E7%94%A8istringstream">9.3.1 使用istringstream</a></li><li><a href="#932-%E4%BD%BF%E7%94%A8ostringstream">9.3.2 使用ostringstream</a></li></ul></li></ul></li></ul><h1 id="9-io库">9 IO库</h1><p>不知不觉，我们的《跟我一起从C到C++》系列已经越过了第一个阶段了，接下来，笔者也将向大家接受一些C++标准库的故事了。（接下来的故事，笔者也要开始自学了，但为了保证该内容的严谨和真实，笔者也会在其中掺杂一部分的超链接，帮助大家定位到资料原文）</p><p>其实，我们之前就已经接触了IO库的一些设施了，比方说，<code>istream</code>（输入流）、<code>ostream</code>（输出流）、<code>cin</code>（一个istream对象）、<code>cout</code>（一个ostream对象）、<code>clog</code>（一个ostream对象）、<code>cerr</code>（一个ostream对象）、<code>&gt;&gt;</code>（从一个istream对象读取数据）、<code>&lt;&lt;</code>（从一个ostream对象写入数据）、<code>getline</code>函数（从一个给定的istream对象读取一行数据，存入一个给定的string对象中）等等。</p><h2 id="9-1-io类">9.1 IO类</h2><h3 id="9-1-1-io类型之间的关系">9.1.1 IO类型之间的关系</h3><p>每每当我们写一个C++程序，都会下意识写出：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br></pre></td></tr></table></figure><p><code>&lt;iostream&gt;</code>让我们更好的与黑框框（我们程序运行时的控制台窗口）打交道。<br>但其实，为了支持不同种类的IO处理操作，除了<code>&lt;iostream&gt;</code>外，C++还有很多别的头文件：</p><ul><li><code>&lt;iostream&gt;</code> 读写流基本类型的头文件</li><li><code>&lt;fstream&gt;</code> 读写命名文件的类型的头文件</li><li><code>&lt;sstream&gt;</code> 读写内存string对象的类型的头文件（通俗讲就是保存个string，但是能像处理IO一样处理它）</li></ul><table><thead><tr><th>头文件</th><th>读类型</th><th>写类型</th><th>读写类型</th></tr></thead><tbody><tr><td><code>&lt;iostream&gt;</code></td><td><code>istream</code></td><td><code>ostream</code></td><td><code>iostream</code></td></tr><tr><td><code>&lt;fstream&gt;</code></td><td><code>ifstream</code></td><td><code>ofstream</code></td><td><code>fstream</code></td></tr><tr><td><code>&lt;sstream&gt;</code></td><td><code>istringstream</code></td><td><code>ostringstream</code></td><td><code>stringstream</code></td></tr></tbody></table><p>此外，应用程序还可能需要读写宽字符支持的语言。（可以参考：<a href="https://blog.csdn.net/sunweiliang/article/details/109206603">彻底弄懂UTF-8、Unicode、宽字符、locale</a>）<br>为了支持宽字符的语言，标准库定义了一组类型和对象来操纵<code>wchar_t</code>类型的数据。宽字符版本的类型和函数名字以一个<code>w</code>开始。比如，<code>cin</code>、<code>cout</code>和<code>cerr</code>变成了<code>wcin</code>、<code>wcout</code>、<code>wcerr</code>的宽字符版对象。当然，使用它们时也要使用对应的<code>w</code>版本的类型时，比如<code>fstream</code>就得换成<code>wfstream</code>。</p><p>我们可以用<code>&gt;&gt;</code>读取数据，无论是从控制台还是磁盘文件，还是string。因为类型<code>ifstream</code>和<code>istringstream</code>都是继承于<code>istream</code>。（继承机制笔者将会在之后的章节介绍，简单来说，继承机制就能使我们可以声明一个特定的类继承另一个类，从而得到它的部分功能和部分成员），同样的，类型<code>ofstream</code>和<code>ostringstream</code>都是继承于<code>ostream</code>。（宽字符版本也是同理）</p><h3 id="9-1-2-io对象无拷贝和赋值">9.1.2 IO对象无拷贝和赋值</h3><p>和<code>iostream</code>一样，我们同样使用std空间：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> std::ofstream;</span><br></pre></td></tr></table></figure><p>我们不能拷贝或对IO对象赋值：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">ofstream out1, out2;</span><br><span class="line">   out1 = out2;<span class="comment">//报错，不能对流对象赋值</span></span><br><span class="line">   <span class="function">ofstream <span class="title">print</span><span class="params">(ofstream)</span></span>;<span class="comment">//错误，不能初始化ofstream参数</span></span><br><span class="line">   out2 = <span class="built_in">print</span>(out2);<span class="comment">//报错，不能拷贝流对象</span></span><br></pre></td></tr></table></figure><p>由于不能拷贝IO对象，我们不能把形参或者返回类型设置为流类型。<br>进行IO操作的函数往往使用引用方式传递和返回流。<br>读写IO对象都会改变其状态，因此流的传递和返回的引用都不能为const。</p><h3 id="9-1-3-条件状态">9.1.3 条件状态</h3><h4 id="9-1-3-1-查询流的状态">9.1.3.1 查询流的状态</h4><p>IO操作可能发生错误。<br>举一个例子：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> ival;</span><br><span class="line">   cin &gt;&gt; ival;</span><br></pre></td></tr></table></figure><p>我们键入一个字符类型，而不是<code>int</code>类型时，<code>cin</code>就进入了错误状态。一个流一旦进入错误状态，其他后续的IO操作就会失败。<br>确定一个流对象状态的最简单方法是将它当作一个条件使用。如：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ifstream ifs;</span><br><span class="line"><span class="keyword">if</span>(ifs &gt;&gt; tmp)</span><br></pre></td></tr></table></figure><p>将流作为条件使用只能告诉我们流是否有效，而无法告诉我们具体发生了什么。<br>IO类所定义了一些函数和标志，可以帮助我们访问和操纵流的条件状态：</p><table><thead><tr><th>位</th><th>说明</th></tr></thead><tbody><tr><td><code>strm::iostate</code></td><td><code>strm</code>是一种IO类型。<code>iostate</code>是一种机器相关的类型，提供了表达条件状态的完整功能</td></tr><tr><td><code>strm::badbit</code></td><td>指出流已经崩溃，往往是系统级错误，不可恢复</td></tr><tr><td><code>strm::failbit</code></td><td>指出一个IO流失败了，往往是可恢复错误，如读取的类型错误等</td></tr><tr><td><code>strm::eofbit</code></td><td>指出流到达了文件结束</td></tr><tr><td><code>strm::goodbit</code></td><td>流未处于错误状态</td></tr></tbody></table><p>具体发生了什么错误则需要检查上面提到的<code>iostate</code>类型的位，可以用如下函数进行检查：</p><table><thead><tr><th>函数</th><th>说明</th></tr></thead><tbody><tr><td><code>s.eof()</code></td><td>若流<code>s</code>的eofbit置位，则返回<code>true</code></td></tr><tr><td><code>s.fail()</code></td><td>若流<code>s</code>的failbit置位，则返回<code>true</code></td></tr><tr><td><code>s.bad()</code></td><td>若流<code>s</code>的badbit置位，则返回<code>true</code></td></tr><tr><td><code>s.good()</code></td><td>若流<code>s</code>处于有效状态，则返回<code>true</code></td></tr></tbody></table><ul><li>badbit被置位时，fail也会返回<code>true</code>（也就是说good或fail是确定流整体状态的方法）</li><li><code>s.good()</code>是成功返回true，其他是失败返回<code>true</code></li></ul><p>badbit表示系统级错误，如不可恢复的读写错误。通常状态下badbit一旦置位，流就无法再使用了。<br>在发生可恢复错误后，failbit置位，如期望读取数据却读出一个字符等错误。（这种问题可以修正，流还可以继续使用）<br>如果达到文件结束位置，eofbit和failbit都会被置位。<br>goodbit等于<code>0</code>，则表示流未发生错误。（goodbit不等于操作<code>s.good()</code>）<br>如果badbit、failbit和eofbit任一一个被置位，则检测流状态的条件都会失败。</p><h4 id="9-1-3-2-管理条件状态">9.1.3.2 管理条件状态</h4><p>另外，可以用如下方法管理条件状态：</p><table><thead><tr><th>函数</th><th>说明</th></tr></thead><tbody><tr><td><code>s.clear()</code></td><td>将<code>s</code>中的所有条件状态复位，将流的状态设置未有效，返回<code>void</code></td></tr><tr><td><code>s.clear(flags)</code></td><td>复位flags</td></tr><tr><td><code>s.setstate(flags)</code></td><td>置位flags</td></tr><tr><td><code>s.rdstate()</code></td><td>返回流<code>s</code>的当前条件状态，返回类型为<code>iostate</code></td></tr><tr><td><code>s.sync()</code></td><td>让流与其对应的数据源同步，这样流就可以丢弃掉之前没有处理的数据。</td></tr></tbody></table><p>流对象的<code>rdstate</code>成员函数返回一个<code>iostate</code>，对应流的当前状态。<br>而成员<code>setstate</code>操作为给定条件置位，表示发生了对应错误。<br><code>clear</code>成员是一个重载的成员，为给定条件对流的对应条件标志位复位，默认实参（接受一个<code>iostate</code>类型的参数）是恢复到goodbit状态（所有错误标志位都被复位）：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">basic_ios::clear</span><span class="params">(_Ios_Iostate __state = goodbit)</span></span></span><br></pre></td></tr></table></figure><p>可以参考：<br><a href="https://blog.csdn.net/maxzcl/article/details/118391759">C++中iostream.clear()的用法</a></p><p>我们可以使用这些成员：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">auto</span> old_state = cin.<span class="built_in">rdstate</span>();<span class="comment">//记住当前cin的状态</span></span><br><span class="line">   cin.<span class="built_in">clear</span>();        <span class="comment">//使cin复位</span></span><br><span class="line">   <span class="built_in">process_input</span>(cin); <span class="comment">//使用cin(忽略函数实现)</span></span><br><span class="line">   cin.<span class="built_in">setstate</span>(old_state);<span class="comment">//将cin恢复置old_state</span></span><br></pre></td></tr></table></figure><p><code>clear</code>也不使用默认实参，接受一个iostate值，表示流的新状态。<br>为了复位单一的条件状态位，我们首先用rdstate读取当前条件状态，然后用位操作将所需复位的位进行置位来生成新的状态，例如我们复位failbit和badbit：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cin.<span class="built_in">clear</span>(cin.<span class="built_in">rdstate</span>() &amp; ~cin.failbit &amp; ~cin.badbit);</span><br></pre></td></tr></table></figure><p>哦对了，你可能会疑惑这里的failbit和badbit假如是刚刚出错的<code>cin</code>，或者不是，这时候的取反岂不是很具有不确定性吗？<br>其实不是，我们仔细观察，不难发现这是一个静态成员<code>static const _Ios_Iostate ios_base::failbit = _S_failbit</code><br>，是面对任何类的，而不只是<code>cin</code>一个对象的。故，这仅仅表示它的位置。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cout &lt;&lt; cin.failbit &lt;&lt; endl;</span><br><span class="line">   cout &lt;&lt; cin.badbit &lt;&lt; endl;</span><br></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输出:<span class="number">4</span></span><br><span class="line"> <span class="number">1</span></span><br></pre></td></tr></table></figure><p><code>~cin.failbit</code>就是让failbit位置<code>0</code>，<code>badbit</code>同理，再与上当前状态，并覆盖。（这就是复位的真相了）</p><p>而关于<code>setstate</code>和<code>clear</code>区别：<br><code>clear</code>函数作用是将流状态设置成括号内参数所代表的状态，<strong>强制覆盖</strong>掉流的原状态。<br><code>setstate</code>函数并不强制覆盖流的原状态，而是将括号内参数所代表的状态<strong>叠加</strong>到原始状态上。<br>可以参考：<br><a href="https://blog.csdn.net/origin_lee/article/details/38707643">C++中io库的setstate和clear区别</a></p><p>我们再用<code>sync</code>让流与其对应的数据源同步，这样流就可以丢弃掉之前没有处理的数据。如果不这样做，前面的没有处理掉的数据如果不能转换为需要的类型，那么流会一直处于错误状态，所以你后面的<code>cin</code>都会返回默认数据。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> a;</span><br><span class="line">   <span class="keyword">while</span> (<span class="literal">true</span>)</span><br><span class="line">   &#123;</span><br><span class="line">       <span class="keyword">if</span> (cin &gt;&gt; a)</span><br><span class="line">       &#123;</span><br><span class="line">           cout &lt;&lt; a &lt;&lt;endl;</span><br><span class="line">           <span class="keyword">break</span>;</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="keyword">else</span></span><br><span class="line">       &#123;</span><br><span class="line">           std::cerr &lt;&lt; <span class="string">&quot;error&quot;</span> &lt;&lt; <span class="string">&quot;\n&quot;</span>;</span><br><span class="line">           cin.<span class="built_in">clear</span>();</span><br><span class="line">           cin.<span class="built_in">sync</span>();</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><h3 id="9-1-4-管理输出缓冲">9.1.4 管理输出缓冲</h3><p>由于设备的写操作可能很耗时，允许操作系统将多个输出操作组合为单一的设备写操作可以带来很大的性能提升。<br><strong>但是这样做会</strong><br>输出文本可能会被立即打印出来，也有可能被保存在缓冲区里，随后再打印。</p><p>导致缓存刷新的原因有很多：</p><ul><li>程序正常结束</li><li>缓冲区满</li><li><code>endl</code>、<code>flush</code>、<code>ends</code>等操作符可以显式刷新缓冲区</li><li>在每次输出操作之后，我们可以使用操纵符<code>unitbuf</code>设置流的内部状态，来清空缓冲区。默认情况下，对<code>cerr</code>是设置<code>unitbuf</code>的，因此写到<code>cerr</code>的内容都是立刻刷新的。</li><li>一个输出流被关联到另一个流。在这种情况下，当读写被关联的流时，关联到的流的缓冲区会被立刻刷新（默认情况下，<code>cin</code>和<code>cerr</code>都关联到<code>cout</code>。因此，读<code>cin</code>或者写<code>cerr</code>都会导致<code>cout</code>缓冲区刷新。）</li></ul><h4 id="9-1-4-1-刷新输出缓冲区">9.1.4.1 刷新输出缓冲区</h4><p><code>endl</code>会换行，然后刷新缓冲区<br><code>flush</code>只刷新缓冲区，不附加任何额外字符<br><code>ends</code>会输出一个空字符，然后刷新缓冲区</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">cout &lt;&lt; <span class="string">&quot;hi!&quot;</span> &lt;&lt;std::endl;</span><br><span class="line">   cout &lt;&lt; <span class="string">&quot;hi!&quot;</span> &lt;&lt;std::flush;</span><br><span class="line">   cout &lt;&lt; <span class="string">&quot;hi!&quot;</span> &lt;&lt;std::ends;</span><br></pre></td></tr></table></figure><p>当程序异常终止时，输出缓冲区是不会被刷新的。当一个程序崩溃后，它所输出的数据就可能停留在了输出缓冲区中，而没有打印。</p><h4 id="9-1-4-2-unitbuf-操作符">9.1.4.2 unitbuf 操作符</h4><p>如果想在每次输出操作后都刷新缓冲区，我们可以使用<code>unitbuf</code>操纵符，做到一劳永逸：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cout &lt;&lt; std::unitbuf;</span><br></pre></td></tr></table></figure><p>接下来的每次写操作之后都进行一次<code>flush</code>操作。<br>而<code>nounitbuf</code>则重置流，使其恢复默认状态：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cout &lt;&lt; std::nounitbuf;</span><br></pre></td></tr></table></figure><h4 id="9-1-4-3-关联输入和输出流">9.1.4.3 关联输入和输出流</h4><p>当一个输入流被关联到一个输出流时，任何企图从输入流读取操作的操作都会刷新关联的输出流。标准库下，已经将cout和cin关联在一起了：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cin &gt;&gt; ival;</span><br></pre></td></tr></table></figure><p>这样<code>cout</code>的缓冲区将被刷新。</p><blockquote><p>交互式系统通常应该关联输入流和输出流。这意味着所有输出，包括用户提示信息，都会在读操作之前被打印出来。</p></blockquote><p>流成员函数<code>tie</code>有两个重载版本：</p><ol><li>不带参数，返回指向输出流的指针。如果本对象关联到了一个输出流，则返回指向这个流的指针；如果未关联任何流，就返回空指针。</li><li>接受一个指向<code>ostream</code>的指针作为参数。将自己关联到这个ostream。即，<code>x.tie(&amp;os)</code>将流<code>x</code>关联到输出流<code>os</code>。</li></ol><p>我们既可以将一个<code>istream</code>对象关联到<code>ostream</code>，也可以把一个<code>ostream</code>关联的另一个<code>ostream</code>：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">cin.<span class="built_in">tie</span>(&amp;cout);<span class="comment">//废话,本来就存在</span></span><br><span class="line">   std::ostream *old_tie = cin.<span class="built_in">tie</span>(<span class="literal">nullptr</span>);<span class="comment">//cin不与其他流关联,old_tie存着指向以前关联的对象cout</span></span><br><span class="line">   cin.<span class="built_in">tie</span>(&amp;std::cerr);<span class="comment">//读取cin会刷新cerr</span></span><br><span class="line">   cin.<span class="built_in">tie</span>(old_tie);<span class="comment">//重建cin和cout的关联</span></span><br></pre></td></tr></table></figure><h2 id="9-2-文件输入输出">9.2 文件输入输出</h2><p>头文件<code>&lt;fstream&gt;</code>定义了三个类型：</p><ul><li><code>ifstream</code> 读</li><li><code>ofstream</code> 写</li><li><code>fstream</code> 读写</li></ul><p>这些类型继承于<code>iostream</code>类型，可以像使用<code>cin</code>和<code>cout</code>一样，用IO运算符（<code>&lt;&lt;</code>和<code>&gt;&gt;</code>）来读写文件，用<code>getline</code>从一个<code>ifstream</code>读取数据等等。</p><p>甚至，我们还可以大胆一点，在我们以前的函数使用过<code>iostream &amp;</code>参数的地方，填入实参<code>fstream</code>：<br>回忆<code>read</code>函数：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">std::istream &amp;<span class="title">read</span><span class="params">(std::istream &amp;is, Sales_data &amp;item)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">double</span> price = <span class="number">0</span>;</span><br><span class="line">    is &gt;&gt; item.bookNo &gt;&gt; item.unit_sold &gt;&gt; price;</span><br><span class="line">    item.revenue = price * item.unit_sold;</span><br><span class="line">    <span class="keyword">return</span> is;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用<code>fstream</code>作为<code>iostream &amp;</code>的实参：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Sales_data total;</span><br><span class="line">   <span class="function">std::ifstream <span class="title">input</span><span class="params">(argv[<span class="number">1</span>])</span></span>;</span><br><span class="line">   <span class="built_in">read</span>(input, total);</span><br></pre></td></tr></table></figure><p><code>ifstream</code>和<code>ofstream</code>兼容了我们之前的<code>istream</code>和<code>ostream</code>。</p><p>一般而言，操作文件有三步：</p><ol><li>打开文件</li><li>输入输出</li><li>关闭文件</li></ol><h3 id="9-2-1-打开文件">9.2.1 打开文件</h3><h4 id="9-2-1-1-打开文件的方法">9.2.1.1 打开文件的方法</h4><p>创建一个文件流，并绑定一个文件。</p><table><thead><tr><th>操作</th><th>说明</th></tr></thead><tbody><tr><td><code>fstream fs;</code></td><td>创建一个未绑定的流<code>fs</code></td></tr><tr><td><code>fstream fs(s);</code></td><td>创建一个流，并打开名为<code>s</code>的文件，<code>s</code>可以是string或C风格字符串</td></tr><tr><td><code>fstream fs(s, mode);</code></td><td>同上，并指定以<code>mode</code>模式打开</td></tr></tbody></table><p>如果创建的时候没有绑定，也可以用成员函数<code>open</code>打开：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">fs.<span class="built_in">open</span>(s);<span class="comment">//s可以是string或C风格字符串</span></span><br><span class="line"><span class="comment">//默认的mode依赖于fstream类型</span></span><br></pre></td></tr></table></figure><p>请养成检测<code>open</code>是否成功的习惯！</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (fs)</span><br><span class="line"><span class="comment">//open成功，可以使用文件了</span></span><br></pre></td></tr></table></figure><p>举个例子：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">auto</span> p = argv + <span class="number">1</span>; p != argv + argc; ++p) &#123;</span><br><span class="line">        <span class="function">std::ifstream <span class="title">input</span><span class="params">(*p)</span></span>;</span><br><span class="line">        <span class="keyword">if</span> (input)</span><br><span class="line">            <span class="built_in">process</span>(input);<span class="comment">//省略process函数细节</span></span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            std::cerr &lt;&lt; <span class="string">&quot;couldn&#x27;t open:&quot;</span> + <span class="built_in">string</span> (*p) &lt;&lt; <span class="string">&quot;\n&quot;</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>每次循环创建新的局部<code>ifstream</code>对象，如果某次<code>open</code>失败，输出错误信息，继续处理下一个文件。</p><h4 id="9-2-1-2-文件模式">9.2.1.2 文件模式</h4><p>也就是之前说的mode，常见的mode如下：</p><table><thead><tr><th>模式</th><th>说明</th><th>要求</th></tr></thead><tbody><tr><td><code>in</code></td><td>读</td><td>不能是<code>ofstream</code></td></tr><tr><td><code>out</code></td><td>写，默认会同时<code>trunc</code></td><td>不能是<code>ifstream</code></td></tr><tr><td><code>app</code></td><td>每次写操作都定位到文件末尾</td><td></td></tr><tr><td>如果只设置了<code>app</code>则默认也指定<code>out</code></td><td><code>trunc</code>没被设定</td><td></td></tr><tr><td><code>ate</code></td><td>打开文件后立即定位到文件末尾</td><td></td></tr><tr><td><code>trunc</code></td><td>截断文件</td><td>必须设置了<code>out</code></td></tr><tr><td><code>binary</code></td><td>以二进制方式进行IO</td><td></td></tr></tbody></table><p>如：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">std::ofstream out;</span><br><span class="line">   out.<span class="built_in">open</span>(<span class="string">&quot;a.txt&quot;</span>, std::ios::app);<span class="comment">//模式为输出和追加</span></span><br><span class="line"><span class="comment">//等于out.open(&quot;a.txt&quot;, std::ofstream ::app);</span></span><br></pre></td></tr></table></figure><p>每个文件流类型都定义了一个默认的文件模式，当我们未指定文件模式时，就使用此默认模式。与 <code>ifstream</code>关联的文件默认以<code>in</code>模式打开;与<code>ofstream</code>关联的文件默认以<code>out</code>模式和打开<code>trunc</code>模式，输出和截断;与<code>fstream</code> 关联的文件默认以<code>in</code>和<code>out</code>模式打开。</p><p><strong>截断的含义</strong>：对于目前的实现来说，<code>ios::trunc</code>与<code>ios::out</code>的效果应该是一样的，也就是打开文件的时候先将文件的内容清空，再进行写入。并不是删除文件。<br>截断后文件就是空文件了，所有文件指针可以说在最前面也是最后面。截断后文件还是那个文件（如果文件存在的话），但是内容没有了。</p><p>注意：<code>ofstream</code>打开一个文件时，文件的内容会被丢弃，阻止一个<code>ofstream</code>清空的唯一方式是显式指定<code>app</code>或<code>in</code>模式。（比较建议的是直接遵循上表规则）</p><h4 id="9-2-1-3-判断打开是否成功">9.2.1.3 判断打开是否成功</h4><p>可以用<code>is_open</code>成员函数判断文件是否成功打开且尚未关闭：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">fs.<span class="built_in">is_open</span>();<span class="comment">//返回bool值，指出fs关联的文件是否成功打开而且尚未关闭</span></span><br></pre></td></tr></table></figure><h3 id="9-2-2-输入输出">9.2.2 输入输出</h3><h4 id="9-2-2-1-读取内容">9.2.2.1 读取内容</h4><p>我们用<code>ifstream</code>对象从文件里获取数据，用<code>cout</code>打印到命令框中：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">std::ifstream <span class="title">input</span><span class="params">(<span class="string">&quot;a,txt&quot;</span>)</span></span>;</span><br><span class="line">   string tmp;</span><br><span class="line">   <span class="keyword">while</span> (input &gt;&gt; tmp)</span><br><span class="line">   &#123;</span><br><span class="line">       cout &lt;&lt; tmp &lt;&lt; endl;</span><br><span class="line">   &#125;</span><br><span class="line">   input.<span class="built_in">close</span>();</span><br></pre></td></tr></table></figure><p>当然，也可以换成<code>getline</code>：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span> (<span class="built_in">getline</span>(input, tmp))</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; tmp &lt;&lt; endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>甚至换成流成员函数<code>getline</code>：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">char</span> tmp[<span class="number">1024</span>];<span class="comment">//这里是char *类型，用string转的是const char *</span></span><br><span class="line">   <span class="keyword">while</span> (input.<span class="built_in">getline</span>(tmp, <span class="number">1024</span>))</span><br><span class="line">   &#123;</span><br><span class="line">       cout &lt;&lt; tmp &lt;&lt; endl;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p>流成员函数<code>get</code>：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">char</span> c;</span><br><span class="line">   <span class="keyword">while</span>( (c = input.<span class="built_in">get</span>()) != EOF)</span><br><span class="line">   &#123;</span><br><span class="line">       cout &lt;&lt; c;<span class="comment">//一个字符一个字符输出</span></span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><h4 id="9-2-2-2-输出文件">9.2.2.2 输出文件</h4><p>我们默认模式输出文件：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">std::ofstream <span class="title">output</span><span class="params">(<span class="string">&quot;../a.txt&quot;</span>)</span></span>;</span><br><span class="line">   output &lt;&lt; <span class="string">&quot;hello world!&quot;</span> &lt;&lt; endl;</span><br></pre></td></tr></table></figure><p>可知默认模式输出时，是开启了截断文件功能的，原来的文本全部都清除，变成了我们的<code>&quot;hello world!&quot;</code>。<br>当我们想保留原文本，在后面继续添加，就可以改为模式<code>app</code>：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">std::ofstream <span class="title">output</span><span class="params">(<span class="string">&quot;../a.txt&quot;</span>, std::ofstream::app)</span></span>;</span><br><span class="line">   output &lt;&lt; <span class="string">&quot;hello world!&quot;</span> &lt;&lt; endl;</span><br></pre></td></tr></table></figure><h3 id="9-2-3-关闭文件">9.2.3 关闭文件</h3><p>当然，有<code>open</code>就有<code>close</code>，<code>close</code>可以关闭文件：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">fs.<span class="built_in">close</span>();</span><br></pre></td></tr></table></figure><p>一旦一个文件流已经打开，它就保持与对应文件的关联。实际上，对一个已经打开的文件流调用<code>open</code><br>会失败，并会导致failbit被置位。随后的试图使用文件流的操作都会失败。为了将文件流关联到另外一个文件，必须首先关闭已经关联的文件。一旦文件成功关闭，我们可以打开新的文件。</p><p>所以，请记住，用完文件就请<code>close</code>它：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">fs.<span class="built_in">open</span>(s);</span><br><span class="line"><span class="comment">//...</span></span><br><span class="line">fs.<span class="built_in">close</span>();<span class="comment">//关闭了才能再打开</span></span><br><span class="line">fs.<span class="built_in">open</span>(s);</span><br></pre></td></tr></table></figure><h2 id="9-3-string流">9.3 string流</h2><p>在头文件<code>&lt;sstream&gt;</code>中定义了三个类型来支持内存IO：</p><ul><li><code>istringstream</code>从string读取数据</li><li><code>ostringstream</code>向string写入数据</li><li><code>stringstream</code>可读可写</li></ul><p>与<code>fstream</code>类似，<code>sstream</code>同样继承<code>iostream</code>，<br>string流就是把一个string当作一个流来看待，可以对其使用各种流可以用的手段。<br>另外，也有一些<code>sstream</code>特有的操作：</p><table><thead><tr><th>操作</th><th>说明</th></tr></thead><tbody><tr><td><code>sstream strm;</code></td><td>创建一个未绑定的<code>sstream</code>对象</td></tr><tr><td><code>sstream strm(s);</code></td><td>创建一个<code>sstream</code>对象，并绑定到s</td></tr><tr><td><code>strm.str();</code></td><td>返回<code>strm</code>所保存的string的拷贝</td></tr><tr><td><code>strm.str(s);</code></td><td>将<code>s</code>拷贝到<code>strm</code>中，返回<code>void</code></td></tr></tbody></table><h3 id="9-3-1-使用istringstream">9.3.1 使用istringstream</h3><p><strong>使用场景</strong><br>当我们某些工作是对整行文本进行处理，而其他一些工作是处理行内的某个单词时，通常使用<code>istringstream</code>。</p><p><strong>例子</strong><br>比如，有一个文件，列出了一些人和他们一个或多个电话号：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Mico <span class="number">18718718752</span> <span class="number">6412456</span></span><br><span class="line">lee <span class="number">12546761216</span></span><br><span class="line">drew <span class="number">16365544664</span> <span class="number">4556664</span></span><br></pre></td></tr></table></figure><p>我们首先定义一个简单的类来描述输入数据：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">PersonInfo</span> &#123;</span><br><span class="line">    string name;</span><br><span class="line">    vector&lt;string&gt; phones;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>我们处理上文本时，可以把如上文本的每一行用<code>getline</code>获取，然后将获取内容保存到<code>sstream</code>中方便我们处理：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">string line, word;</span><br><span class="line">   vector&lt;PersonInfo&gt; people;</span><br><span class="line"></span><br><span class="line"><span class="comment">//打开文件</span></span><br><span class="line">   <span class="function">std::ifstream <span class="title">input</span><span class="params">(<span class="string">&quot;../a.txt&quot;</span>)</span></span>;</span><br><span class="line">   <span class="keyword">if</span> (!input)</span><br><span class="line">   &#123;</span><br><span class="line">       std::cerr &lt;&lt; <span class="string">&quot;couldn&#x27;t open the file&quot;</span> &lt;&lt; <span class="string">&quot;\n&quot;</span>;</span><br><span class="line">       <span class="keyword">return</span> EXIT_FAILURE;</span><br><span class="line">   &#125;</span><br><span class="line">   </span><br><span class="line"><span class="comment">//读取数据</span></span><br><span class="line">   <span class="keyword">while</span> (<span class="built_in">getline</span>(input, line))</span><br><span class="line">   &#123;</span><br><span class="line">       PersonInfo info;</span><br><span class="line">       <span class="function">std::istringstream <span class="title">record</span><span class="params">(line)</span></span>;</span><br><span class="line">       record &gt;&gt; info.name;</span><br><span class="line">       <span class="keyword">while</span> (record &gt;&gt; word)</span><br><span class="line">           info.phones.<span class="built_in">push_back</span>(word);</span><br><span class="line">       people.<span class="built_in">push_back</span>(info);</span><br><span class="line">   &#125;</span><br><span class="line">   </span><br><span class="line">   <span class="comment">//关闭文件</span></span><br><span class="line">   input.<span class="built_in">close</span>();</span><br><span class="line">   </span><br><span class="line"><span class="comment">//输出数据</span></span><br><span class="line">   <span class="keyword">for</span> (<span class="type">const</span> <span class="keyword">auto</span> person : people)</span><br><span class="line">   &#123;</span><br><span class="line">       cout &lt;&lt; person.name &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">       <span class="keyword">for</span> (<span class="type">const</span> <span class="keyword">auto</span> phone : person.phones)</span><br><span class="line">           cout &lt;&lt; phone &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">       cout &lt;&lt; endl;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p><code>getline</code>逐行从输入读取数据，直到<code>input</code>遇到文件尾或者（其他错误）。<code>getline</code>成功读取，<code>line</code>就存一行数据，再用局部<code>PersonInfo</code>保存记录数据，最后交给<code>vector</code>的<code>people</code>。<br>当然，这里使用<code>record</code>也是局部变量，是因为<code>record</code>处理完了一次数据就会触发“文件结束”的信号，在<code>record</code>上的下一次输入就会操作失败，局部变量保证了下一次循环能跳过之前的错误继续输入。</p><h3 id="9-3-2-使用ostringstream">9.3.2 使用ostringstream</h3><p><strong>使用场景</strong><br>当我们逐步构造输出时，希望最后一起打印。此时<code>ostringstream</code>非常有用。</p><p><strong>例子</strong><br>比如，刚刚我们读取电话号的例子，我们想在逐个验证电话号时并改变其格式，如果所有号码都有效的，我们希望输出一个新文件，包含改变格式之后的号码，对于无效的号码，我们就打印一条包含人名和无效号码的错误信息。</p><p>由于我们不希望输出无效电话号的人，因此对每个人，直到验证完电话号才能进行输出，这时，我们就可以先写入一个内存<code>ostringstream</code>里：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="type">const</span> <span class="keyword">auto</span> person : people)</span><br><span class="line">    &#123;</span><br><span class="line">        std::ostringstream formatted, badNums;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">const</span> <span class="keyword">auto</span> phone : person.phones)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (!<span class="built_in">valid</span>(phone))<span class="comment">//省略检查电话号函数valid的实现</span></span><br><span class="line">                badNums &lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; phone;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                formatted &lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; format(phone);<span class="comment">//省略改变电话号格式函数format的实现</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (badNums.<span class="built_in">str</span>().<span class="built_in">empty</span>())<span class="comment">//没有错误</span></span><br><span class="line">            cout &lt;&lt; person.name &lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; formatted.<span class="built_in">str</span>() &lt;&lt; endl;</span><br><span class="line">        <span class="keyword">else</span> </span><br><span class="line">            std::cerr &lt;&lt; <span class="string">&quot;input error: &quot;</span> &lt;&lt; person.name &lt;&lt; <span class="string">&quot; invalid number &quot;</span> &lt;&lt; badNums.<span class="built_in">str</span>() &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>字符串流被<code>&lt;&lt;</code>写入数据，我们使用成员函数<code>str</code>查看字符串流里的string对象。</p><hr><p>文章参考：<a href="https://blog.csdn.net/Ranki666/article/details/111587658">C++ IO类 详解</a></p>]]></content>
      
      
      <categories>
          
          <category> 跟我一起从C到C++ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> c++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>类(下)——跟我一起从C到C++(第八期)</title>
      <link href="/2023/02/05/C++/%E7%B1%BB(%E4%B8%8B)%E2%80%94%E2%80%94%E8%B7%9F%E6%88%91%E4%B8%80%E8%B5%B7%E4%BB%8EC%E5%88%B0C++(%E7%AC%AC%E5%85%AB%E6%9C%9F)/"/>
      <url>/2023/02/05/C++/%E7%B1%BB(%E4%B8%8B)%E2%80%94%E2%80%94%E8%B7%9F%E6%88%91%E4%B8%80%E8%B5%B7%E4%BB%8EC%E5%88%B0C++(%E7%AC%AC%E5%85%AB%E6%9C%9F)/</url>
      
        <content type="html"><![CDATA[<span id="more"></span><h3 id="文章目录">文章目录</h3><ul><li><a href="#8-%E7%B1%BB">8 类</a><ul><li><a href="#86-%E7%B1%BB%E7%9A%84%E4%BD%9C%E7%94%A8%E5%9F%9F">8.6 类的作用域</a><ul><li><a href="#861-%E4%BD%9C%E7%94%A8%E5%9F%9F%E5%92%8C%E5%AE%9A%E4%B9%89%E5%9C%A8%E7%B1%BB%E5%A4%96%E9%83%A8%E7%9A%84%E6%88%90%E5%91%98">8.6.1 作用域和定义在类外部的成员</a></li><li><a href="#862-%E5%90%8D%E5%AD%97%E6%9F%A5%E6%89%BE%E4%B8%8E%E7%B1%BB%E7%9A%84%E4%BD%9C%E7%94%A8%E5%9F%9F">8.6.2 名字查找与类的作用域</a><ul><li><a href="#8621-%E7%94%A8%E4%BA%8E%E7%B1%BB%E6%88%90%E5%91%98%E5%A3%B0%E6%98%8E%E7%9A%84%E5%90%8D%E5%AD%97%E6%9F%A5%E6%89%BE">8.6.2.1 用于类成员声明的名字查找</a></li><li><a href="#8622-%E7%B1%BB%E5%9E%8B%E5%90%8D%E9%9C%80%E8%A6%81%E7%89%B9%E6%AE%8A%E5%A4%84%E7%90%86">8.6.2.2 类型名需要特殊处理</a></li><li><a href="#8623-%E6%88%90%E5%91%98%E5%AE%9A%E4%B9%89%E4%B8%AD%E7%9A%84%E6%99%AE%E9%80%9A%E5%9D%97%E4%BD%9C%E7%94%A8%E5%9F%9F%E7%9A%84%E5%90%8D%E5%AD%97%E6%9F%A5%E6%89%BE">8.6.2.3 成员定义中的普通块作用域的名字查找</a></li><li><a href="#8624-%E7%B1%BB%E4%BD%9C%E7%94%A8%E5%9F%9F%E4%B9%8B%E5%90%8E%E5%9C%A8%E5%A4%96%E5%9B%B4%E7%9A%84%E4%BD%9C%E7%94%A8%E5%9F%9F%E4%B8%AD%E6%9F%A5%E6%89%BE">8.6.2.4 类作用域之后，在外围的作用域中查找</a></li></ul></li></ul></li><li><a href="#87-%E6%9E%84%E9%80%A0%E5%87%BD%E6%95%B0%E5%86%8D%E6%8E%A2">8.7 构造函数再探</a><ul><li><a href="#871-%E5%A7%94%E6%89%98%E6%9E%84%E9%80%A0%E5%87%BD%E6%95%B0">8.7.1 委托构造函数</a></li><li><a href="#872-%E9%BB%98%E8%AE%A4%E6%9E%84%E9%80%A0%E5%87%BD%E6%95%B0">8.7.2 默认构造函数</a><ul><li><a href="#8721-%E9%BB%98%E8%AE%A4%E6%9E%84%E9%80%A0%E5%87%BD%E6%95%B0%E7%9A%84%E4%BD%9C%E7%94%A8">8.7.2.1 默认构造函数的作用</a></li><li><a href="#8722-%E4%BD%BF%E7%94%A8%E9%BB%98%E8%AE%A4%E6%9E%84%E9%80%A0%E5%87%BD%E6%95%B0">8.7.2.2 使用默认构造函数</a></li></ul></li><li><a href="#873-%E9%9A%90%E5%BC%8F%E7%9A%84%E7%B1%BB%E7%B1%BB%E5%9E%8B%E8%BD%AC%E6%8D%A2">8.7.3 隐式的类类型转换</a><ul><li><a href="#8731-%E8%BD%AC%E6%8D%A2%E6%9E%84%E9%80%A0%E5%87%BD%E6%95%B0">8.7.3.1 转换构造函数</a></li><li><a href="#8732-%E6%8A%91%E5%88%B6%E6%9E%84%E9%80%A0%E5%87%BD%E6%95%B0%E7%9A%84%E9%9A%90%E5%BC%8F%E8%BD%AC%E6%8D%A2">8.7.3.2 抑制构造函数的隐式转换</a></li><li><a href="#8733-%E6%98%BE%E5%BC%8F%E8%BD%AC%E6%8D%A2%E6%9E%84%E9%80%A0%E5%87%BD%E6%95%B0">8.7.3.3 显式转换构造函数</a></li><li><a href="#8734-%E6%A0%87%E5%87%86%E5%BA%93%E4%B8%AD%E8%95%B4%E5%90%AB%E7%9A%84%E5%8D%95%E5%8F%82%E6%9E%84%E9%80%A0">8.7.3.4 标准库中蕴含的单参构造</a></li></ul></li></ul></li><li><a href="#88-%E5%85%B6%E4%BB%96%E7%B1%BB">8.8 其他类</a><ul><li><a href="#881-%E8%81%9A%E5%90%88%E7%B1%BB">8.8.1 聚合类</a></li><li><a href="#882-%E5%AD%97%E9%9D%A2%E5%80%BC%E5%B8%B8%E9%87%8F%E7%B1%BB">8.8.2 字面值常量类</a></li></ul></li><li><a href="#89-%E7%B1%BB%E7%9A%84%E9%9D%99%E6%80%81%E6%88%90%E5%91%98">8.9 类的静态成员</a><ul><li><a href="#891-%E5%A3%B0%E6%98%8E%E5%92%8C%E4%BD%BF%E7%94%A8%E9%9D%99%E6%80%81%E6%88%90%E5%91%98">8.9.1 声明和使用静态成员</a></li><li><a href="#892-%E5%AE%9A%E4%B9%89%E5%92%8C%E5%88%9D%E5%A7%8B%E5%8C%96%E9%9D%99%E6%80%81%E6%88%90%E5%91%98">8.9.2 定义和初始化静态成员</a></li><li><a href="#893-%E9%9D%99%E6%80%81%E6%88%90%E5%91%98%E8%83%BD%E7%94%A8%E4%BA%8E%E7%89%B9%E6%AE%8A%E5%9C%BA%E5%90%88">8.9.3 静态成员能用于特殊场合</a><ul><li><a href="#8931-%E9%9D%99%E6%80%81%E6%88%90%E5%91%98%E5%8F%AF%E4%BB%A5%E6%98%AF%E4%B8%8D%E5%AE%8C%E5%85%A8%E7%B1%BB%E5%9E%8B">8.9.3.1 静态成员可以是不完全类型</a></li><li><a href="#8932-%E9%9D%99%E6%80%81%E6%88%90%E5%91%98%E5%8F%AF%E4%BB%A5%E5%81%9A%E9%BB%98%E8%AE%A4%E5%AE%9E%E5%8F%82">8.9.3.2 静态成员可以做默认实参</a></li></ul></li></ul></li></ul></li></ul><h1 id="8-类">8 类</h1><p>承接<a href="https://blog.csdn.net/DreamTrue520/article/details/128842312?spm=1001.2014.3001.5501">类(中)——跟我一起从C到C++(第七期)</a></p><h2 id="8-6-类的作用域">8.6 类的作用域</h2><p>每个类都会定义它自己的作用域。在类的作用域外，普通的数据和成员函数只能由对象、引用或者指针使用成员访问符<code>.</code>或者<code>-&gt;</code>来访问。对于类类型成员则使用作用域运算符来访问。无论哪种情况，跟在运算符之后的名字都必须是对应类的成员：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Screen::pos ht = <span class="number">24</span>, wd = <span class="number">80</span>;</span><br><span class="line">   <span class="function">Screen <span class="title">scr</span><span class="params">(<span class="number">24</span>, <span class="number">80</span>)</span></span>;</span><br><span class="line">   Screen *p = &amp;scr;</span><br><span class="line">   <span class="type">char</span> c = scr.<span class="built_in">get</span>();</span><br><span class="line">   c = p-&gt;<span class="built_in">get</span>();</span><br></pre></td></tr></table></figure><h3 id="8-6-1-作用域和定义在类外部的成员">8.6.1 作用域和定义在类外部的成员</h3><p>一个类就是一个作用域的事实能够很好地理解为什么当我们在类的外部定义成员函数时必须提供类名和函数名。<br>一旦遇到类名，定义的剩余部分就在类的作用域之内了，这里的剩余部分包括参数列表和函数体，在它们之中，我们无须再次授权就能直接使用类的其他成员：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">Window_mgr::clear</span><span class="params">(ScreenIndex i)</span> </span>&#123;</span><br><span class="line">    Screen &amp;s = screens[i];</span><br><span class="line">    s.contents = std::<span class="built_in">string</span>(s.height * s.width, <span class="string">&#x27; &#x27;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>返回类型出现在类名之前，它并没有被编译器划分到类的作用域之中。<br>如果它想类的成员类型作为返回值类型，就必须指明它是哪个类的成员：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Window_mgr</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">ScreenIndex <span class="title">addScreen</span><span class="params">(<span class="type">const</span> Screen&amp;)</span></span>;</span><br><span class="line">    <span class="comment">//省略</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">Window_mgr::ScreenIndex <span class="title">Window_mgr::addScreen</span><span class="params">(<span class="type">const</span> Screen &amp;s)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    screens.<span class="built_in">push_back</span>(s);</span><br><span class="line">    <span class="keyword">return</span> screens.<span class="built_in">size</span>() - <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="8-6-2-名字查找与类的作用域">8.6.2 名字查找与类的作用域</h3><h4 id="8-6-2-1-用于类成员声明的名字查找">8.6.2.1 用于类成员声明的名字查找</h4><p>在我们目前为止编写的程序中，名字查找（寻找与所用名字最匹配的声明的过程）还算直接了当：</p><ul><li>首先，在名字所在的块中寻找其声明语句，只考虑在名字的使用之前出现的声明。</li><li>如果没有找到，继续寻找外层作用域。</li><li>如果最终没有找到匹配的声明，则程序报错。</li></ul><p>对于定义在类内部的成员来说，却有些不同：</p><ul><li>首先，编译成员的声明</li><li>直到类全部可见后才编译函数体（编译器处理完类中的全部声明之后才会处理成员函数的定义）</li></ul><p>不过，因为是在类的作用域之中，假如有外层作用域和内层作用域重名的情况，也是优先使用内层作用域的那个声明：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="type">double</span> Money;</span><br><span class="line">std::string bal;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Account</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">Money <span class="title">balance</span><span class="params">()</span> </span>&#123;<span class="keyword">return</span>  bal;&#125;<span class="comment">//使用的是类内的bal</span></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    Money bal;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h4 id="8-6-2-2-类型名需要特殊处理">8.6.2.2 类型名需要特殊处理</h4><p>重定义类型名是一种错误的行为：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="type">double</span> Money;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Account</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">Money <span class="title">balance</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> bal;&#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="keyword">typedef</span> <span class="type">int</span> Money;<span class="comment">//重定义Money</span></span><br><span class="line">    Money bal;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>我们使用CLion观察类型，可以看出类型还是比较混乱：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Account</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">Money <span class="title">balance</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> bal;<span class="comment">/*int*/</span>&#125;<span class="comment">//返回值double</span></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="keyword">typedef</span> <span class="type">int</span> Money;</span><br><span class="line">    Money bal;<span class="comment">/*int*/</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>虽然可能编译器因版本的问题，不会为此负责，可以仍然通过，但忽略了代码有错的事实。</p><h4 id="8-6-2-3-成员定义中的普通块作用域的名字查找">8.6.2.3 成员定义中的普通块作用域的名字查找</h4><p>成员函数中使用的名字按照一定规定解析：</p><ul><li>首先，在成员函数内查找该名字的声明。</li><li>如果成员函数内没有找到，则在类内寻找（类的所有成员都可以被考虑）。</li><li>如果类内也没有找到该名字的声明，在成员函数定义之前的作用域内继续查找。</li></ul><p>一般来说，不建议把其他成员的名字作为某个成员函数的参数。<br>这里仅仅是做实验的要求：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Screen</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="keyword">typedef</span> std::string::size_type pos;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">dummy_fcn</span><span class="params">(pos height)</span> </span>&#123;</span><br><span class="line">        cursor = width * height;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    pos cursor = <span class="number">0</span>;</span><br><span class="line">    pos height = <span class="number">0</span>, width = <span class="number">0</span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>函数的参数位于函数作用域内，故此时的<code>height</code>是函数的参数而不是类的成员。</p><p>假如这时想使用类的成员<code>height</code>只能用<code>this-&gt;height</code>或者<code>Screen::height</code>来表示。</p><h4 id="8-6-2-4-类作用域之后-在外围的作用域中查找">8.6.2.4 类作用域之后，在外围的作用域中查找</h4><p>我们在外围的作用域中定义变量（这里用全局函数为例）：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">std::string::size_type height;</span><br></pre></td></tr></table></figure><p>假如我们在成员函数中想调用在外围的作用域中定义的变量，但此时函数作用域内也有重名变量，类作用域也有重名变量，我们可以使用作用域运算符<code>::</code>表明使用外围的作用域中定义的变量：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">dummy_fcn</span><span class="params">(pos height)</span> </span>&#123;</span><br><span class="line">        cursor = width * ::height;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h2 id="8-7-构造函数再探">8.7 构造函数再探</h2><h3 id="8-7-1-委托构造函数">8.7.1 委托构造函数</h3><p>C++11新标准扩展了构造函数的初始值的功能，使得我们可以定义所谓的委托构造函数。一个委托构造函数，使用它所属类的其他构造函数执行它自己的初始化过程，就像把自己的一部分（或者全部）职责委托给了其他构造函数。<br>和其他构造函数一样，一个委托构造函数也有一个成员初始值列表和一个函数体。而委托构造函数的成员初始值列表只有一个唯一的入口，就是类名本身：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Sales_data</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="comment">//非委托构造</span></span><br><span class="line">    <span class="built_in">Sales_data</span>(<span class="type">const</span> std::string &amp;s, <span class="type">unsigned</span> n, <span class="type">double</span> p) :</span><br><span class="line">                <span class="built_in">bookNo</span>(s), <span class="built_in">unit_sold</span>(n), <span class="built_in">revenue</span>(p * n)&#123; &#125;</span><br><span class="line">    <span class="comment">//委托构造            </span></span><br><span class="line"><span class="built_in">Sales_data</span>() : <span class="built_in">Sales_data</span>(<span class="string">&quot;&quot;</span>, <span class="number">0</span>, <span class="number">0</span>) &#123; &#125;</span><br><span class="line">    <span class="built_in">Sales_data</span>(<span class="type">const</span> std::string &amp;s) : <span class="built_in">Sales_data</span>(s, <span class="number">0</span>, <span class="number">0</span>) &#123; &#125;</span><br><span class="line">    <span class="built_in">Sales_data</span>(std::istream &amp;is) : <span class="built_in">Sales_data</span>() &#123; <span class="built_in">read</span>(is, *<span class="keyword">this</span>); &#125;</span><br><span class="line">    <span class="comment">//省略</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>当一个构造函数委托给了另一个构造函数，受委托的构造函数的初始化列表和函数体会被再次执行。</p><h3 id="8-7-2-默认构造函数">8.7.2 默认构造函数</h3><h4 id="8-7-2-1-默认构造函数的作用">8.7.2.1 默认构造函数的作用</h4><p>我们声明一个有参数的构造函数，而不声明默认构造函数（这样让编译器不能合成默认编译函数）：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">NoDefault</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">NoDefault</span>(<span class="type">const</span> std::string);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>一旦我们使用了默认初始化，但因为没有默认构造函数，就会出现错误：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">A</span> &#123;</span><br><span class="line">    NoDefault mem;</span><br><span class="line">&#125;;</span><br><span class="line">A a;<span class="comment">//报错，为A合成默认构造函数失败，NoDefault没有默认构造函数</span></span><br></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">NoDefault b;<span class="comment">//报错，NoDefault没有默认构造函数</span></span><br></pre></td></tr></table></figure><h4 id="8-7-2-2-使用默认构造函数">8.7.2.2 使用默认构造函数</h4><p>下面的声明可以通过编译器：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">Sales_data <span class="title">obj</span><span class="params">()</span></span>;</span><br><span class="line">   cout&lt;&lt; obj.<span class="built_in">id</span>() &lt;&lt; endl;<span class="comment">//报错，obj是一个函数</span></span><br></pre></td></tr></table></figure><p>但我们试图使用<code>obj</code>时，编译器就报错了。因为此时编译器把<code>Sales_data obj();</code>理解为声明返回类型<code>Sales_data</code>的函数<code>obj</code><br>故，正确的默认初始化的声明对象的方法，就是去掉括号：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Sales_data obj;</span><br></pre></td></tr></table></figure><h3 id="8-7-3-隐式的类类型转换">8.7.3 隐式的类类型转换</h3><h4 id="8-7-3-1-转换构造函数">8.7.3.1 转换构造函数</h4><p>之前说过C++语言在内置类型之间定义了几种自动转换规则。一样的，我们也能为类定义这些隐式转换规则。<br>如果构造函数只接受一个实参，则它实际上定义了转换为此类类型的隐式转换机制，这种构造函数，我们就叫做转换构造函数。（关于将类类型转换为其他类类型的转换规则，笔者也将在之后的章节介绍）</p><p>还记得我们的<code>Sales_data</code>的两条构造函数吗：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Sales_data</span>(<span class="type">const</span> std::string &amp;s) : <span class="built_in">Sales_data</span>(s, <span class="number">0</span>, <span class="number">0</span>) &#123; &#125;</span><br><span class="line">   <span class="built_in">Sales_data</span>(std::istream &amp;is) : <span class="built_in">Sales_data</span>() &#123; <span class="built_in">read</span>(is, *<span class="keyword">this</span>); &#125;</span><br></pre></td></tr></table></figure><p>它们只接受一个参数，在<code>Sales_data</code>类中，参数为<code>string &amp;</code>和<code>istream &amp;</code>的构造函数分别定义了从这两种类型向<code>Sales_data</code>隐式转换的规则。<br>举个例子，你回忆我们的成员<code>combine</code>，它只接受<code>Sales_data</code>类型的实参：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">Sales_data&amp; <span class="title">combine</span> <span class="params">(<span class="type">const</span> Sales_data&amp;)</span></span>;</span><br></pre></td></tr></table></figure><p>而，我们将<code>string</code>类型赋值给它：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">std::string null_book = <span class="string">&quot;9-999-9999&quot;</span>;</span><br><span class="line">   Sales_data item;</span><br><span class="line">   item.<span class="built_in">combine</span>(null_book);</span><br><span class="line">   cout &lt;&lt; null_book &lt;&lt; endl;</span><br></pre></td></tr></table></figure><p>此时，调用合法。编译器为<code>string</code>类型创建了一个临时的<code>Sales_data</code>对象。</p><p>当然，我们也能用<code>istream</code>进行转换：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">item.<span class="built_in">combine</span>(cin);</span><br><span class="line">   <span class="built_in">print</span>(cout, item);</span><br></pre></td></tr></table></figure><p><code>cin</code>转换构造为临时<code>Sales_data</code>对象，并执行构造函数输入数据，之后临时<code>Sales_data</code>对象作为实参传入<code>combine</code>，在里面进行与<code>item</code>的相加，并返回<code>item</code>，之后临时量也就丢弃了。</p><h4 id="8-7-3-2-抑制构造函数的隐式转换">8.7.3.2 抑制构造函数的隐式转换</h4><p>当我们想抑制这种构造函数的隐式转换时，可以通过将构造函数声明为<code>explicit</code>加以阻止：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">explicit</span> <span class="title">Sales_data</span><span class="params">(<span class="type">const</span> std::string &amp;s)</span> : Sales_data(s, <span class="number">0</span>, <span class="number">0</span>) &#123;</span> &#125;</span><br><span class="line">   <span class="function"><span class="keyword">explicit</span> <span class="title">Sales_data</span><span class="params">(std::istream &amp;is)</span> : Sales_data() &#123;</span> <span class="built_in">read</span>(is, *<span class="keyword">this</span>); &#125;</span><br></pre></td></tr></table></figure><p>关键字<code>explicit</code>只对有一个实参的构造函数有效（废话），而且指定<code>explicit</code>应在类内声明构造函数时，在外类定义时不能重复。</p><p>发生隐式转换的另外一种情况就是执行拷贝形式的初始化时：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">std::string null_book = <span class="string">&quot;9-999-9999&quot;</span>;</span><br><span class="line">   <span class="function">Sales_data <span class="title">item1</span><span class="params">(null_book)</span></span>;</span><br><span class="line">   Sales_data item2 = null_book;<span class="comment">//报错，不能将explicit构造函数用于拷贝形式的初始化过程</span></span><br></pre></td></tr></table></figure><h4 id="8-7-3-3-显式转换构造函数">8.7.3.3 显式转换构造函数</h4><p>尽管编译器不会将<code>explicit</code>的构造函数直接用于隐式转换的过程，但我们可以用这样的构造函数显式地强制进行转换：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">std::string null_book = <span class="string">&quot;9-999-9999&quot;</span>;</span><br><span class="line">   Sales_data item;</span><br><span class="line">   item.<span class="built_in">combine</span>(<span class="built_in">static_cast</span>&lt;Sales_data&gt;(null_book));</span><br></pre></td></tr></table></figure><p>当然，其中的原理和隐式转换一样，都是临时量罢了。</p><h4 id="8-7-3-4-标准库中蕴含的单参构造">8.7.3.4 标准库中蕴含的单参构造</h4><p>我们使用过的标准库中就有这样的单参函数：</p><ul><li>接受一个<code>const char *</code>的string构造函数。不是<code>explicit</code>。（可以将<code>const char *</code>隐式转换为<code>string</code>临时量）</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">std::string <span class="title">s1</span> <span class="params">(<span class="string">&quot;hello world&quot;</span>)</span></span>;</span><br></pre></td></tr></table></figure><p>改写为：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">std::string s1 = <span class="string">&quot;hello world&quot;</span>;</span><br></pre></td></tr></table></figure><ul><li>接受一个容量参数的vector构造函数，是<code>explicit</code>。（抑制隐式转换）</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">std::vector&lt;<span class="type">int</span>&gt; <span class="title">iv</span><span class="params">(<span class="number">1</span>)</span></span>;</span><br></pre></td></tr></table></figure><p>改写为下面的赋值法，就会报错：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">std::vector&lt;<span class="type">int</span>&gt; iv = <span class="number">1</span>;<span class="comment">//报错</span></span><br></pre></td></tr></table></figure><h2 id="8-8-其他类">8.8 其他类</h2><h3 id="8-8-1-聚合类">8.8.1 聚合类</h3><p>聚合类，使得用户可以直接访问其成员（类似在C语言中的结构体），具有特殊的初始化语法形式。<br>当一个类满足这些条件，我们就说它是聚合的：</p><ul><li>所有成员<code>public</code></li><li>没有定义任何构造函数</li><li>没有类内初始值</li><li>没有基类，也没有<code>virtual</code>函数（笔者也将会在之后的篇章讲到）</li></ul><p>例如：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">Data</span> &#123;</span><br><span class="line">    <span class="type">int</span> ival;</span><br><span class="line">    string s;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>我们初始化它的时候，为它提供一个花括号，里面包含它的初始化列表成员：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Data val1 = &#123;<span class="number">0</span>, <span class="string">&quot;Rich&quot;</span>&#125;;</span><br></pre></td></tr></table></figure><p>当然，顺序很重要。当提供的初始化列表比实际成员少时（只能少，不能多），则靠后的成员被默认初始化。</p><h3 id="8-8-2-字面值常量类">8.8.2 字面值常量类</h3><p>之前我们提到过，constexpr函数的参数和返回值都是字面值类型。<br>（参考：<a href="http://c.biancheng.net/view/7781.html">C++11 constexpr</a>）</p><p>而也存在字面值常量类型的类，它是一个数据成员都是字面值类型的聚合类，或者满足以下要求：</p><ul><li>数据成员都必须是字面值类型</li><li>类必须至少有一个constexpr构造函数</li><li>如果一个数据成员含有类内初始值，则内置类型成员的初始值也必须是一条常量表达式；或者如果成员属于某种类类型，则初始值必须使用成员自己的constexpr构造函数。</li><li>类必须使用析构函数的默认定义，该成员负责销毁类的对象。</li></ul><p>尽管，构造函数不可能是const的（不然怎么初始化），但是字面值常量类的构造函数可以是constexpr函数。事实上，一个字面值常量类必须至少提供一个constexpr构造函数。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Debug</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">constexpr</span> <span class="title">Debug</span><span class="params">(<span class="type">bool</span> h, <span class="type">bool</span> i, <span class="type">bool</span> o)</span> : hw(h), io(i), other(o) &#123;</span> &#125;</span><br><span class="line">    <span class="function"><span class="keyword">constexpr</span> <span class="title">Debug</span><span class="params">(<span class="type">bool</span> b = <span class="literal">true</span>)</span> : Debug(b, b, b) &#123;</span> &#125;</span><br><span class="line">    <span class="function"><span class="keyword">constexpr</span> <span class="type">bool</span> <span class="title">any</span><span class="params">()</span> <span class="type">const</span> </span>&#123; <span class="keyword">return</span> hw || io || other; &#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">set_io</span><span class="params">(<span class="type">bool</span> b)</span> </span>&#123; io = b; &#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">set_hw</span><span class="params">(<span class="type">bool</span> b)</span> </span>&#123; hw = b; &#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">set_other</span><span class="params">(<span class="type">bool</span> b)</span> </span>&#123; other = b; &#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="type">bool</span> hw;    <span class="comment">//硬件错误</span></span><br><span class="line">    <span class="type">bool</span> io;    <span class="comment">//IO错误</span></span><br><span class="line">    <span class="type">bool</span> other; <span class="comment">//其他错误</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>回忆，constexpr函数特性：整个函数的函数体中，除了可以包含<code>using</code>指令、<code>typedef</code>语句以及<code>static_assert</code>断言外，只能包含一条<code>return</code>返回语句。而构造函数不含有返回值。故，我们的构造函数一般就是空函数体。<br>constexpr构造函数也必须初始化所有数据成员，初始值则要么是使用constexpr构造函数，要么是一条常量表达式。</p><p>constexpr构造函数用于生成constexpr对象以及constexpr函数的参数或者返回类型（因为这样的对象返回的指针也是const，故还要追加函数为const函数）：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">constexpr</span> Debug <span class="title">io_sub</span><span class="params">(<span class="literal">false</span>, <span class="literal">true</span>, <span class="literal">false</span>)</span></span>;<span class="comment">//调试IO</span></span><br><span class="line">   <span class="function"><span class="keyword">constexpr</span> Debug <span class="title">prod</span><span class="params">(<span class="literal">false</span>, <span class="literal">false</span>, <span class="literal">false</span>)</span></span>;<span class="comment">//不调试</span></span><br><span class="line">   <span class="keyword">if</span>(io_sub.<span class="built_in">any</span>())    <span class="comment">//Condition is always true</span></span><br><span class="line">       std::cerr &lt;&lt; <span class="string">&quot;IO&quot;</span> &lt;&lt; endl;</span><br><span class="line">   <span class="keyword">if</span>(prod.<span class="built_in">any</span>())    <span class="comment">//Condition is always false</span></span><br><span class="line">       std::cerr &lt;&lt; <span class="string">&quot;No Debug&quot;</span> &lt;&lt; endl;</span><br></pre></td></tr></table></figure><h2 id="8-9-类的静态成员">8.9 类的静态成员</h2><h3 id="8-9-1-声明和使用静态成员">8.9.1 声明和使用静态成员</h3><p>有时候，类需要它的一些成员与类本身有关，而不是和类的各个对象保持关联。<br>好比，一个银行账户类可能需要一个数据成员来表示当前基准利率，没必要每个成员都存储利率信息，而且一旦利率浮动，我们希望每个成员都能使用新值。</p><p>我们使用关键字<code>static</code>使得其与类相关联，当然，静态成员也可以选择<code>public</code>或者<code>private</code>。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Account</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="keyword">typedef</span> <span class="type">double</span> Money;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">calculate</span><span class="params">()</span> </span>&#123; amount += amount * interestRate; &#125;</span><br><span class="line">    <span class="function"><span class="type">static</span> Money <span class="title">rate</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> interestRate; &#125;</span><br><span class="line">    <span class="function"><span class="type">static</span> <span class="type">void</span> <span class="title">rate</span><span class="params">(Money)</span></span>;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    std::string owner;</span><br><span class="line">    Money amount;</span><br><span class="line">    <span class="type">static</span> Money interestRate;</span><br><span class="line">    <span class="function"><span class="type">static</span> Money <span class="title">initRate</span><span class="params">()</span></span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>类的静态成员存在于任何对象之中，全部的对象也只有一个<code>interestRate</code>。<br>类似的，静态成员函数也不与任何对象绑定在一起，它们都不含有<code>this</code>指针。（所以，静态成员函数不能是<code>const</code>，我们也不能在其中使用<code>this</code>，无论隐式还是显式地使用）</p><p>我们使用作用域运算符直接访问静态成员：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Account::Money r;</span><br><span class="line">r = Account::<span class="built_in">rate</span>();</span><br></pre></td></tr></table></figure><p>类的静态成员不属于类的某个对象，但是我们仍然可以使用类的对象、引用或者指针来访问静态成员：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Account ac1;</span><br><span class="line">   Account *p_ac = &amp;ac1;</span><br><span class="line">   r = ac1.<span class="built_in">rate</span>();</span><br><span class="line">   r = p_ac-&gt;<span class="built_in">rate</span>();</span><br></pre></td></tr></table></figure><p>当然，刚刚你也注意到了<code>void calculate() &#123; amount += amount * interestRate; &#125;</code>成员函数不用使用作用域运算符就能直接使用静态成员。<br>仿佛，除了大家共用一个成员外，使用上无大区别。</p><h3 id="8-9-2-定义和初始化静态成员">8.9.2 定义和初始化静态成员</h3><p>我们在类外定义静态成员函数时，就不能再重复<code>static</code>：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">Account::rate</span><span class="params">(Money newRate)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    interestRate = newRate;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>因为静态成员不属于类的任何一个对象，所以它们并不是再创建类的对象时被定义的。这意味着它们也不会由构造函数初始化。而且一般来说，我们也不能再类内初始化静态成员。<br>静态成员一旦被定义，它就存在于程序的整个生命周期中了。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Account::Money Account::interestRate = <span class="built_in">initRate</span>();</span><br></pre></td></tr></table></figure><p>类型为<code>Money</code>的静态成员<code>interestRate</code>被我们在类外用成员<code>initRate</code>进行初始化（初始化时就是一种定义了）。</p><p>不过，当静态成员为字面值常量类型constexpr时，我们就可以在类内进行初始化。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Account</span> &#123;</span><br><span class="line"><span class="comment">//省略</span></span><br><span class="line">    <span class="type">static</span> <span class="keyword">constexpr</span> <span class="type">int</span> period = <span class="number">30</span>;</span><br><span class="line">    Money daily_tbl[period];</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>当然，这里就已经包含了定义了（<code>= 30</code>），当我们在类外再进行定义就会重复。</p><h3 id="8-9-3-静态成员能用于特殊场合">8.9.3 静态成员能用于特殊场合</h3><h4 id="8-9-3-1-静态成员可以是不完全类型">8.9.3.1 静态成员可以是不完全类型</h4><p>前面说过，当类里不能声明本身类的数据成员，是因为编译器在读到这行时，还未完全编译整个类，而无法为这个数据分配存储空间：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Bar</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="type">static</span> Bar mem1;<span class="comment">//静态类型可以说不完全类型</span></span><br><span class="line">    Bar *mem2;<span class="comment">//指针成员可以是不完全类型</span></span><br><span class="line">    Bar mem3;   <span class="comment">//报错，数据成员必须是完成类型</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>但静态类型和指针（或引用）则不会受到限制。</p><h4 id="8-9-3-2-静态成员可以做默认实参">8.9.3.2 静态成员可以做默认实参</h4><p>静态成员和普通成员还有一个区别，就是我们可以使用静态成员作为默认实参：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Screen</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">Screen&amp; <span class="title">clear</span><span class="params">(<span class="type">char</span> = background)</span></span>;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="type">static</span> <span class="type">char</span> background;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>非静态成员则不能作为默认实参，因为它的值本身就是对象的一部分，这么做的结果是无法真正提供一个对象以便从中获取成员的值，最终将引发错误的！</p>]]></content>
      
      
      <categories>
          
          <category> 跟我一起从C到C++ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> c++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【Linux C/C++】 实现ls -R的命令</title>
      <link href="/2023/02/03/ProgramLog/%5BLinux%20C!C++%5D%20%E5%AE%9E%E7%8E%B0ls%20-R%E7%9A%84%E5%91%BD%E4%BB%A4/"/>
      <url>/2023/02/03/ProgramLog/%5BLinux%20C!C++%5D%20%E5%AE%9E%E7%8E%B0ls%20-R%E7%9A%84%E5%91%BD%E4%BB%A4/</url>
      
        <content type="html"><![CDATA[<span id="more"></span><h3 id="文章目录">文章目录</h3><ul><li><a href="#%E4%B8%80%E8%AF%BB%E5%8F%96%E7%9B%AE%E5%BD%95">一、读取目录</a></li><li><a href="#%E4%BA%8C%E5%88%86%E6%9E%90%E9%80%89%E9%A1%B9">二、分析选项</a></li><li><a href="#%E4%B8%89%E9%80%92%E5%BD%92%E5%AE%9E%E7%8E%B0-r">三、递归实现-R</a></li><li><a href="#%E5%9B%9B%E8%BE%93%E5%87%BA%E9%A2%9C%E8%89%B2">四、输出颜色</a></li></ul><p><strong>linux编程 实现ls -R的命令</strong></p><p>关于C++语言的基础知识可以点开笔者主页专栏【跟我一起从C到C++】<br>使用到的知识点：<br><a href="https://blog.csdn.net/DreamTrue520/article/details/128745843?spm=1001.2014.3001.5501">3.1.1 bool类型</a><br><a href="https://blog.csdn.net/DreamTrue520/article/details/128749214?spm=1001.2014.3001.5501">4.1 string</a><br><a href="https://blog.csdn.net/DreamTrue520/article/details/128773321?spm=1001.2014.3001.5501">6.2 异常处理</a></p><p><code>ls</code>命令，想必大家在使用Linux时，都感觉十分亲切，日常必用命令之一：<br><img src="https://img-blog.csdnimg.cn/c4cf499dbb954fd3b00f8a0baafc15aa.png#pic_center" alt=""><br>它可以罗列文件夹和文件，让人们更加清晰地管理自己的文件。</p><p>而<code>ls \-R</code>更是夸张，可以将每个文件夹下的文件（以及文件夹下的文件夹，无限套娃）都列出来：<br><img src="https://img-blog.csdnimg.cn/3dfcb84cf50242c99572b262c6d22151.png#pic_center" alt=""></p><h1 id="一-读取目录">一、读取目录</h1><p>实现<code>ls</code>的第一步就是读取目录</p><p>读取目录之前，肯定要先打开目录：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">DIR * <span class="title">opendir</span><span class="params">(<span class="type">const</span> <span class="type">char</span> * name)</span></span>;</span><br></pre></td></tr></table></figure><p><code>opendir</code>用来打开参数<code>name</code>指定的目录, 并返回<code>DIR*</code>形态的目录流, 和<code>open</code>（老朋友了）类似, 接下来对目录的读取和搜索都要使用此返回值。</p><p>参阅资料，我们知道了<code>readdir</code>函数可以实现读取目录的功能，于是我们<code>man readdir</code>：<br><img src="https://img-blog.csdnimg.cn/43b419397cd24fd4aa11641719461e5a.png#pic_center" alt=""><br><code>readdir</code>返回值：成功则返回下个目录进入点；有错误发生或读取到目录文件尾则返回<code>NULL</code>。<br><code>dirent</code>定义如下：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">dirent</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">ino_t</span> d_ino; <span class="comment">//d_ino 此目录进入点的inode</span></span><br><span class="line">    <span class="type">ff_t</span> d_off; <span class="comment">//d_off 目录文件开头至此目录进入点的位移</span></span><br><span class="line">    <span class="type">signed</span> <span class="type">short</span> <span class="type">int</span> d_reclen; <span class="comment">//d_reclen _name 的长度, 不包含NULL 字符</span></span><br><span class="line">    <span class="type">unsigned</span> <span class="type">char</span> d_type; <span class="comment">//d_type d_name 所指的文件类型 d_name 文件名</span></span><br><span class="line">    har d_name[<span class="number">256</span>];</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><code>dirent</code>的成员<code>d_name</code>即是文件/文件夹名称，我们即将用到。</p><p>我们先引入头文件</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;dirent.h&gt;</span></span></span><br></pre></td></tr></table></figure><p>我们编写一个读取目录：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">std::string file_name;</span><br><span class="line">cin &gt;&gt; file_name;</span><br><span class="line">DIR   *dir;</span><br><span class="line">dir = <span class="built_in">opendir</span>(file_name.<span class="built_in">c_str</span>());</span><br><span class="line"><span class="keyword">if</span>(dir == <span class="literal">nullptr</span>)</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;opendir is NULL&quot;</span> &lt;&lt; endl;</span><br><span class="line"><span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">dirent *dp;</span><br><span class="line">   <span class="keyword">while</span> ((dp = <span class="built_in">readdir</span>(dir)) != <span class="literal">nullptr</span>)</span><br><span class="line">   &#123;</span><br><span class="line">       cout &lt;&lt; dp-&gt;d_name &lt;&lt; endl;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="built_in">closedir</span>(dir);</span><br><span class="line">   <span class="keyword">return</span> <span class="number">0</span>;</span><br></pre></td></tr></table></figure><p>我们再进行一次封装，并用上错误检测和处理：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdexcept&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> std::runtime_error;</span><br></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">DIR *<span class="title">My_OpenDir</span><span class="params">(<span class="type">const</span> <span class="type">char</span> *path)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    DIR *dir;</span><br><span class="line">    <span class="keyword">try</span></span><br><span class="line">    &#123;</span><br><span class="line">        dir = <span class="built_in">opendir</span>(path);</span><br><span class="line">        <span class="keyword">if</span> (dir == <span class="literal">nullptr</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="built_in">runtime_error</span>(<span class="string">&quot;opendir error: DIR* is NULL&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">catch</span>(<span class="type">const</span> std::exception&amp; e)</span><br><span class="line">    &#123;</span><br><span class="line">        std::cerr &lt;&lt; e.<span class="built_in">what</span>() &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">nullptr</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> dir;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们再引入头文件</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdlib&gt;</span></span></span><br></pre></td></tr></table></figure><p>这样就能用<code>return EXIT_SUCCESS;</code>表示成功结束<br>而<code>return EXIT_FAILURE;</code>表示错误结束<br>于是：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">DIR *dir;</span><br><span class="line">    dir = <span class="built_in">My_OpenDir</span>(file_name.<span class="built_in">c_str</span>());</span><br><span class="line">    <span class="keyword">if</span> (dir == <span class="literal">nullptr</span>) <span class="keyword">goto</span> fail_opendir;</span><br><span class="line"></span><br><span class="line">    dirent *dp;</span><br><span class="line">    <span class="keyword">while</span> ((dp = <span class="built_in">readdir</span>(dir)) != <span class="literal">NULL</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt; dp-&gt;d_name &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">closedir</span>(dir);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> EXIT_SUCCESS;</span><br><span class="line"></span><br><span class="line">fail_opendir:</span><br><span class="line">    <span class="keyword">return</span> EXIT_FAILURE;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="二-分析选项">二、分析选项</h1><p><code>getopt</code> 方法是用来分析命令行参数的，该方法由Linux标准库提供，包含在<code>&lt;unistd.h&gt;</code>头文件中。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">getopt</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span> * <span class="type">const</span> argv[], <span class="type">const</span> <span class="type">char</span> *optstring)</span></span>;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">extern</span> <span class="type">char</span> *optarg;</span><br><span class="line"><span class="keyword">extern</span> <span class="type">int</span> optind, opterr, optopt;</span><br></pre></td></tr></table></figure><p><code>getopt</code>参数说明：<br><code>argc</code>：通常由 <code>main</code> 函数直接传入，表示参数的数量<br><code>argv</code>：通常也由 <code>main</code> 函数直接传入，表示参数的字符串变量数组<br><code>optstring</code>：一个包含正确的参数选项字符串，用于参数的解析。例如 <code>“abc:”</code>，其中 <code>-a</code>，<code>-b</code> 就表示两个普通选项，<code>-c</code> 表示一个必须有参数的选项，因为它后面有一个冒号</p><p>外部变量说明：<br><code>optarg</code>：如果某个选项有参数，这包含当前选项的参数字符串<br><code>optind</code>：<code>argv</code> 的当前索引值<br><code>opterr</code>：正常运行状态下为 <code>0</code>。非零时表示存在无效选项或者缺少选项参数，并输出其错误信息<br><code>optopt</code>：当发现无效选项字符时，即 <code>getopt</code>方法返回 <code>?</code> 字符，<code>optopt</code> 中包含的就是发现的无效选项字符。</p><p>故，我们引入头文件：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unistd.h&gt;</span> </span></span><br></pre></td></tr></table></figure><p>使用<code>bool</code>类型的真假表示某个选项是否被输入：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">option_t</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">bool</span> R = <span class="literal">false</span>;</span><br><span class="line">    <span class="type">bool</span> help = <span class="literal">false</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="type">option_t</span> opt;</span><br></pre></td></tr></table></figure><p>编写函数：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">analyseOpt</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span>* argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">try</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">char</span> c;</span><br><span class="line">        <span class="keyword">while</span>((c = <span class="built_in">getopt</span>(argc, argv, <span class="string">&quot;Rh&quot;</span>)) != <span class="number">-1</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">switch</span> (c) </span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">&#x27;R&#x27;</span>:</span><br><span class="line">                    opt.R = <span class="literal">true</span>;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">&#x27;h&#x27;</span>:</span><br><span class="line">                    opt.help = <span class="literal">true</span>;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">default</span>:</span><br><span class="line">                    <span class="keyword">throw</span> <span class="built_in">runtime_error</span>(<span class="string">&quot;Unknown options:&quot;</span> + std::<span class="built_in">string</span>(<span class="number">1</span>, optopt));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">catch</span>(<span class="type">const</span> std::exception&amp; e)</span><br><span class="line">    &#123;</span><br><span class="line">        std::cerr &lt;&lt; <span class="string">&quot;Error &quot;</span> &lt;&lt; e.<span class="built_in">what</span>() &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">        <span class="keyword">goto</span> fail_opt;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> EXIT_SUCCESS;</span><br><span class="line">fail_opt:</span><br><span class="line">    <span class="keyword">return</span> EXIT_FAILURE;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>于是我们编写我们的<code>main</code>函数，提前用<code>ls_help()</code>（一般不会出错，故不添加错误检测和处理，返回值为<code>void</code>）和<code>ls_R()</code>占好位置，搭好框架：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;dirent.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdexcept&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unistd.h&gt;</span> </span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> std::runtime_error;</span><br><span class="line"><span class="keyword">using</span> std::cout;    <span class="keyword">using</span> std::endl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">option_t</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">bool</span> R = <span class="literal">false</span>;</span><br><span class="line">    <span class="type">bool</span> help = <span class="literal">false</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="type">option_t</span> opt;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">analyseOpt</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span>* argv[])</span></span>;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">ls_help</span><span class="params">()</span></span>;<span class="comment">//还没想好，未定义</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">ls_R</span><span class="params">()</span></span>;<span class="comment">//还没想好，未定义，参数也没有添加</span></span><br><span class="line"><span class="function">DIR *<span class="title">My_OpenDir</span><span class="params">(<span class="type">const</span> <span class="type">char</span> *path)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span> **argv)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    std::string file_name;</span><br><span class="line">    <span class="type">bool</span> exist_dir = <span class="literal">false</span>;<span class="comment">//用户是否提供目录</span></span><br><span class="line">    <span class="keyword">if</span>(<span class="built_in">analyseOpt</span>(argc, argv) != EXIT_SUCCESS)</span><br><span class="line">        <span class="keyword">goto</span> fail_analyseOpt;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">size_t</span> i = <span class="number">1</span>; i &lt; argc; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(argv[i][<span class="number">0</span>] == <span class="string">&#x27;-&#x27;</span>)</span><br><span class="line">            <span class="keyword">continue</span>;<span class="comment">//假如是选项就下一个</span></span><br><span class="line">        exist_dir = <span class="literal">true</span>;<span class="comment">//发现了目录</span></span><br><span class="line">        file_name = argv[i];<span class="comment">//把目录给file_name</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (opt.help)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">ls_help</span>();</span><br><span class="line">        <span class="keyword">return</span> EXIT_SUCCESS;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> (!exist_dir)</span><br><span class="line">    &#123;</span><br><span class="line">        file_name = <span class="string">&quot;.&quot;</span>;<span class="comment">//没有提供目录，就当前目录</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (opt.R)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="built_in">ls_R</span>() == EXIT_SUCCESS)</span><br><span class="line">            <span class="keyword">return</span> EXIT_SUCCESS;</span><br><span class="line">        <span class="keyword">else</span> </span><br><span class="line">            <span class="keyword">return</span> EXIT_FAILURE;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    DIR *dir;</span><br><span class="line">    dir = <span class="built_in">My_OpenDir</span>(file_name.<span class="built_in">c_str</span>());</span><br><span class="line">    <span class="keyword">if</span> (dir == <span class="literal">nullptr</span>) <span class="keyword">goto</span> fail_opendir;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    dirent *dp;</span><br><span class="line">    <span class="keyword">while</span> ((dp = <span class="built_in">readdir</span>(dir)) != <span class="literal">NULL</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt; dp-&gt;d_name &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">closedir</span>(dir);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> EXIT_SUCCESS;</span><br><span class="line"></span><br><span class="line">fail_opendir:</span><br><span class="line">fail_analyseOpt:</span><br><span class="line">    <span class="keyword">return</span> EXIT_FAILURE;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">DIR *<span class="title">My_OpenDir</span><span class="params">(<span class="type">const</span> <span class="type">char</span> *path)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    DIR *dir;</span><br><span class="line">    <span class="keyword">try</span></span><br><span class="line">    &#123;</span><br><span class="line">        dir = <span class="built_in">opendir</span>(path);</span><br><span class="line">        <span class="keyword">if</span> (dir == <span class="literal">nullptr</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="built_in">runtime_error</span>(<span class="string">&quot;opendir error: DIR* is NULL&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">catch</span>(<span class="type">const</span> std::exception&amp; e)</span><br><span class="line">    &#123;</span><br><span class="line">        std::cerr &lt;&lt; e.<span class="built_in">what</span>() &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">nullptr</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> dir;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">analyseOpt</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span>* argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">try</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">char</span> c;</span><br><span class="line">        <span class="keyword">while</span>((c = <span class="built_in">getopt</span>(argc, argv, <span class="string">&quot;Rh&quot;</span>)) != <span class="number">-1</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">switch</span> (c) </span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">&#x27;R&#x27;</span>:</span><br><span class="line">                    opt.R = <span class="literal">true</span>;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">&#x27;h&#x27;</span>:</span><br><span class="line">                    opt.help = <span class="literal">true</span>;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">default</span>:</span><br><span class="line">                    <span class="keyword">throw</span> <span class="built_in">runtime_error</span>(<span class="string">&quot;Unknown options:&quot;</span> + std::<span class="built_in">string</span>(<span class="number">1</span>, optopt));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">catch</span>(<span class="type">const</span> std::exception&amp; e)</span><br><span class="line">    &#123;</span><br><span class="line">        std::cerr &lt;&lt; <span class="string">&quot;Error &quot;</span> &lt;&lt; e.<span class="built_in">what</span>() &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">        <span class="keyword">goto</span> fail_opt;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> EXIT_SUCCESS;</span><br><span class="line">fail_opt:</span><br><span class="line">    <span class="keyword">return</span> EXIT_FAILURE;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>因为<code>-h</code>提供帮助信息这里比较简单，故可以里面完成：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">ls_help</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;help:\n&quot;</span> </span><br><span class="line">             &lt;&lt; <span class="string">&quot;-h         help&quot;</span> &lt;&lt; <span class="string">&quot;\n&quot;</span></span><br><span class="line">             &lt;&lt; <span class="string">&quot;-r         list dir&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="三-递归实现-r">三、递归实现-R</h1><p>我们可以编写一个一直检测当前目录<code>path</code>的函数，它第一次先遍历整个目录流并展示名字，第二次则开始判断目录流的类型，如果是文件就跳过，如果是文件夹<code>name</code>就修改路径为<code>path/name</code>，并递归调用函数。</p><p>查阅资料得知<code>stat</code>能获取与文件系统及文件相关的许多信息，位于<code>&lt;sys/stat.h&gt;</code>头文件的它拥有结构：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">stat</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">dev_t</span>     st_dev;     <span class="comment">/* ID of device containing file */</span>文件使用的设备号</span><br><span class="line">    <span class="type">ino_t</span>     st_ino;     <span class="comment">/* inode number */</span>    索引节点号 </span><br><span class="line">    <span class="type">mode_t</span>    st_mode;    <span class="comment">/* protection */</span>  文件对应的模式，文件，目录等</span><br><span class="line">    <span class="type">nlink_t</span>   st_nlink;   <span class="comment">/* number of hard links */</span>    文件的硬连接数  </span><br><span class="line">    <span class="type">uid_t</span>     st_uid;     <span class="comment">/* user ID of owner */</span>    所有者用户识别号</span><br><span class="line">    <span class="type">gid_t</span>     st_gid;     <span class="comment">/* group ID of owner */</span>   组识别号  </span><br><span class="line">    <span class="type">dev_t</span>     st_rdev;    <span class="comment">/* device ID (if special file) */</span> 设备文件的设备号</span><br><span class="line">    <span class="type">off_t</span>     st_size;    <span class="comment">/* total size, in bytes */</span> 以字节为单位的文件容量   </span><br><span class="line">    <span class="type">blksize_t</span> st_blksize; <span class="comment">/* blocksize for file system I/O */</span> 包含该文件的磁盘块的大小   </span><br><span class="line">    <span class="type">blkcnt_t</span>  st_blocks;  <span class="comment">/* number of 512B blocks allocated */</span> 该文件所占的磁盘块  </span><br><span class="line">    <span class="type">time_t</span>    st_atime;   <span class="comment">/* time of last access */</span> 最后一次访问该文件的时间   </span><br><span class="line">    <span class="type">time_t</span>    st_mtime;   <span class="comment">/* time of last modification */</span> /最后一次修改该文件的时间   </span><br><span class="line">    <span class="type">time_t</span>    st_ctime;   <span class="comment">/* time of last status change */</span> 最后一次改变该文件状态的时间   </span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>我们用<code>stat</code>函数或者<code>lstat</code>函数来获取linux操作系统下文件的属性。<br><code>stat</code>函数和<code>lstat</code>函数的区别:</p><ul><li>对于普通文件, 这两个函数没有区别, 是一样的.</li><li>对于连接文件,调用lstat函数获取的是链接文件本身的属性信息;而stat函数获取的是链接文件指向的文件的属性信息</li></ul><p>这里就主要介绍一下<code>stat</code>：<br>函数原型： <code>int stat(const char *pathname,struct stat *buf);</code></p><p>参数：第一个参数为传入参数，<code>pathname</code>为文件的绝对路径或相对路径。第二参数为传出参数，一个<code>struct stat</code>类型的结构体指针。传出参数可以采用下边两种方法，定义结构体变量<code>struct stat st</code>,或定义结构体指针变量<code>strut stat *st = &amp;st</code>(注意这里一定要进行初始化，说明其为一块有效的内存空间)，相对而言，使用结构体变量更为方便。</p><p>参考：<br><a href="https://blog.csdn.net/asjbfjsb/article/details/80295375">linux系统调用函数 lstat–获取文件属性</a></p><p><code>stat</code>结构中的<code>st_mode</code> 则定义了下列情况：（可以使用类似<code>if (s.st_mode &amp; S_IXUSR)</code>这样的方式）</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">st_mode的情况：</span><br><span class="line"> S_IFMT   <span class="number">0170000</span>    文件类型的位遮罩</span><br><span class="line">    S_IFSOCK <span class="number">0140000</span>    套接字</span><br><span class="line">    S_IFLNK <span class="number">0120000</span>     符号连接</span><br><span class="line">    S_IFREG <span class="number">0100000</span>     一般文件</span><br><span class="line">    S_IFBLK <span class="number">0060000</span>     区块装置</span><br><span class="line">    S_IFDIR <span class="number">0040000</span>     目录</span><br><span class="line">    S_IFCHR <span class="number">0020000</span>     字符装置</span><br><span class="line">    S_IFIFO <span class="number">0010000</span>     先进先出</span><br><span class="line">​</span><br><span class="line">    S_ISUID <span class="number">04000</span>     文件的(set user-id on execution)位</span><br><span class="line">    S_ISGID <span class="number">02000</span>     文件的(set group-id on execution)位</span><br><span class="line">    S_ISVTX <span class="number">01000</span>     文件的sticky位</span><br><span class="line">​</span><br><span class="line">    <span class="built_in">S_IRUSR</span>(S_IREAD) <span class="number">00400</span>     文件所有者具可读取权限</span><br><span class="line">    <span class="built_in">S_IWUSR</span>(S_IWRITE)<span class="number">00200</span>     文件所有者具可写入权限</span><br><span class="line">    <span class="built_in">S_IXUSR</span>(S_IEXEC) <span class="number">00100</span>     文件所有者具可执行权限</span><br><span class="line">​</span><br><span class="line">    S_IRGRP <span class="number">00040</span>             用户组具可读取权限</span><br><span class="line">    S_IWGRP <span class="number">00020</span>             用户组具可写入权限</span><br><span class="line">    S_IXGRP <span class="number">00010</span>             用户组具可执行权限</span><br><span class="line">​</span><br><span class="line">    S_IROTH <span class="number">00004</span>             其他用户具可读取权限</span><br><span class="line">    S_IWOTH <span class="number">00002</span>             其他用户具可写入权限</span><br><span class="line">    S_IXOTH <span class="number">00001</span>             其他用户具可执行权限</span><br><span class="line">​</span><br><span class="line">    上述的文件类型在POSIX中定义了检查这些类型的宏定义：</span><br><span class="line">    <span class="built_in">S_ISLNK</span> (st_mode)    判断是否为符号连接</span><br><span class="line">    <span class="built_in">S_ISREG</span> (st_mode)    是否为一般文件</span><br><span class="line">    <span class="built_in">S_ISDIR</span> (st_mode)    是否为目录</span><br><span class="line">    <span class="built_in">S_ISCHR</span> (st_mode)    是否为字符装置文件</span><br><span class="line">    <span class="built_in">S_ISBLK</span> (s3e)        是否为先进先出</span><br><span class="line">    <span class="built_in">S_ISSOCK</span> (st_mode)   是否为socket</span><br><span class="line">    若一目录具有sticky位(S_ISVTX)，则表示在此目录下的文件只能被该文件所有者、此目录所有者或root来删除或改名，在linux中，最典型的就是这个/tmp目录啦。</span><br></pre></td></tr></table></figure><p>注意，在linux操作系统下，一切皆文件。文件共有七种类型，分别是普通文件、目录文件、管道文件、可执行文件、压缩文件、设备文件（字符、管道和块）和其他文件。</p><p>参见：<br><a href="https://blog.csdn.net/qq_40839779/article/details/82789217">Linux系统函数之文件系统管理（二）<br></a></p><p>而我们主要使用<code>S_ISDIR()</code>，判断其是否为目录文件：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">ls_R</span><span class="params">(std::string path)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//普通的罗列目录</span></span><br><span class="line">    cout &lt;&lt; path + <span class="string">&quot;:&quot;</span>&lt;&lt;endl;</span><br><span class="line">    DIR *dir;</span><br><span class="line">    dir = <span class="built_in">My_OpenDir</span>(path.<span class="built_in">c_str</span>());</span><br><span class="line">    <span class="keyword">if</span> (dir == <span class="literal">nullptr</span>) <span class="keyword">goto</span> fail_Myopendir1;</span><br><span class="line">    dirent *dp;</span><br><span class="line">    <span class="keyword">while</span> ((dp = <span class="built_in">readdir</span>(dir)) != <span class="literal">NULL</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (dp-&gt;d_name[<span class="number">0</span>] == <span class="string">&#x27;.&#x27;</span>)</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        cout &lt;&lt; dp-&gt;d_name &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">closedir</span>(dir);</span><br><span class="line"><span class="comment">//检查是否为目录，是就更改路径，递归调用</span></span><br><span class="line">    dir = <span class="built_in">My_OpenDir</span>(path.<span class="built_in">c_str</span>());</span><br><span class="line">    <span class="keyword">if</span> (dir == <span class="literal">nullptr</span>) <span class="keyword">goto</span> fail_Myopendir2;</span><br><span class="line">    <span class="keyword">while</span> ((dp = <span class="built_in">readdir</span>(dir)) != <span class="literal">NULL</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (dp-&gt;d_name[<span class="number">0</span>] == <span class="string">&#x27;.&#x27;</span>)</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        <span class="keyword">struct</span> <span class="title class_">stat</span> file_stat;</span><br><span class="line">        std::string temp;</span><br><span class="line">        temp = path + <span class="string">&quot;/&quot;</span> + dp-&gt;d_name;<span class="comment">//更改路径</span></span><br><span class="line">        <span class="keyword">try</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="built_in">stat</span>(temp.<span class="built_in">c_str</span>(), &amp;file_stat) == <span class="number">-1</span>)</span><br><span class="line">                <span class="keyword">throw</span> <span class="built_in">runtime_error</span>(temp + <span class="string">&quot;:get file stat error&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">catch</span>(<span class="type">const</span> std::exception&amp; e)</span><br><span class="line">        &#123;</span><br><span class="line">            std::cerr &lt;&lt; e.<span class="built_in">what</span>() &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">            <span class="keyword">goto</span> fail_getstat;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(<span class="built_in">S_ISDIR</span>(file_stat.st_mode))<span class="comment">//判断是否为目录，如果是目录就进入递归</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">ls_R</span>(temp);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">closedir</span>(dir);<span class="comment">//不要忘记关闭dir</span></span><br><span class="line">    <span class="keyword">return</span> EXIT_SUCCESS;</span><br><span class="line">fail_getstat:</span><br><span class="line">fail_Myopendir2:</span><br><span class="line">    <span class="built_in">closedir</span>(dir);   </span><br><span class="line">fail_Myopendir1:</span><br><span class="line">    <span class="keyword">return</span> EXIT_FAILURE;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="四-输出颜色">四、输出颜色</h1><p>我们仔细观察<code>ls</code>命令，发现不同文件类型有不同的颜色，笔者这里就举两个例子来实现：</p><ul><li>当文件为可执行文件时，它是亮绿色的</li><li>当文件为目录时，它是亮蓝色的</li></ul><p>具体颜色可以参考：<br><a href="https://blog.csdn.net/u014470361/article/details/81512330">超级终端的字体背景和颜色显示</a></p><p>调配颜色的方法就是：<br>输出一段咒语：<br>C语言</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\033[32m&quot;</span>);<span class="comment">//绿色</span></span><br></pre></td></tr></table></figure><p>或C++</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cout &lt;&lt; <span class="string">&quot;\033[1m\033[32m&quot;</span>;</span><br></pre></td></tr></table></figure><p>于是我们提前定义好宏：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> LightGreen &#123;cout &lt;&lt; <span class="string">&quot;\033[1m\033[32m&quot;</span> &lt;&lt; std::flush;&#125;</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> LightBlue &#123;cout &lt;&lt; <span class="string">&quot;\033[1m\033[34m&quot;</span> &lt;&lt; std::flush;&#125;</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> CLOSE &#123;cout &lt;&lt; <span class="string">&quot;\033[0m&quot;</span> &lt;&lt; std::flush;&#125;</span></span><br></pre></td></tr></table></figure><p>接着判断文件类型：<br>回顾 <a href="#st_mode">判断文件类型的方法</a></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(<span class="built_in">S_ISDIR</span>(file_stat.st_mode))<span class="comment">//判断是否为目录</span></span><br><span class="line">&#123;</span><br><span class="line">LightBlue;</span><br><span class="line">       cout &lt;&lt; dp-&gt;d_name &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">       CLOSE;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">else</span> <span class="keyword">if</span> (file_stat.st_mode &amp; S_IXUSR)<span class="comment">//如果是可执行文件</span></span><br><span class="line">   &#123;</span><br><span class="line">       LightGreen;</span><br><span class="line">       cout &lt;&lt; dp-&gt;d_name &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">       CLOSE;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">else</span>  </span><br><span class="line">       cout &lt;&lt; dp-&gt;d_name &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br></pre></td></tr></table></figure><p>结尾附上全文以供参考：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;dirent.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdexcept&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unistd.h&gt;</span> </span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/stat.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> LightGreen &#123;cout &lt;&lt; <span class="string">&quot;\033[1m\033[32m&quot;</span> &lt;&lt; std::flush;&#125;</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> LightBlue &#123;cout &lt;&lt; <span class="string">&quot;\033[1m\033[34m&quot;</span> &lt;&lt; std::flush;&#125;</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> CLOSE &#123;cout &lt;&lt; <span class="string">&quot;\033[0m&quot;</span> &lt;&lt; std::flush;&#125;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> std::runtime_error;</span><br><span class="line"><span class="keyword">using</span> std::cout;    <span class="keyword">using</span> std::endl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">option_t</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">bool</span> R = <span class="literal">false</span>;</span><br><span class="line">    <span class="type">bool</span> help = <span class="literal">false</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="type">option_t</span> opt;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">analyseOpt</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span>* argv[])</span></span>;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">ls_help</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">ls_R</span><span class="params">(std::string path)</span></span>;</span><br><span class="line"><span class="function">DIR *<span class="title">My_OpenDir</span><span class="params">(<span class="type">const</span> <span class="type">char</span> *path)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span> **argv)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    std::string file_name;</span><br><span class="line">    <span class="type">bool</span> exist_dir = <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">if</span>(<span class="built_in">analyseOpt</span>(argc, argv) != EXIT_SUCCESS)</span><br><span class="line">        <span class="keyword">goto</span> fail_analyseOpt;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">size_t</span> i = <span class="number">1</span>; i &lt; argc; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(argv[i][<span class="number">0</span>] == <span class="string">&#x27;-&#x27;</span>)</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        exist_dir = <span class="literal">true</span>;</span><br><span class="line">        file_name = argv[i];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (opt.help)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">ls_help</span>();</span><br><span class="line">        <span class="keyword">return</span> EXIT_SUCCESS;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> (!exist_dir)</span><br><span class="line">    &#123;</span><br><span class="line">        file_name = <span class="string">&quot;.&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (opt.R)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="built_in">ls_R</span>(file_name) == EXIT_SUCCESS)</span><br><span class="line">            <span class="keyword">return</span> EXIT_SUCCESS;</span><br><span class="line">        <span class="keyword">else</span> </span><br><span class="line">            <span class="keyword">return</span> EXIT_FAILURE;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    DIR *dir;</span><br><span class="line">    dir = <span class="built_in">My_OpenDir</span>(file_name.<span class="built_in">c_str</span>());</span><br><span class="line">    <span class="keyword">if</span> (dir == <span class="literal">nullptr</span>) <span class="keyword">goto</span> fail_opendir;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    dirent *dp;</span><br><span class="line">    <span class="keyword">while</span> ((dp = <span class="built_in">readdir</span>(dir)) != <span class="literal">NULL</span>)</span><br><span class="line">    &#123;</span><br><span class="line">         <span class="keyword">if</span> (dp-&gt;d_name[<span class="number">0</span>] == <span class="string">&#x27;.&#x27;</span>)</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        <span class="keyword">struct</span> <span class="title class_">stat</span> file_stat;</span><br><span class="line">        std::string temp;</span><br><span class="line">        temp = file_name + <span class="string">&quot;/&quot;</span> + dp-&gt;d_name;</span><br><span class="line">        <span class="keyword">try</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="built_in">stat</span>(temp.<span class="built_in">c_str</span>(), &amp;file_stat) == <span class="number">-1</span>)</span><br><span class="line">                <span class="keyword">throw</span> <span class="built_in">runtime_error</span>(temp + <span class="string">&quot;:get file stat error&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">catch</span>(<span class="type">const</span> std::exception&amp; e)</span><br><span class="line">        &#123;</span><br><span class="line">            std::cerr &lt;&lt; e.<span class="built_in">what</span>() &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">            <span class="keyword">goto</span> fail_getstat;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(<span class="built_in">S_ISDIR</span>(file_stat.st_mode))<span class="comment">//判断是否为目录，如果是目录就进入递归</span></span><br><span class="line">        &#123;</span><br><span class="line">            LightBlue;</span><br><span class="line">            cout &lt;&lt; dp-&gt;d_name &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">            CLOSE;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (file_stat.st_mode &amp; S_IXUSR)<span class="comment">//如果是可执行文件</span></span><br><span class="line">        &#123;</span><br><span class="line">            LightGreen;</span><br><span class="line">            cout &lt;&lt; dp-&gt;d_name &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">            CLOSE;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>  </span><br><span class="line">            cout &lt;&lt; dp-&gt;d_name &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; endl;</span><br><span class="line">    <span class="built_in">closedir</span>(dir);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> EXIT_SUCCESS;</span><br><span class="line"></span><br><span class="line">fail_getstat:</span><br><span class="line">    <span class="built_in">closedir</span>(dir);</span><br><span class="line">fail_opendir:</span><br><span class="line">fail_analyseOpt:</span><br><span class="line">    <span class="keyword">return</span> EXIT_FAILURE;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">DIR *<span class="title">My_OpenDir</span><span class="params">(<span class="type">const</span> <span class="type">char</span> *path)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    DIR *dir;</span><br><span class="line">    <span class="keyword">try</span></span><br><span class="line">    &#123;</span><br><span class="line">        dir = <span class="built_in">opendir</span>(path);</span><br><span class="line">        <span class="keyword">if</span> (dir == <span class="literal">nullptr</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="built_in">runtime_error</span>(<span class="string">&quot;opendir error: DIR* is NULL&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">catch</span>(<span class="type">const</span> std::exception&amp; e)</span><br><span class="line">    &#123;</span><br><span class="line">        std::cerr &lt;&lt; e.<span class="built_in">what</span>() &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">nullptr</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> dir;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">analyseOpt</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span>* argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">try</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">char</span> c;</span><br><span class="line">        <span class="keyword">while</span>((c = <span class="built_in">getopt</span>(argc, argv, <span class="string">&quot;Rh&quot;</span>)) != <span class="number">-1</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">switch</span> (c) </span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">&#x27;R&#x27;</span>:</span><br><span class="line">                    opt.R = <span class="literal">true</span>;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">&#x27;h&#x27;</span>:</span><br><span class="line">                    opt.help = <span class="literal">true</span>;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">default</span>:</span><br><span class="line">                    <span class="keyword">throw</span> <span class="built_in">runtime_error</span>(<span class="string">&quot;Unknown options:&quot;</span> + std::<span class="built_in">string</span>(<span class="number">1</span>, optopt));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">catch</span>(<span class="type">const</span> std::exception&amp; e)</span><br><span class="line">    &#123;</span><br><span class="line">        std::cerr &lt;&lt; <span class="string">&quot;Error &quot;</span> &lt;&lt; e.<span class="built_in">what</span>() &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">        <span class="keyword">goto</span> fail_opt;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> EXIT_SUCCESS;</span><br><span class="line">fail_opt:</span><br><span class="line">    <span class="keyword">return</span> EXIT_FAILURE;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">ls_help</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"></span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;help:\n&quot;</span> </span><br><span class="line">             &lt;&lt; <span class="string">&quot;-h         help&quot;</span> &lt;&lt; <span class="string">&quot;\n&quot;</span></span><br><span class="line">             &lt;&lt; <span class="string">&quot;-r         list dir&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">ls_R</span><span class="params">(std::string path)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    cout &lt;&lt; path + <span class="string">&quot;:&quot;</span>&lt;&lt;endl;</span><br><span class="line">    DIR *dir;</span><br><span class="line">    dir = <span class="built_in">My_OpenDir</span>(path.<span class="built_in">c_str</span>());</span><br><span class="line">    <span class="keyword">if</span> (dir == <span class="literal">nullptr</span>) <span class="keyword">goto</span> fail_Myopendir1;</span><br><span class="line">    dirent *dp;</span><br><span class="line">    <span class="keyword">while</span> ((dp = <span class="built_in">readdir</span>(dir)) != <span class="literal">NULL</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (dp-&gt;d_name[<span class="number">0</span>] == <span class="string">&#x27;.&#x27;</span>)</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        <span class="keyword">struct</span> <span class="title class_">stat</span> file_stat;</span><br><span class="line">        std::string temp;</span><br><span class="line">        temp = path + <span class="string">&quot;/&quot;</span> + dp-&gt;d_name;</span><br><span class="line">        <span class="keyword">try</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="built_in">stat</span>(temp.<span class="built_in">c_str</span>(), &amp;file_stat) == <span class="number">-1</span>)</span><br><span class="line">                <span class="keyword">throw</span> <span class="built_in">runtime_error</span>(temp + <span class="string">&quot;:get file stat error&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">catch</span>(<span class="type">const</span> std::exception&amp; e)</span><br><span class="line">        &#123;</span><br><span class="line">            std::cerr &lt;&lt; e.<span class="built_in">what</span>() &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">            <span class="keyword">goto</span> fail_getstat;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(<span class="built_in">S_ISDIR</span>(file_stat.st_mode))<span class="comment">//判断是否为目录，如果是目录就进入递归</span></span><br><span class="line">        &#123;</span><br><span class="line">            LightBlue;</span><br><span class="line">            cout &lt;&lt; dp-&gt;d_name &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">            CLOSE;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (file_stat.st_mode &amp; S_IXUSR)<span class="comment">//如果是可执行文件</span></span><br><span class="line">        &#123;</span><br><span class="line">            LightGreen;</span><br><span class="line">            cout &lt;&lt; dp-&gt;d_name &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">            CLOSE;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>  </span><br><span class="line">            cout &lt;&lt; dp-&gt;d_name &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; endl;</span><br><span class="line">    <span class="built_in">closedir</span>(dir);</span><br><span class="line"></span><br><span class="line">    dir = <span class="built_in">My_OpenDir</span>(path.<span class="built_in">c_str</span>());</span><br><span class="line">    <span class="keyword">if</span> (dir == <span class="literal">nullptr</span>) <span class="keyword">goto</span> fail_Myopendir2;</span><br><span class="line">    <span class="keyword">while</span> ((dp = <span class="built_in">readdir</span>(dir)) != <span class="literal">NULL</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (dp-&gt;d_name[<span class="number">0</span>] == <span class="string">&#x27;.&#x27;</span>)</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        <span class="keyword">struct</span> <span class="title class_">stat</span> file_stat;</span><br><span class="line">        std::string temp;</span><br><span class="line">        temp = path + <span class="string">&quot;/&quot;</span> + dp-&gt;d_name;</span><br><span class="line">        <span class="keyword">try</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="built_in">stat</span>(temp.<span class="built_in">c_str</span>(), &amp;file_stat) == <span class="number">-1</span>)</span><br><span class="line">                <span class="keyword">throw</span> <span class="built_in">runtime_error</span>(temp + <span class="string">&quot;:get file stat error&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">catch</span>(<span class="type">const</span> std::exception&amp; e)</span><br><span class="line">        &#123;</span><br><span class="line">            std::cerr &lt;&lt; e.<span class="built_in">what</span>() &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">            <span class="keyword">goto</span> fail_getstat;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(<span class="built_in">S_ISDIR</span>(file_stat.st_mode))<span class="comment">//判断是否为目录，如果是目录就进入递归</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">ls_R</span>(temp);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">closedir</span>(dir);</span><br><span class="line">    <span class="keyword">return</span> EXIT_SUCCESS;</span><br><span class="line">fail_getstat:</span><br><span class="line">fail_Myopendir2:</span><br><span class="line">    <span class="built_in">closedir</span>(dir);   </span><br><span class="line">fail_Myopendir1:</span><br><span class="line">    <span class="keyword">return</span> EXIT_FAILURE;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 记录一次编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> c++ </tag>
            
            <tag> c语言 </tag>
            
            <tag> linux编程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>类(中)——跟我一起从C到C++(第七期)</title>
      <link href="/2023/02/03/C++/%E7%B1%BB(%E4%B8%AD)%E2%80%94%E2%80%94%E8%B7%9F%E6%88%91%E4%B8%80%E8%B5%B7%E4%BB%8EC%E5%88%B0C++(%E7%AC%AC%E4%B8%83%E6%9C%9F)/"/>
      <url>/2023/02/03/C++/%E7%B1%BB(%E4%B8%AD)%E2%80%94%E2%80%94%E8%B7%9F%E6%88%91%E4%B8%80%E8%B5%B7%E4%BB%8EC%E5%88%B0C++(%E7%AC%AC%E4%B8%83%E6%9C%9F)/</url>
      
        <content type="html"><![CDATA[<span id="more"></span><h3 id="文章目录">文章目录</h3><ul><li><a href="#8-%E7%B1%BB">8 类</a><ul><li><a href="#84-%E8%AE%BF%E9%97%AE%E6%8E%A7%E5%88%B6%E4%B8%8E%E5%B0%81%E8%A3%85">8.4 访问控制与封装</a><ul><li><a href="#841-%E8%AE%BF%E9%97%AE%E8%AF%B4%E6%98%8E%E7%AC%A6">8.4.1 访问说明符</a></li><li><a href="#842-%E4%BD%BF%E7%94%A8class%E6%88%96struct">8.4.2 使用class或struct</a></li><li><a href="#843-%E5%8F%8B%E5%85%83">8.4.3 友元</a></li></ul></li><li><a href="#85-%E7%B1%BB%E7%9A%84%E5%85%B6%E4%BB%96%E7%89%B9%E6%80%A7">8.5 类的其他特性</a><ul><li><a href="#851-%E7%B1%BB%E7%9A%84%E6%88%90%E5%91%98%E5%86%8D%E6%8E%A2">8.5.1 类的成员再探</a><ul><li><a href="#8511-%E5%AE%9A%E4%B9%89%E4%B8%80%E4%B8%AA%E7%B1%BB%E5%9E%8B%E6%88%90%E5%91%98">8.5.1.1 定义一个类型成员</a></li><li><a href="#8512-inline%E6%88%90%E5%91%98%E5%87%BD%E6%95%B0">8.5.1.2 inline成员函数</a></li><li><a href="#8513-%E9%87%8D%E8%BD%BD%E6%88%90%E5%91%98%E5%87%BD%E6%95%B0">8.5.1.3 重载成员函数</a></li><li><a href="#8514-%E5%8F%AF%E5%8F%98%E6%95%B0%E6%8D%AE%E6%88%90%E5%91%98">8.5.1.4 可变数据成员</a></li><li><a href="#8515-%E7%B1%BB%E6%95%B0%E6%8D%AE%E6%88%90%E5%91%98%E5%88%9D%E5%A7%8B%E5%80%BC">8.5.1.5 类数据成员初始值</a></li><li><a href="#8516-%E8%BF%94%E5%9B%9Ethis%E7%9A%84%E6%88%90%E5%91%98%E5%87%BD%E6%95%B0">8.5.1.6 返回*this的成员函数</a></li><li><a href="#8517-const%E6%88%90%E5%91%98%E5%87%BD%E6%95%B0%E5%86%8D%E6%8E%A2">8.5.1.7 const成员函数再探</a><ul><li><a href="#85171-const%E6%88%90%E5%91%98%E5%87%BD%E6%95%B0%E8%BF%94%E5%9B%9Ethis">8.5.1.7.1 const成员函数返回*this</a></li><li><a href="#85172-%E5%9F%BA%E4%BA%8Econst%E7%9A%84%E9%87%8D%E8%BD%BD">8.5.1.7.2 基于const的重载</a></li></ul></li></ul></li><li><a href="#852-%E7%B1%BB%E7%B1%BB%E5%9E%8B">8.5.2 类类型</a><ul><li><a href="#8521-%E7%B1%BB%E6%98%AF%E7%B1%BB%E5%9E%8B">8.5.2.1 类是类型</a></li><li><a href="#8522-%E7%B1%BB%E7%9A%84%E5%A3%B0%E6%98%8E">8.5.2.2 类的声明</a></li></ul></li><li><a href="#853-%E5%8F%8B%E5%85%83%E5%86%8D%E6%8E%A2">8.5.3 友元再探</a><ul><li><a href="#8531-%E7%B1%BB%E4%B9%8B%E9%97%B4%E7%9A%84%E5%8F%8B%E5%85%83">8.5.3.1 类之间的友元</a></li><li><a href="#8532-%E5%87%BD%E6%95%B0%E9%87%8D%E8%BD%BD%E5%92%8C%E5%8F%8B%E5%85%83">8.5.3.2 函数重载和友元</a></li></ul></li></ul></li></ul></li></ul><h1 id="8-类">8 类</h1><p>承接<a href="https://blog.csdn.net/DreamTrue520/article/details/128823046?spm=1001.2014.3001.5501">类(上)——跟我一起从C到C++(第六期)</a></p><h2 id="8-4-访问控制与封装">8.4 访问控制与封装</h2><h3 id="8-4-1-访问说明符">8.4.1 访问说明符</h3><p>目前为止，我们已经为类定义了接口，但好像还没有任何机制来强制用户使用这些接口，而不让使用别的不给用的部分。是的，我们的类还没有封装（没有隐藏类的实现细节），也就是说，用户可以直达<code>Sale_data</code>对象内部并且控制它的具体实现细节。在C++语言中，我们使用访问说明符，加强类的封装性：</p><ul><li><strong>public</strong>：定义在<code>public</code>说明符之后的成员在整个程序内都能被访问（<code>public</code>一般用于定义类的接口）</li><li><strong>private</strong>：定义在<code>private</code>说明符之后的成员可以被类的成员函数访问，但不能被使用该类的代码访问（<code>private</code>封装了类的实现细节）</li></ul><p>再一次定义<code>Sales_data</code>类：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Sales_data</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">Sales_data</span>() = <span class="keyword">default</span>;</span><br><span class="line">    <span class="built_in">Sales_data</span>(<span class="type">const</span> std::string &amp;s) : <span class="built_in">bookNo</span>(s) &#123; &#125;</span><br><span class="line">    <span class="built_in">Sales_data</span>(<span class="type">const</span> std::string &amp;s, <span class="type">unsigned</span> n, <span class="type">double</span> p) :</span><br><span class="line">                <span class="built_in">bookNo</span>(s), <span class="built_in">unit_sold</span>(n), <span class="built_in">revenue</span>(p * n)&#123; &#125;</span><br><span class="line">    <span class="built_in">Sales_data</span>(std::istream &amp;);</span><br><span class="line">    </span><br><span class="line">    <span class="function">std::string <span class="title">id</span><span class="params">()</span> <span class="type">const</span> </span>&#123; <span class="keyword">return</span> <span class="keyword">this</span>-&gt;bookNo; &#125;</span><br><span class="line">    <span class="function">Sales_data&amp; <span class="title">combine</span> <span class="params">(<span class="type">const</span> Sales_data&amp;)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="function"><span class="type">double</span> <span class="title">avg_price</span><span class="params">()</span> <span class="type">const</span></span>;</span><br><span class="line">    </span><br><span class="line">    std::string bookNo;</span><br><span class="line">    <span class="type">unsigned</span> unit_sold = <span class="number">0</span>;</span><br><span class="line">    <span class="type">double</span> revenue = <span class="number">0.0</span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>作为接口的一部分，构造函数和部分成员函数紧跟在<code>public</code>说明符之后，而<code>private</code>说明符之后则是数据成员和作为实现部分的函数。<br>一个类可以包含0个或者多个访问说明符，而且对于某个访问说明符能出现多少次也没有严格限制。每个访问说明符指定了接下来成员的访问级别，其有效的范围直到出现下一次访问说明符或者类的结尾为止。</p><h3 id="8-4-2-使用class或struct">8.4.2 使用class或struct</h3><p>在上面的定义里面，我们把<code>struct</code>改成了<code>class</code>。这俩的含义都是定义类，只不过<code>struct</code>和<code>class</code>有一点细微的差距，就是它们的默认访问权限不一样。<br>类可以在它的第一个访问说明符之前定义成员，对这种成员的访问权限依赖于类定义的方式：<br>如果我们使用<code>struct</code>关键字，则定义在第一个说明符之前的成员<code>public</code>的；<br>而我们使用<code>class</code>关键字，则是相反的<code>private</code>。</p><p>是的，<code>struct</code>和<code>class</code>定义类唯一的区别就是默认的访问权限，大家可以凭自己的喜好，认准一个一直用下去。</p><h3 id="8-4-3-友元">8.4.3 友元</h3><p>既然我们改版了<code>Sale_data</code>的数据成员为<code>private</code>，我们就会发现我们的read、print、add函数无法正常编译了：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">error: <span class="string">&#x27;std::string Sales_data::bookNo&#x27;</span> is <span class="keyword">private</span> within <span class="keyword">this</span> context</span><br></pre></td></tr></table></figure><p>因为它们不是类的成员，无法使用这些私有的数据成员。</p><p>如果还想继续访问这些非公有成员，方法就是令其他类或者函数成为它的friend（友元）。是的，成为了friend，你就拥有了访问类的私有成员的能力了。不过，想要成为类的friend，不是你说了算，而是类说了算。在类中增加一条以<code>friend</code>关键字开始的函数声明语句即可：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Sales_data</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">friend</span> Sales_data <span class="title">add</span><span class="params">(<span class="type">const</span> Sales_data&amp;, <span class="type">const</span> Sales_data&amp;)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">friend</span> std::istream &amp;<span class="title">read</span><span class="params">(std::istream&amp;, Sales_data&amp;)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">friend</span> std::ostream &amp;<span class="title">print</span><span class="params">(std::ostream&amp;, <span class="type">const</span> Sales_data&amp;)</span></span>;</span><br><span class="line">    </span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">Sales_data</span>() = <span class="keyword">default</span>;</span><br><span class="line">    <span class="built_in">Sales_data</span>(<span class="type">const</span> std::string &amp;s) : <span class="built_in">bookNo</span>(s) &#123; &#125;</span><br><span class="line">    <span class="built_in">Sales_data</span>(<span class="type">const</span> std::string &amp;s, <span class="type">unsigned</span> n, <span class="type">double</span> p) :</span><br><span class="line">                <span class="built_in">bookNo</span>(s), <span class="built_in">unit_sold</span>(n), <span class="built_in">revenue</span>(p * n)&#123; &#125;</span><br><span class="line">    <span class="built_in">Sales_data</span>(std::istream &amp;);</span><br><span class="line"></span><br><span class="line">    <span class="function">std::string <span class="title">id</span><span class="params">()</span> <span class="type">const</span> </span>&#123; <span class="keyword">return</span> <span class="keyword">this</span>-&gt;bookNo; &#125;</span><br><span class="line">    <span class="function">Sales_data&amp; <span class="title">combine</span> <span class="params">(<span class="type">const</span> Sales_data&amp;)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="function"><span class="type">double</span> <span class="title">avg_price</span><span class="params">()</span> <span class="type">const</span></span>;</span><br><span class="line"></span><br><span class="line">    std::string bookNo;</span><br><span class="line">    <span class="type">unsigned</span> unit_sold = <span class="number">0</span>;</span><br><span class="line">    <span class="type">double</span> revenue = <span class="number">0.0</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function">Sales_data <span class="title">add</span><span class="params">(<span class="type">const</span> Sales_data&amp;, <span class="type">const</span> Sales_data&amp;)</span></span>;</span><br><span class="line"><span class="function">std::istream &amp;<span class="title">read</span><span class="params">(std::istream&amp;, Sales_data&amp;)</span></span>;</span><br><span class="line"><span class="function">std::ostream &amp;<span class="title">print</span><span class="params">(std::ostream&amp;, <span class="type">const</span> Sales_data&amp;)</span></span>;</span><br></pre></td></tr></table></figure><p>friend声明我们一般放在类定义的开始或者结束位置。虽然friend放在类的定义之中，但它不是类的成员，自然也不受它所在区域的访问限制的约束。</p><p>有一点很重要：<strong>friend声明只是指定了访问限制，而非通常意义上的函数声明。</strong><br>如果我们希望用户能调用这些friend函数，我们必须在friend声明之外再专门为函数进行一次声明。<br>有的编译器已经允许在尚无friend函数的初始声明就能调用它，不过笔者仍然建议你添加一次独立的函数声明，这样即使你遇见了有强制要求的编译器，也无需更改代码。</p><h2 id="8-5-类的其他特性">8.5 类的其他特性</h2><p>刚刚我们了解了<code>Sale_data</code>类中的语法要点，再来介绍一些<code>Sale_data</code>没有体现出来的一些类的特性：类型成员、类的成员的类内初始值、可变数据成员、内联成员函数、从成员函数返回<code>*this</code>、定义并使用类类型以及友元类的更多知识。</p><h3 id="8-5-1-类的成员再探">8.5.1 类的成员再探</h3><h4 id="8-5-1-1-定义一个类型成员">8.5.1.1 定义一个类型成员</h4><p>我们定义一个<code>Screen</code>类，让<code>Screen</code>表示显示器的一个窗口。每个<code>Screen</code>包含一个用于保存<code>Screen</code>内容的string成员和三个<code>string::size_type</code>类型的成员，分别表示光标的位置以及屏幕高和宽。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Screen</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="keyword">typedef</span> std::string::size_type pos;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    pos cursor = <span class="number">0</span>;</span><br><span class="line">    pos height = <span class="number">0</span>, width = <span class="number">0</span>;</span><br><span class="line">    std::string contents;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>这里类型别名了一个<code>pos</code>，也可以写成<code>using pos = std::string::size_type;</code><br>我们便知道了，除了定义数据和函数之外，类也可以自定义某种类型在类中的别名。这个别名也遵循访问限制。<br>还有就是，用来定义类型的成员必须先定义后使用，这一点和普通成员有所区别。因此，类型成员通常出现在类开始的地方。</p><h4 id="8-5-1-2-inline成员函数">8.5.1.2 inline成员函数</h4><p>要使我们的类更加实用，还需要添加一个构造函数令用户能够定义屏幕的尺寸和内容，以及其他两个成员，分别负责移动光标和读取给定位置的字符：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Screen</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="keyword">typedef</span> std::string::size_type pos;</span><br><span class="line">    <span class="built_in">Screen</span>() = <span class="keyword">default</span>;</span><br><span class="line">    <span class="built_in">Screen</span>(pos ht, pos wd, <span class="type">char</span> c = <span class="string">&#x27; &#x27;</span>) : <span class="built_in">height</span>(ht), <span class="built_in">width</span>(wd),</span><br><span class="line">    <span class="built_in">contents</span>(ht * wd,c) &#123; &#125;</span><br><span class="line">    <span class="function"><span class="type">char</span> <span class="title">get</span> <span class="params">()</span> <span class="type">const</span>              <span class="comment">//隐式inline</span></span></span><br><span class="line"><span class="function">        </span>&#123; <span class="keyword">return</span> contents[cursor]; &#125;</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="type">char</span> <span class="title">get</span><span class="params">(pos ht, pos wd)</span> <span class="type">const</span></span>;<span class="comment">//显式inline</span></span><br><span class="line">    <span class="function">Screen &amp;<span class="title">move</span><span class="params">(pos ht, pos wd)</span></span>;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    pos cursor = <span class="number">0</span>;</span><br><span class="line">    pos height = <span class="number">0</span>, width = <span class="number">0</span>;</span><br><span class="line">    std::string contents;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>在类中，常有一些规模较小的函数适合于被声明为inline函数。<br>在类内部定义函数体的，是隐式的inline函数。把<code>inline</code>作为声明的一部分显式地声明成员函数，同样的，也能在类的外部用<code>inline</code>关键字修饰函数，是显式的inline函数：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//在类外指定inline</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> Screen &amp;<span class="title">Screen::move</span><span class="params">(pos ht, pos wd)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    pos row = ht * width;</span><br><span class="line">    cursor = row + wd;</span><br><span class="line">    <span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//在类内指定inline</span></span><br><span class="line"><span class="function"><span class="type">char</span> <span class="title">Screen::get</span><span class="params">(pos ht, pos wd)</span> <span class="type">const</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    pos row = ht * width;</span><br><span class="line">    <span class="keyword">return</span> contents[row + wd];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>虽然我们无需声明和定义同时使用<code>inline</code>关键字，但这么也是合法的。不过，最好在类的外部定义的地方说明<code>inline</code>，这样可以使类更容易理解（与实现分离），而且，inline函数的定义应该与类的定义一起放在一个头文件里。</p><h4 id="8-5-1-3-重载成员函数">8.5.1.3 重载成员函数</h4><p>和非成员函数，成员函数也是可以被重载的。<br>和普通的重载函数的规矩一样：<br><a href="https://blog.csdn.net/DreamTrue520/article/details/128807668?spm=1001.2014.3001.5501">7.3 函数重载</a></p><p>函数匹配的过程也与非成员函数类似：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Screen myscreen;</span><br><span class="line">   <span class="type">char</span> ch = myscreen.<span class="built_in">get</span>();      <span class="comment">//调用get ()</span></span><br><span class="line">   ch = myscreen.<span class="built_in">get</span>(<span class="number">0</span>, <span class="number">0</span>); <span class="comment">//调用get(pos ht, pos wd)</span></span><br></pre></td></tr></table></figure><h4 id="8-5-1-4-可变数据成员">8.5.1.4 可变数据成员</h4><p>有时会发生这一种情况，我们希望修改类的某个数据成员，即使是一个const成员函数内。我们可以通过在变量中声明中加入<code>mutable</code>关键字实现。<br>一个可变数据成员永远不会是const，即使它是const对象的成员。<br>因此，一个const对象可以改变一个可变对象的值。</p><p>我们添加一个新的成员函数和数据成员：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Screen</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">some_member</span><span class="params">()</span> <span class="type">const</span></span>;</span><br><span class="line">    <span class="comment">//省略</span></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="keyword">mutable</span> <span class="type">size_t</span> access_str;</span><br><span class="line">    <span class="comment">//省略</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Screen::some_member</span><span class="params">()</span> <span class="type">const</span> </span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ++access_str;    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>尽管<code>some_member</code>是一个const成员函数，它仍然能够改变<code>access_str</code>的值。</p><h4 id="8-5-1-5-类数据成员初始值">8.5.1.5 类数据成员初始值</h4><p>在定义好<code>Screen</code>类之后，我们将继续定义一个窗口管理类并用它表示显示器上的一组<code>Screen</code>。这个类将包含一组<code>Screen</code>类型的vector，每个元素表示一个特定的<code>Screen</code>。默认情况下，我们也希望<code>Window_mgr</code>类开始时总有一个默认初始化的<code>Screen</code>。<br>在C++11新标准中，最好的办法就是把这个默认声明成一个类内初始值：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Window_mgr</span> &#123;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    std::vector&lt;Screen&gt; screens&#123;<span class="built_in">Screen</span>(<span class="number">24</span>, <span class="number">80</span>, <span class="string">&#x27; &#x27;</span>)&#125;;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>当我们初始化类类型成员时，需要为构造函数传递一个符合成员类型的实参。<br>这里使用的是花括号list initialize，例子中意为我们创建了名为<code>screens</code>的vector，里面有一个元素，是一个<code>Screen(24, 80, ' ')</code>。</p><p>当我们提供一个类内初始值的时候，必须以符号<code>=</code>或者花括号<code>&#123;&#125;</code>表示。<br>这一点非常好理解：</p><p>在类外，我们可以这样</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//在类外</span></span><br><span class="line"><span class="function">Screen <span class="title">myscreen</span><span class="params">(<span class="number">24</span>, <span class="number">80</span>, <span class="string">&#x27; &#x27;</span>)</span></span>;</span><br></pre></td></tr></table></figure><p>而在类里面：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Window_mgr</span> &#123;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line"><span class="comment">//省略</span></span><br><span class="line">    <span class="function">Screen <span class="title">myscreen</span><span class="params">(<span class="number">24</span>, <span class="number">80</span>, <span class="string">&#x27; &#x27;</span>)</span></span>;<span class="comment">//报错</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">error: expected identifier before numeric constant</span><br></pre></td></tr></table></figure><p>编译器不知你是需要定义一个返回值为<code>Screen</code>的函数，还是定义一个<code>Screen</code>类。</p><p>故我们只能以符号<code>=</code>或者花括号<code>&#123;&#125;</code>表示类内初始值。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Window_mgr</span> &#123;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line"><span class="comment">//省略</span></span><br><span class="line">    Screen myscreen = <span class="built_in">Screen</span>(<span class="number">24</span>, <span class="number">80</span>, <span class="string">&#x27; &#x27;</span>);</span><br><span class="line">    Screen myscreen2&#123;<span class="built_in">Screen</span>(<span class="number">24</span>, <span class="number">80</span>, <span class="string">&#x27; &#x27;</span>)&#125;;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h4 id="8-5-1-6-返回-this的成员函数">8.5.1.6 返回*this的成员函数</h4><p>接下来我们继续为<code>Screen</code>添加一些函数，它们负责设置光标所在位置的字符或者其他的一给定位置的字符：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Screen</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="comment">//省略</span></span><br><span class="line">    <span class="function">Screen &amp;<span class="title">set</span><span class="params">(<span class="type">char</span>)</span></span>;</span><br><span class="line">    <span class="function">Screen &amp;<span class="title">set</span><span class="params">(pos, pos, <span class="type">char</span>)</span></span>;</span><br><span class="line">  <span class="comment">//省略</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> Screen &amp;<span class="title">Screen::set</span><span class="params">(<span class="type">char</span> c)</span> </span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    contents[cursor] = c;</span><br><span class="line">    <span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> Screen &amp;<span class="title">Screen::set</span><span class="params">(pos ht, pos wd, <span class="type">char</span> c)</span> </span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    contents[ht * width + wd] = c;</span><br><span class="line">    <span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>和<code>move</code>函数一样，我们的set成员函数调用的是<code>Screen &amp;</code>，是一个对象的引用，故返回值为左值（返回的是对象本身而非对象的副本），如果我们把一系列这样的操作连接在一条表达式中的话：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">myscreen.<span class="built_in">move</span>(<span class="number">4</span>, <span class="number">0</span>).<span class="built_in">set</span>(<span class="string">&#x27;#&#x27;</span>);</span><br></pre></td></tr></table></figure><p>这些操作将在一个对象身上执行。在这些表达式里，我们先移动<code>myscreen</code>内的光标，然后设置<code>myscreen</code>的<code>content</code>成员，可以这么说，上面那句话拆一下就是：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">myscreen.<span class="built_in">move</span>(<span class="number">4</span>, <span class="number">0</span>);</span><br><span class="line">myscreen.<span class="built_in">set</span>(<span class="string">&#x27;#&#x27;</span>);</span><br></pre></td></tr></table></figure><p>但假如不是<code>Screen &amp;</code>，而把<code>move</code>和<code>set</code>的返回值类型改为<code>Screen</code>，则<code>move</code>返回值将会成为是<code>*this</code>的副本，再调用<code>set</code>只能改变临时副本，而改变不了<code>myscreen</code>的值。</p><h4 id="8-5-1-7-const成员函数再探">8.5.1.7 const成员函数再探</h4><h5 id="8-5-1-7-1-const成员函数返回-this">8.5.1.7.1 const成员函数返回*this</h5><p>接下来，我们添加一个名为<code>display</code>成员函数，它负责打印<code>Screen</code>的内容，而且我们希望这个成员函数能和<code>move</code>和<code>set</code>出现在同一序列里，因此<code>display</code>函数也应返回执行它的对象的引用。<br>从逻辑上说，显式一个<code>Screen</code>并不需要改变它的内容，因此我们令<code>display</code>为一个const成员，此时的<code>this</code>就是指向const的常量指针，而<code>*this</code>就是const对象。（参见<a href="https://blog.csdn.net/DreamTrue520/article/details/128823046?spm=1001.2014.3001.5501">8.1.2.2 const成员函数</a>）<br>那么，当<code>display</code>返回<code>*this</code>时，它就返回了<code>const Sales_data &amp;</code>，但这样就无法代入一组动作序列中了：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">myscreen.<span class="built_in">display</span>(cout).<span class="built_in">set</span>(<span class="string">&#x27;#&#x27;</span>);<span class="comment">//报错</span></span><br></pre></td></tr></table></figure><p>无论<code>myscreen</code>是否为常量对象，它经过了<code>display</code>之后便返回成了一个常量对象，而我们无权<code>set</code>一个常量对象。</p><h5 id="8-5-1-7-2-基于const的重载">8.5.1.7.2 基于const的重载</h5><p>通过区分成员函数是否是const的，我们可以对其进行重载：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Screen</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="comment">//省略</span></span><br><span class="line">    <span class="function">Screen &amp;<span class="title">display</span><span class="params">(std::ostream &amp;os)</span></span></span><br><span class="line"><span class="function">                        </span>&#123; <span class="built_in">do_display</span>(os); <span class="keyword">return</span> *<span class="keyword">this</span>;&#125;</span><br><span class="line">    <span class="function"><span class="type">const</span> Screen &amp;<span class="title">display</span><span class="params">(std::ostream &amp;os)</span> <span class="type">const</span></span></span><br><span class="line"><span class="function">                        </span>&#123; <span class="built_in">do_display</span>(os); <span class="keyword">return</span> *<span class="keyword">this</span>;&#125;</span><br><span class="line">                        </span><br><span class="line">    </span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">do_display</span><span class="params">(std::ostream &amp;os)</span> <span class="type">const</span> </span>&#123;os &lt;&lt; contents;&#125;</span><br><span class="line">    <span class="comment">//省略</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>在这里，我们定义一个<code>do_display</code>的私有成员，负责打印<code>Screen</code>的实际工作。（虽然只有一句话，但是因为是inline函数，调用函数不会有额外开销，而且这样的设计符合C++程序设计，值得深刻体会）<br>而<code>display</code>只需调用它和返回操作的对象。<br>我们观察一下就能发现，除了普通<code>display</code>，其他的<code>display</code>和<code>do_display</code>都是const成员函数（this指针指向常量）。因而当我们调用const的<code>display</code>时，this指针隐式地转递给<code>do_display</code>。（一个成员函数调用另外一个成员时，this指针在其中隐式地传递，这样保证了它们都是面对同一个对象而已的），而当我们调用普通<code>display</code>时，this指针隐式地从指向非常量指针转换为了指向常量的指针（就像<code>int</code>对象拷贝给<code>const int</code>对象）。<br>不过，这种函数间的this传递依赖的应该为拷贝副本的机制，故，当我们解引用this指针时，普通<code>display</code>还是能得到一个非常量的对象。</p><p>当我们在某个对象上调用display时，该对象是否是const就决定了它的函数匹配：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">Screen <span class="title">myscreen</span><span class="params">(<span class="number">5</span>, <span class="number">3</span>)</span></span>;</span><br><span class="line">   <span class="function"><span class="type">const</span> Screen <span class="title">blank</span><span class="params">(<span class="number">5</span>, <span class="number">3</span>)</span></span>;</span><br><span class="line">   myscreen.<span class="built_in">set</span>(<span class="string">&#x27;#&#x27;</span>).<span class="built_in">display</span>(cout);<span class="comment">//非常量版本</span></span><br><span class="line">   blank.<span class="built_in">display</span>(cout);<span class="comment">//常量版本</span></span><br></pre></td></tr></table></figure><h3 id="8-5-2-类类型">8.5.2 类类型</h3><h4 id="8-5-2-1-类是类型">8.5.2.1 类是类型</h4><p>每个类都是唯一类型，即使成员完全一致：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">f</span> &#123;</span><br><span class="line">    <span class="type">int</span> i;</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">get</span><span class="params">()</span></span>;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">s</span> &#123;</span><br><span class="line">    <span class="type">int</span> i;</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">get</span><span class="params">()</span></span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">f o1;</span><br><span class="line">   s o2 = o1;<span class="comment">//报错：类型不同</span></span><br></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">error: conversion from <span class="string">&#x27;f&#x27;</span> to non-scalar type <span class="string">&#x27;s&#x27;</span> requested</span><br></pre></td></tr></table></figure><p>和C语言结构体类似的，我们把这个类作为一个类型，可以这样声明一个类类型对象：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">f o1;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">f</span> o2;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">f</span> o3;</span><br></pre></td></tr></table></figure><p>而这三者都是说的<code>f</code>这个类类型。</p><h4 id="8-5-2-2-类的声明">8.5.2.2 类的声明</h4><p>就像函数的声明和定义分离开来一样，我们也能仅仅声明而不定义它：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Screen</span>;</span><br></pre></td></tr></table></figure><p>这种声明有时候被称为前向声明，它向程序引入了名字<code>Screen</code>并指明<code>Screen</code>是一种类类型。<br>对于<code>Screen</code>来说，它在声明之后，定义之前，就是一个不完全类型。此时我们知道它是一个类类型，但不清除它有多少成员。<br>这种时候，只能定义这种类型的指针或者引用，也可以声明（不能定义，因为这个类没有定义，编译器不知道这个类的存储空间）以不完全类型作为参数或者返回值的函数。<br>故，当我们定义类时，也能定义该类的指针作为成员：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Link_screen</span> &#123;</span><br><span class="line">    Screen window;</span><br><span class="line">    Link_screen *next;</span><br><span class="line">    Link_screen *prev;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>原因就在于，编译读到第一句话时<code>class Link_screen</code>，就为它声明了<code>Link_screen</code>类型。<br>因此类可以包含它自身类型的引用或者指针。（但不能包含自身类型的对象）</p><h3 id="8-5-3-友元再探">8.5.3 友元再探</h3><p>我们之前在<code>Sales_data</code>类把三个普通的非成员函数定义为friend。（参见 8.4.3 友元）<br>而其实类还可以把其他类定义为friend，也可以把其他类的成员函数定义为friend。<br>此外，friend函数还能定义在类的内部，只不过这样的函数是隐式inline函数。</p><h4 id="8-5-3-1-类之间的友元">8.5.3.1 类之间的友元</h4><p>和为函数申请friend一样，为类申请friend关系也就一句话：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Screen</span> &#123;</span><br><span class="line"><span class="keyword">friend</span> <span class="keyword">class</span> <span class="title class_">Window_mgr</span>;</span><br><span class="line"><span class="comment">//省略</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>这样<code>Window_mgr</code>的成员就能访问<code>Screen</code>的全部成员了。<br>我们为<code>Window_mgr</code>增加<code>clear</code>成员函数负责把指定<code>Screen</code>内容变成空白：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Window_mgr</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="keyword">using</span> ScreenIndex = std::vector&lt;Screen&gt;::size_type;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">clear</span><span class="params">(ScreenIndex)</span></span>;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    std::vector&lt;Screen&gt; screens&#123;<span class="built_in">Screen</span>(<span class="number">24</span>, <span class="number">80</span>, <span class="string">&#x27; &#x27;</span>)&#125;;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Window_mgr::clear</span><span class="params">(ScreenIndex i)</span> </span>&#123;</span><br><span class="line">    Screen &amp;s = screens[i];</span><br><span class="line">    s.contents = std::<span class="built_in">string</span>(s.height * s.width, <span class="string">&#x27; &#x27;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当<code>Window_mgr</code>成为<code>Screen</code>的friend之后，<code>Window_mgr</code>的成员<code>clear</code>就能访问<code>height</code>、<code>width</code>、<code>contents</code>这些<code>Screen</code>私有成员。</p><p>还有一点需要注意：friend不具备传递性。<br>当<code>Window_mgr</code>的friend就不能再访问<code>Screen</code>的私有成员了，除非<code>Screen</code>给它friend权限。<br>每个类负责控制自己的friend类或者函数。</p><h4 id="8-5-3-2-函数重载和友元">8.5.3.2 函数重载和友元</h4><p>尽管函数的名字相同，但它们仍然是不同的函数。因此，如果一个类想把一组重载函数声明变成它的friend，就需要对这组重载函数每一个都声明：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">extern</span> std::ostream &amp;<span class="title">storeOn</span><span class="params">(std::ostream &amp;, Screen &amp;)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">extern</span> <span class="type">void</span> <span class="title">storeOn</span><span class="params">(Screen &amp;)</span></span>;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Screen</span> &#123;</span><br><span class="line"><span class="function"><span class="keyword">friend</span> std::ostream &amp;<span class="title">storeOn</span><span class="params">(std::ostream &amp;, Screen &amp;)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">friend</span> <span class="type">void</span> <span class="title">storeOn</span><span class="params">(Screen &amp;)</span></span>;</span><br><span class="line"><span class="comment">//省略</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>不过，请不要忘记，friend函数声明不等于函数声明，它仅仅只是说明一个权限问题罢了。（参见 8.4.3 友元）</p>]]></content>
      
      
      <categories>
          
          <category> 跟我一起从C到C++ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> c++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>类(上)——跟我一起从C到C++(第六期)</title>
      <link href="/2023/02/01/C++/%E7%B1%BB(%E4%B8%8A)%E2%80%94%E2%80%94%E8%B7%9F%E6%88%91%E4%B8%80%E8%B5%B7%E4%BB%8EC%E5%88%B0C++(%E7%AC%AC%E5%85%AD%E6%9C%9F)/"/>
      <url>/2023/02/01/C++/%E7%B1%BB(%E4%B8%8A)%E2%80%94%E2%80%94%E8%B7%9F%E6%88%91%E4%B8%80%E8%B5%B7%E4%BB%8EC%E5%88%B0C++(%E7%AC%AC%E5%85%AD%E6%9C%9F)/</url>
      
        <content type="html"><![CDATA[<span id="more"></span><h3 id="文章目录">文章目录</h3><ul><li><a href="#8-%E7%B1%BB">8 类</a><ul><li><a href="#81-%E5%AE%9A%E4%B9%89%E6%8A%BD%E8%B1%A1%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B">8.1 定义抽象数据类型</a><ul><li><a href="#811-%E7%BB%93%E6%9E%84%E4%BD%93%E7%B1%BB">8.1.1 结构体？类？</a></li><li><a href="#812-%E5%AE%9A%E4%B9%89%E6%88%90%E5%91%98%E5%87%BD%E6%95%B0">8.1.2 定义成员函数</a><ul><li><a href="#8121-this%E6%8C%87%E9%92%88">8.1.2.1 this指针</a></li><li><a href="#8122-const%E6%88%90%E5%91%98%E5%87%BD%E6%95%B0">8.1.2.2 const成员函数</a></li><li><a href="#8123-%E7%B1%BB%E4%BD%9C%E7%94%A8%E5%9F%9F">8.1.2.3 类作用域</a></li><li><a href="#8124-%E5%9C%A8%E7%B1%BB%E5%A4%96%E5%AE%9A%E4%B9%89%E6%88%90%E5%91%98%E5%87%BD%E6%95%B0">8.1.2.4 在类外定义成员函数</a><ul><li><a href="#81241-%E4%BD%9C%E7%94%A8%E5%9F%9F%E8%BF%90%E7%AE%97%E7%AC%A6">8.1.2.4.1 作用域运算符</a></li><li><a href="#81242-%E5%AE%9A%E4%B9%89%E4%B8%80%E4%B8%AA%E8%BF%94%E5%9B%9Ethis%E5%AF%B9%E8%B1%A1%E7%9A%84%E5%87%BD%E6%95%B0">8.1.2.4.2 定义一个返回this对象的函数</a></li></ul></li></ul></li></ul></li><li><a href="#82-%E5%AE%9A%E4%B9%89%E7%B1%BB%E7%9B%B8%E5%85%B3%E7%9A%84%E9%9D%9E%E6%88%90%E5%91%98%E5%87%BD%E6%95%B0">8.2 定义类相关的非成员函数</a><ul><li><a href="#821-%E5%AE%9A%E4%B9%89read%E5%92%8Cprint%E5%87%BD%E6%95%B0">8.2.1 定义read和print函数</a></li><li><a href="#822-%E5%AE%9A%E4%B9%89add%E5%87%BD%E6%95%B0">8.2.2 定义add函数</a></li></ul></li><li><a href="#83-%E6%9E%84%E9%80%A0%E5%87%BD%E6%95%B0">8.3 构造函数</a><ul><li><a href="#831-%E5%90%88%E6%88%90%E7%9A%84%E9%BB%98%E8%AE%A4%E6%9E%84%E9%80%A0%E5%87%BD%E6%95%B0">8.3.1 合成的默认构造函数</a></li><li><a href="#832-%E5%AE%9A%E4%B9%89%E6%9E%84%E9%80%A0%E5%87%BD%E6%95%B0">8.3.2 定义构造函数</a><ul><li><a href="#8321-default%E7%9A%84%E5%90%AB%E4%B9%89">8.3.2.1 default的含义</a></li><li><a href="#8322-%E6%9E%84%E9%80%A0%E5%87%BD%E6%95%B0%E5%88%9D%E5%A7%8B%E5%80%BC%E5%88%97%E8%A1%A8">8.3.2.2 构造函数初始值列表</a></li><li><a href="#8323-%E5%9C%A8%E7%B1%BB%E5%A4%96%E5%AE%9A%E4%B9%89%E6%9E%84%E9%80%A0%E5%87%BD%E6%95%B0">8.3.2.3 在类外定义构造函数</a></li></ul></li><li><a href="#833-%E6%8B%B7%E8%B4%9D%E8%B5%8B%E5%80%BC%E5%92%8C%E6%9E%90%E6%9E%84">8.3.3 拷贝、赋值和析构</a></li></ul></li></ul></li></ul><h1 id="8-类">8 类</h1><p>类的基本思想是data abstraction（数据抽象）和encapsulation（封装）。<br>数据抽象是一种依赖于接口和实现分离的编程（以及设计）技术。<br>类的接口包括用户所能执行的操作；类的实现则包括类的数据成员、负责接口实现的函数体以及定义类所需的那些各种私有函数。<br>而封装实现了类的接口和实现的函数分离。封装之后的类隐藏了它的实现细节，也就是说，类的用户只能使用接口而无法访问实现部分。</p><p>这样子，我们在编程中就扮演了不同的角色。这里说的用户就是另外一个程序员，他要使用你所设计并实现的类。你最好把他想成一个编程小白，非常笨那种，你要把你设计的接口尽可能易于使用，让我们使用类的时候，仅仅只需抽象地思考类型做什么，而不去顾及类的实现机理。作为一个设计良好的类，既要有直观且易于使用的接口，也要有高效的实现过程。</p><p>而类要实现数据的抽象和封装，就必须首先定义一个抽象数据类型。</p><h2 id="8-1-定义抽象数据类型">8.1 定义抽象数据类型</h2><p>按照刚刚学习到的小知识，我们来设计一个类<code>Sales_data</code>解决书店销售问题，它的接口包含：</p><ul><li>一个<code>id</code>成员函数，返回书的编号</li><li>一个<code>combine</code>成员函数，用于把一个<code>Sales_data</code>对象加到另一个对象上</li><li>一个名为<code>add</code>的函数，执行两个<code>Sales_data</code>对象的加法</li><li>一个名为<code>read</code>的函数，将数据从istream读入<code>Sales_data</code>对象中</li><li>一个名为<code>print</code>的函数，将<code>Sales_data</code>对象的值输入到ostream</li></ul><h3 id="8-1-1-结构体？类？">8.1.1 结构体？类？</h3><p>在C++语言中，结构体<code>struct</code>也有了新名字，类。<br>我们的类由<code>struct</code>开始，紧跟着类名和类体：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">Sales_data</span>&#123;</span><br><span class="line">    std::string bookNo;</span><br><span class="line">    <span class="type">unsigned</span> unit_sold = <span class="number">0</span>;</span><br><span class="line">    <span class="type">double</span> revenue = <span class="number">0.0</span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><code>struct</code>里面其实不止是可以放变量，也可以放函数。<br>在面对对象程序设计中，我们常常称变量是该类的属性，函数是它所拥有的方法。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">Sales_data</span>&#123;</span><br><span class="line">    <span class="comment">//成员函数</span></span><br><span class="line">    <span class="function">std::string <span class="title">id</span><span class="params">()</span> <span class="type">const</span> </span>&#123; <span class="keyword">return</span> bookNo; &#125;</span><br><span class="line">    <span class="function">Sales_data&amp; <span class="title">combine</span> <span class="params">(<span class="type">const</span> Sales_data&amp;)</span></span>;</span><br><span class="line">    <span class="function"><span class="type">double</span> <span class="title">avg_price</span><span class="params">()</span> <span class="type">const</span></span>;</span><br><span class="line">    <span class="comment">//数据成员</span></span><br><span class="line">    std::string bookNo;</span><br><span class="line">    <span class="type">unsigned</span> unit_sold = <span class="number">0</span>;</span><br><span class="line">    <span class="type">double</span> revenue = <span class="number">0.0</span>;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//非Sales_data的成员函数</span></span><br><span class="line"><span class="function">Sales_data <span class="title">add</span><span class="params">(<span class="type">const</span> Sales_data&amp;, <span class="type">const</span> Sales_data&amp;)</span></span>;</span><br><span class="line"><span class="function">std::istream &amp;<span class="title">read</span><span class="params">(std::istream&amp;, Sales_data&amp;)</span></span>;</span><br><span class="line"><span class="function">std::ostream &amp;<span class="title">print</span><span class="params">(std::ostream&amp;, <span class="type">const</span> Sales_data&amp;)</span></span>;</span><br></pre></td></tr></table></figure><p>尽管所有函数都必须在类的内部声明，但成员函数体可以定义在类内也可以定义在类外。对于我们的<code>Sales_data</code>类来说，<code>id</code>定义在了类内，而<code>combine</code>和<code>avg_price</code>定义在了类外。（目前代码未放出）</p><p>而且，定义在类内部的函数都是隐式的inline函数。</p><h3 id="8-1-2-定义成员函数">8.1.2 定义成员函数</h3><p>相必朋友们已经迷惑重重了，这个<code>return bookNo</code>，但这个成员函数<code>id</code>是怎么获得数据成员<code>bookNo</code>所依赖的对象的呢？这个奇怪的<code>const</code>怎么加在函数的形参列表后面呢？<br>别急，我们慢慢说…</p><h4 id="8-1-2-1-this指针">8.1.2.1 this指针</h4><p>我们像使用结构体一样使用类：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Sales_data total;</span><br><span class="line">   total.<span class="built_in">id</span>();</span><br></pre></td></tr></table></figure><p>我们依旧使用<code>.</code>符号来访问<code>total</code>的<code>id</code>成员，方式和结构体的访问如出一辙。<br>当我们调用成员函数的时候，实际上是在替某个对象调用它。如果<code>id</code>指向<code>Sales_data</code>的成员<code>bookNo</code>，则它隐式地指向了该函数的对象的成员。就比如刚刚的例子，我们<code>return bookNo</code>，实际上就是<code>return total.bookNo</code>。<br>成员函数通过一个名叫<code>this</code>的额外的隐式参数来访问调用它的那个对象。当我们调用一个成员函数的时候，用请求该函数的对象的地址来初始化<code>this</code>。比如刚刚的例子，我们调用<code>total.id()</code>，则编译器负责把<code>total</code>的地址传递给<code>id</code>的隐式形参<code>this</code>，可以等价地认为编译器做了以下的改写：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Sales_data::<span class="built_in">id</span>(&amp;total);</span><br></pre></td></tr></table></figure><p>在调用<code>id</code>成员时传入了<code>total</code>的地址。<br>而我们为毛可以直接使用调用该函数的对象的成员，就是因为这个<code>this</code>所指向的就是这个对象。我们返回<code>bookNo</code>实际上就是返回的<code>this-&gt;bookNo</code>。这一切，都被隐式地省略了而已。<br>而且这个<code>this</code>是真实存在的，它是一个常量指针。我们定义的变量不能与它重名，而且我们也能使用它：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">std::string <span class="title">id</span><span class="params">()</span> <span class="type">const</span> </span>&#123; <span class="keyword">return</span> <span class="keyword">this</span>-&gt;bookNo; &#125;</span><br></pre></td></tr></table></figure><h4 id="8-1-2-2-const成员函数">8.1.2.2 const成员函数</h4><p><code>id</code>函数另一个关键之处就是它紧跟在形参列表后面的<code>const</code>关键字，这里，<code>const</code>的作用是修改隐式<code>this</code>指针的类型。<br>默认情况下。<code>this</code>的类型是指向类类型非常量版本的常量指针。例如在<code>Sales_data</code>的成员函数中，<code>this</code>的类型就是<code>Sales_data * const</code>。（这是一个顶层const）尽管<code>this</code>是隐式的，但它依旧要经历初始化规则，意味着我们不能把<code>this</code>绑定在一个常量对象上，这一情况就使得我们不能在常量对象上调用这个成员函数（常量对象，以及常量对象的引用或指针都只能调用常量成员函数，非常量对象则可被隐式地转换）：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">std::string <span class="title">id</span><span class="params">()</span>  </span>&#123; <span class="keyword">return</span> <span class="keyword">this</span>-&gt;bookNo; &#125;<span class="comment">//不加const</span></span><br></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">const</span> Sales_data trans;</span><br><span class="line">   trans.<span class="built_in">id</span>();<span class="comment">//报错</span></span><br></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">error: passing <span class="string">&#x27;const Sales_data&#x27;</span> as <span class="string">&#x27;this&#x27;</span> argument discards qualifiers [-fpermissive]</span><br></pre></td></tr></table></figure><p>而在<code>id</code>函数中我们不会改变<code>this</code>所指的对象，于是我们可以把<code>this</code>设置为指向常量的指针有助于函数的灵活性。<br>在C++中，允许把<code>const</code>关键字加在成员函数的形参列表之后，此时，紧跟在形参列表的<code>const</code>表示<code>this</code>是一个指向常量的常量指针（<code>const Sales_data * const</code>）。这样的成员函数也叫常量成员函数。</p><h4 id="8-1-2-3-类作用域">8.1.2.3 类作用域</h4><p>类的本身就是一个作用域，类的成员定义在嵌套在类的作用域里，因此<code>id</code>中用到的<code>bookNo</code>其实是定义在<code>Sales_data</code>内的数据成员。<br>而且，值得注意的是，即使在<code>bookNo</code>定义在<code>id</code>之后，<code>id</code>还是能使用<code>bookNo</code>。这是因为，编译器分两步处理类：</p><ol><li>编译成员的声明</li><li>编译成员函数体（如果有的话）</li></ol><p>因此，成员函数体可以随意使用类中的其他成员而无须在意这些成员出现的次序。</p><h4 id="8-1-2-4-在类外定义成员函数">8.1.2.4 在类外定义成员函数</h4><h5 id="8-1-2-4-1-作用域运算符">8.1.2.4.1 作用域运算符</h5><p>在类内我们声明了函数，在类外我们就要定义它（在类内定义就是隐式的inline函数）。<br>定义方法很简单，在它的函数名前，添加一个所属类名和作用域运算符<code>::</code>：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">double</span> <span class="title">Sales_data::avg_price</span><span class="params">()</span> <span class="type">const</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (unit_sold)</span><br><span class="line">        <span class="keyword">return</span> revenue/unit_sold;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>意为：我们声明<code>avg_price</code>函数，而且该函数在<code>Sales_data</code>作用域内。<br>一旦编译器看见这个函数名，就能理解剩余代码是位于类的作用域了。<br>当<code>avg_price</code>使用<code>revenue</code>和<code>unit_sold</code>，实际上也是隐式地使用了<code>Sales_data</code>内的成员。</p><h5 id="8-1-2-4-2-定义一个返回this对象的函数">8.1.2.4.2 定义一个返回this对象的函数</h5><p>函数<code>combine</code>的设计初衷类似<code>+=</code>，调用该函数的对象代表<code>+=</code>的左侧运算对象，而右侧运算对象则是通过显式的实参传入函数：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">Sales_data&amp; <span class="title">Sales_data::combine</span><span class="params">(<span class="type">const</span> Sales_data &amp;rhs)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    unit_sold += rhs.unit_sold;</span><br><span class="line">    revenue += rhs.unit_sold;</span><br><span class="line">    <span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当我们进行交易时就执行：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Sales_data total, trans;</span><br><span class="line">   total.<span class="built_in">combine</span>(trans);</span><br></pre></td></tr></table></figure><p>好神奇！一句话就更新了<code>total</code>当前的值。<br>我们来试图解读一下：<br><code>total</code>的地址被绑定到隐式的<code>this</code>参数上，而<code>rhs</code>绑定到了<code>trans</code>上。（这里使用引用来进行绑定，是因为类的大小不确定，防止过大内存拷贝浪费过多）<br>我们直接使用<code>Sales_data</code>的成员相当于都是隐式地使用了<code>this-&gt;</code>，代表的是调用这个成员函数的对象<code>total</code>的成员。而其他对象的成员则需要<code>rhs.</code>来表示。</p><p>该函数还有个值得注意的部分，就是它的返回类型和返回语句。<br>一般来说，当我们定义函数类似于某个内置运算符时（刚刚的例子是模仿<code>+=</code>），应该令函数的行为尽量模仿这个运算符。而<code>+=</code>把它的运算对象当成左值返回。为了和它保持一致，函数<code>combine</code>就设计为返回引用类型。因此，此时的左侧运算对象是一个<code>Sales_data</code>的对象，则返回类型为<code>Sales_data &amp;</code>。<br>而<code>this</code>指针的解引用就是该对象。故刚刚的例子返回的是<code>total</code>。（只是我们刚刚只执行了<code>total.combine(trans);</code>，并没有用上返回值）</p><h2 id="8-2-定义类相关的非成员函数">8.2 定义类相关的非成员函数</h2><p>类的作者常常需要定义一些辅助函数，如<code>add</code>、<code>read</code>、<code>print</code>等。尽管这些函数定义的操作从概念上应该属于类的接口的组成部分，但它们并不属于类本身。<br>如果函数的概念上属于类，但并没有在类中声明，那它的声明（而非定义）也应该与类的声明在同一头文件。<br>假如你是使用的CLion，在项目中添加源文件和头文件需要改写CMakeLists，这里就为你介绍其中一种方法：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">file</span>(   GLOB SOURCES</span><br><span class="line">        Sales_data.cpp Sales_data.h</span><br><span class="line">)</span><br><span class="line"><span class="built_in">add_executable</span>(项目名称 main.cpp $&#123;SOURCE_FILE&#125; $&#123;SOURCES&#125;)</span><br></pre></td></tr></table></figure><h3 id="8-2-1-定义read和print函数">8.2.1 定义read和print函数</h3><p>我们定义<code>read</code>函数，输入书籍编号，售出总数，售出价格：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">std::istream &amp;<span class="title">read</span><span class="params">(std::istream &amp;is, Sales_data &amp;item)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">double</span> price = <span class="number">0</span>;</span><br><span class="line">    is &gt;&gt; item.bookNo &gt;&gt; item.unit_sold &gt;&gt; price;</span><br><span class="line">    item.revenue = price * item.unit_sold;</span><br><span class="line">    <span class="keyword">return</span> is;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>接着在让<code>print</code>函数打印相关信息：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">std::ostream &amp;<span class="title">print</span><span class="params">(std::ostream &amp;os, <span class="type">const</span> Sales_data &amp;item)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    os &lt;&lt; item.<span class="built_in">id</span>() &lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; item.unit_sold &lt;&lt; <span class="string">&quot; &quot;</span></span><br><span class="line">       &lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; item.revenue &lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; item.<span class="built_in">avg_price</span>();</span><br><span class="line">    <span class="keyword">return</span> os;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>read</code>函数从给定流中将数据读到给定对象中，<code>print</code>函数则负责将给定对象的内容打印到给定的流中。<br><code>read</code>和<code>print</code>函数分别接受一个各自的IO类型引用作为其参数，因为IO类型属于不可拷贝类型，故只能通过引用来传递它们。而且，读取和写入均会改变流的内容，故，两个函数引用均为非常量引用。<br>（<code>print</code>函数不负责换行：一般来说，执行输出任务的函数应该尽量减少对格式的控制，确保由用户代码来决定是否换行）</p><h3 id="8-2-2-定义add函数">8.2.2 定义add函数</h3><p><code>add</code>函数接受两个<code>Sales_data</code>对象作为参数，其返回值为一个新的<code>Sales_data</code>，用于表示它们的和：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">Sales_data <span class="title">add</span><span class="params">(<span class="type">const</span> Sales_data &amp;lhs, <span class="type">const</span> Sales_data &amp;rhs)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Sales_data sum = lhs;</span><br><span class="line">    sum.<span class="built_in">combine</span>(rhs);<span class="comment">//把rhs的数据加到sum中</span></span><br><span class="line">    <span class="keyword">return</span> sum;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>用新的对象<code>sum</code>操作，最后返回<code>sum</code>的副本。</p><h2 id="8-3-构造函数">8.3 构造函数</h2><p>每个类都分别定义了它的对象被初始化的方式，类会通过一个或几个特殊的成员来控制其对象的初始化过程。这些函数就叫构造函数。</p><ul><li>构造函数的任务是来初始化类对象的数据成员的，无论何时只要类的对象被创造，就会执行构造函数。</li><li>构造函数的名字与类的名字相同。</li><li>构造函数没有返回类型。</li><li>类可以包含多个构造函数，它们的关系和重载函数一样。</li><li>构造函数不能被声明为<code>const</code>，因为我们在创建类的一个<code>const</code>对象时，知道构造函数完成初始化过程，这个对象才能获得常量属性。</li></ul><h3 id="8-3-1-合成的默认构造函数">8.3.1 合成的默认构造函数</h3><p>我们的<code>Sales_data</code>类并没有定义任何构造函数，但我们使用<code>Sales_data</code>对象的程序依旧正确地编译和运行，是因为它们被进行了默认初始化。<br>类通过一个特殊的的构造函数来控制默认初始化过程，这个函数也叫默认构造函数。<br>当我们的类没有显式地定义构造函数时，那么编译器就会为我们隐式地定义一个默认构造函数。这个函数就叫合成的默认构造函数。<br>它会按照如下规则进行初始化数据成员：</p><ul><li>如果在类中有初始值，用它来初始化成员。</li><li>否则，默认初始化该成员。</li></ul><p>例子中，<code>unit_sold</code>和<code>revenue</code>都提供了初始值，它们将在构造函数中被这个初始值初始化，而<code>bookNo</code>就被默认初始化为一个空字符串了。</p><h3 id="8-3-2-定义构造函数">8.3.2 定义构造函数</h3><p>为了灵活性考虑，我们决定自己定义构造函数而不是使用合成的默认构造函数。<br>稍加思考，我们定义4个不同的构造函数：</p><ol><li>一个<code>istream &amp;</code>，从中读取一条信息</li><li>一个<code>const string &amp;</code>，表示图书编号，一个<code>unsigned</code>，表示售出图书数量，以及一个<code>double</code>表示图书售出价格</li><li>一个<code>const string &amp;</code>，表示图书编号；编译器将赋予其他函数默认值</li><li>一个空列表，即默认构造函数</li></ol><p>我们为类添加上我们新建的构造函数：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">Sales_data</span>&#123;</span><br><span class="line">    <span class="comment">//构造函数</span></span><br><span class="line">    <span class="built_in">Sales_data</span>() = <span class="keyword">default</span>;</span><br><span class="line">    <span class="built_in">Sales_data</span>(<span class="type">const</span> std::string &amp;s) : <span class="built_in">bookNo</span>(s) &#123; &#125;</span><br><span class="line">    <span class="built_in">Sales_data</span>(<span class="type">const</span> std::string &amp;s, <span class="type">unsigned</span> n, <span class="type">double</span> p) :</span><br><span class="line">                <span class="built_in">bookNo</span>(s), <span class="built_in">unit_sold</span>(n), <span class="built_in">revenue</span>(p * n)&#123; &#125;</span><br><span class="line">    <span class="built_in">Sales_data</span>(std::istream &amp;);        </span><br><span class="line">    <span class="comment">//成员操作</span></span><br><span class="line">    <span class="function">std::string <span class="title">id</span><span class="params">()</span> <span class="type">const</span> </span>&#123; <span class="keyword">return</span> <span class="keyword">this</span>-&gt;bookNo; &#125;</span><br><span class="line">    <span class="function">Sales_data&amp; <span class="title">combine</span> <span class="params">(<span class="type">const</span> Sales_data&amp;)</span></span>;</span><br><span class="line">    <span class="function"><span class="type">double</span> <span class="title">avg_price</span><span class="params">()</span> <span class="type">const</span></span>;</span><br><span class="line">    <span class="comment">//数据成员</span></span><br><span class="line">    std::string bookNo;</span><br><span class="line">    <span class="type">unsigned</span> unit_sold = <span class="number">0</span>;</span><br><span class="line">    <span class="type">double</span> revenue = <span class="number">0.0</span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h4 id="8-3-2-1-default的含义">8.3.2.1 default的含义</h4><p>我们发现了默认构造函数（没有任何形参的构造函数）长这样：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Sales_data</span>() = <span class="keyword">default</span>;</span><br></pre></td></tr></table></figure><p>我们定义这个构造函数的目的是为了想让默认构造函数和之前的合成的默认构造函数一样，但是又因为我们定义了其他的构造函数，编译器不再会为我们生成合成的默认构造函数，故，在C++中，我们需要有默认的行为，就可以在函数的形参列表后面写上<code>= default</code>来要求编译器自动生成默认构造函数。<br>其中，<code>= default</code>既可以和声明一起出现在类的内部，也可以作为定义出现在类的外部。（内部就是inline函数，外部就不是）<br>当然，有一点你得注意，默认构造函数之所以可以有效初始化，是因为我们为内置类型的数据成员提供了初始值，如果你的编译器不支持类内初始值，那么你就必须使用构造函数初始值列表（下文）的方式来初始化类的每个成员。</p><h4 id="8-3-2-2-构造函数初始值列表">8.3.2.2 构造函数初始值列表</h4><p>接下来我们介绍类中定义的另外两个构造函数：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Sales_data</span>(<span class="type">const</span> std::string &amp;s) : <span class="built_in">bookNo</span>(s) &#123; &#125;</span><br><span class="line">   <span class="built_in">Sales_data</span>(<span class="type">const</span> std::string &amp;s, <span class="type">unsigned</span> n, <span class="type">double</span> p) :</span><br><span class="line">               <span class="built_in">bookNo</span>(s), <span class="built_in">unit_sold</span>(n), <span class="built_in">revenue</span>(p * n)&#123; &#125;</span><br></pre></td></tr></table></figure><p>朋友们应该都发现了，这两个构造函数有些不一样的独特之处，它们多出来一个冒号<code>:</code>、要初始化的数据成员名称、以及后面像函数一样的花括号<code>()</code>。这些新出现的部分，称之为构造函数初始值列表。<br>它负责为新创建的对象的一个或几个数据成员赋初始值，每个成员后面的花括号<code>()</code>里面的值，就是它被赋予的初始值。<br>因为是构造函数有重载函数，故它也会根据你实参传入的情况进行选择调用。<br>而关于这些构造函数的函数体是空的原因是，这些构造函数的唯一目的就是为数据成员赋初始值，一旦没有别的任务需要执行，函数体自然就空了。</p><h4 id="8-3-2-3-在类外定义构造函数">8.3.2.3 在类外定义构造函数</h4><p>与其他几个构造函数不同的是，以<code>istream</code>为参数的构造函数因为要执行一些实际操作，我们就把它放在类外进行定义：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Sales_data::<span class="built_in">Sales_data</span>(std::istream &amp;is) </span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">read</span>(is, *<span class="keyword">this</span>);<span class="comment">//从istream输入一条信息，存入this指向的对象里</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里，构造函数没有返回值类型，我们直接从类名、作用域运算符、函数名…开始描述。<br>而这个构造函数的构造函数初始值列表是空的，但因为函数体里有能进行为对象赋值的语句，我们也视为初始化了。且<code>read</code>函数的第二给参数是一个<code>Sales_data &amp;</code>，可以直接修改被传入的实参本身。（这样就完成了从istream里读取一条信息，并为this指向的对象赋值）</p><p>而没有出现在构造函数初始化列表中的成员将通过类内初始值（如果存在的话）进行初始化，或者默认初始化。</p><h3 id="8-3-3-拷贝-赋值和析构">8.3.3 拷贝、赋值和析构</h3><p>除了定义类的对象如何初始化之外，类还需要拷贝、赋值和销毁对象时发生的行为。<br>当我们执行语句<code>Sales_data total;</code>时就创建了<code>Sales_data</code>类型对象<code>total</code>，并执行构造函数。<br>而我们对象不再存在时就执行销毁的操作，比如局部的对象在创建它的块结束时被销毁。<br>当我们初始化形参或者返回一个对象等时候，就执行了拷贝操作。<br>当我们使用了赋值运算符时也是执行了赋值操作。</p><p>同样的，当我们不主动定义这些操作（笔者也会在之后的章节更新关于自定义上述操作的内容），则编译器会替我们合成它们。一般来说，编译器生成的版本将会对对象的每个成员都执行拷贝、赋值和销毁的操作。<br>比如：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">total = trans;</span><br></pre></td></tr></table></figure><p>就等于</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">total.bookNo = trans.bookNo;</span><br><span class="line">   total.unit_sold = trans.unit_sold;</span><br><span class="line">   total.revenue = trans.revenue;</span><br></pre></td></tr></table></figure><p>不过，尽管编译器能代替我们合成拷贝、赋值和销毁的操作，但对于某些类来说合成的版本无法正常工作。特别是，当类需要分配类对象之外的资源的时候，合成的版本往往会失效。笔者将会在后续介绍C++程序内存分配和管理动态内存的章节中介绍管理内存的类，它通常就不能依赖上述操作的合成版本。</p>]]></content>
      
      
      <categories>
          
          <category> 跟我一起从C到C++ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> c++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>函数(下)——跟我一起从C到C++(第五期)</title>
      <link href="/2023/01/31/C++/%E5%87%BD%E6%95%B0(%E4%B8%8B)%E2%80%94%E2%80%94%E8%B7%9F%E6%88%91%E4%B8%80%E8%B5%B7%E4%BB%8EC%E5%88%B0C++(%E7%AC%AC%E4%BA%94%E6%9C%9F)/"/>
      <url>/2023/01/31/C++/%E5%87%BD%E6%95%B0(%E4%B8%8B)%E2%80%94%E2%80%94%E8%B7%9F%E6%88%91%E4%B8%80%E8%B5%B7%E4%BB%8EC%E5%88%B0C++(%E7%AC%AC%E4%BA%94%E6%9C%9F)/</url>
      
        <content type="html"><![CDATA[<span id="more"></span><h3 id="文章目录">文章目录</h3><ul><li><a href="#7-%E5%87%BD%E6%95%B0">7 函数</a><ul><li><a href="#73-%E5%87%BD%E6%95%B0%E9%87%8D%E8%BD%BD">7.3 函数重载</a><ul><li><a href="#731-%E5%AE%9A%E4%B9%89%E9%87%8D%E8%BD%BD%E5%87%BD%E6%95%B0">7.3.1 定义重载函数</a></li><li><a href="#732-%E5%88%A4%E6%96%AD%E5%BD%A2%E5%8F%82%E7%B1%BB%E5%9E%8B%E6%98%AF%E5%90%A6%E7%9B%B8%E5%BC%82">7.3.2 判断形参类型是否相异</a></li><li><a href="#733-const_cast%E5%92%8C%E9%87%8D%E8%BD%BD">7.3.3 const_cast和重载</a></li><li><a href="#734-%E9%87%8D%E8%BD%BD%E7%9A%84%E4%BD%9C%E7%94%A8%E5%9F%9F">7.3.4 重载的作用域</a></li><li><a href="#735-%E5%87%BD%E6%95%B0%E5%8C%B9%E9%85%8D">7.3.5 函数匹配</a><ul><li><a href="#7351-%E5%80%99%E9%80%89%E5%87%BD%E6%95%B0%E5%92%8C%E5%8F%AF%E8%A1%8C%E5%87%BD%E6%95%B0">7.3.5.1 候选函数和可行函数</a></li><li><a href="#7352-%E5%AF%BB%E6%89%BE%E6%9C%80%E4%BD%B3%E5%8C%B9%E9%85%8D">7.3.5.2 寻找最佳匹配</a><ul><li><a href="#73521-%E7%B1%BB%E5%9E%8B%E6%8F%90%E5%8D%87%E7%9A%84%E5%8C%B9%E9%85%8D">7.3.5.2.1 类型提升的匹配</a></li><li><a href="#73522-%E7%AE%97%E6%9C%AF%E7%B1%BB%E5%9E%8B%E8%BD%AC%E6%8D%A2%E7%9A%84%E5%8C%B9%E9%85%8D">7.3.5.2.2 算术类型转换的匹配</a></li><li><a href="#73523-const%E5%AE%9E%E5%8F%82%E7%9A%84%E5%8C%B9%E9%85%8D">7.3.5.2.3 const实参的匹配</a></li></ul></li><li><a href="#7353-%E5%90%AB%E6%9C%89%E5%A4%9A%E4%B8%AA%E5%BD%A2%E5%8F%82%E7%9A%84%E5%87%BD%E6%95%B0%E5%8C%B9%E9%85%8D">7.3.5.3 含有多个形参的函数匹配</a></li></ul></li></ul></li><li><a href="#74-%E7%89%B9%E6%AE%8A%E7%94%A8%E9%80%94%E8%AF%AD%E8%A8%80%E7%89%B9%E6%80%A7">7.4 特殊用途语言特性</a><ul><li><a href="#741-%E9%BB%98%E8%AE%A4%E5%AE%9E%E5%8F%82">7.4.1 默认实参</a><ul><li><a href="#7411-%E4%BD%BF%E7%94%A8%E9%BB%98%E8%AE%A4%E5%AE%9E%E5%8F%82%E8%B0%83%E7%94%A8%E5%87%BD%E6%95%B0">7.4.1.1 使用默认实参调用函数</a></li><li><a href="#7412-%E9%BB%98%E8%AE%A4%E5%AE%9E%E5%8F%82%E5%A3%B0%E6%98%8E">7.4.1.2 默认实参声明</a></li><li><a href="#7413-%E9%BB%98%E8%AE%A4%E5%AE%9E%E5%8F%82%E4%B8%8B%E7%9A%84%E5%87%BD%E6%95%B0%E5%8C%B9%E9%85%8D">7.4.1.3 默认实参下的函数匹配</a></li></ul></li><li><a href="#742-%E5%86%85%E8%81%94%E5%87%BD%E6%95%B0%E5%92%8Cconstexpr%E5%87%BD%E6%95%B0">7.4.2 内联函数和constexpr函数</a><ul><li><a href="#7421-%E5%86%85%E8%81%94%E5%87%BD%E6%95%B0%E9%81%BF%E5%85%8D%E5%87%BD%E6%95%B0%E8%B0%83%E7%94%A8%E7%9A%84%E5%BC%80%E9%94%80">7.4.2.1 内联函数避免函数调用的开销</a></li><li><a href="#7422-constexpr%E5%87%BD%E6%95%B0">7.4.2.2 constexpr函数</a></li><li><a href="#7423-%E5%86%85%E8%81%94%E5%87%BD%E6%95%B0%E5%92%8Cconstexpr%E5%87%BD%E6%95%B0%E5%9C%A8%E5%A4%B4%E6%96%87%E4%BB%B6%E5%AE%9A%E4%B9%89">7.4.2.3 内联函数和constexpr函数在头文件定义</a></li></ul></li><li><a href="#743-%E8%B0%83%E8%AF%95%E5%B8%AE%E5%8A%A9">7.4.3 调试帮助</a><ul><li><a href="#7431-assert">7.4.3.1 assert</a></li><li><a href="#7432-ndebug">7.4.3.2 NDEBUG</a></li></ul></li></ul></li></ul></li></ul><h1 id="7-函数">7 函数</h1><p>承接<a href="https://blog.csdn.net/DreamTrue520/article/details/128787729?spm=1001.2014.3001.5501">函数(上)——跟我一起从C到C++(第四期)</a></p><h2 id="7-3-函数重载">7.3 函数重载</h2><h3 id="7-3-1-定义重载函数">7.3.1 定义重载函数</h3><p>如果同一作用域内的几个函数名字相同但形参列表不同，我们就称之为重载函数。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">print</span><span class="params">(<span class="type">const</span> <span class="type">char</span> *cp)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (cp)<span class="comment">//非空指针</span></span><br><span class="line">        <span class="keyword">while</span> (*cp)<span class="comment">//不为空字符</span></span><br><span class="line">            cout &lt;&lt; *cp++;</span><br><span class="line">    cout &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">print</span><span class="params">(<span class="type">const</span> <span class="type">int</span> ia[], <span class="type">size_t</span> size)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">size_t</span> i = <span class="number">0</span>; i != size ; ++i) &#123;</span><br><span class="line">        cout &lt;&lt; ia [i] &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    cout&lt;&lt;endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> a[<span class="number">2</span>]=&#123;<span class="number">1</span>, <span class="number">2</span>&#125;;</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;hello&quot;</span>);</span><br><span class="line">    <span class="built_in">print</span>(a, <span class="number">2</span>);</span><br><span class="line">    <span class="keyword">return</span> EXIT_SUCCESS;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输出:hello</span><br><span class="line"> <span class="number">1</span> <span class="number">2</span></span><br></pre></td></tr></table></figure><p>可以看出这些函数的形参类型不一样，但是执行的操作非常类似。当调用这些函数的时候，编译器会根据传递的实参类型判断想要的是哪个函数。<br>（函数的名字只是让编译器知道它调用的是哪个函数，而函数重载一定程度上减轻了程序员起名字、记名字的负担）</p><blockquote><p>main函数不能重载</p></blockquote><p>记住，函数重载看的是形参列表，而没有看返回值，若是返回值不同，但形参相同，那就是不行的：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">A</span><span class="params">(<span class="type">int</span> i)</span></span>;</span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">A</span><span class="params">(<span class="type">int</span> i)</span></span>;<span class="comment">//报错，重定义，与上个函数只有返回类型不同</span></span><br></pre></td></tr></table></figure><h3 id="7-3-2-判断形参类型是否相异">7.3.2 判断形参类型是否相异</h3><p>有时候，两个形参列表看起来不一样，其实又是一样的：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">A</span><span class="params">(<span class="type">int</span> a)</span></span>&#123;&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">A</span><span class="params">(<span class="type">int</span>)</span></span>&#123;&#125;<span class="comment">//报错，省略了形参的名字</span></span><br></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="type">int</span> <span class="type">int_t</span>;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">A</span><span class="params">(<span class="type">int</span>)</span></span>&#123;&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">A</span><span class="params">(<span class="type">int_t</span>)</span></span>&#123;&#125;<span class="comment">//报错，类型别名，也是类型相同</span></span><br></pre></td></tr></table></figure><p>之前也说过，顶层const会被函数传参初始化的那一瞬间是无效的。<br>故，一个拥有顶层const的形参无法与另一个没有顶层const的形参区分开来。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">A</span><span class="params">(<span class="type">int</span>)</span></span>&#123;&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">A</span><span class="params">(<span class="type">const</span> <span class="type">int</span>)</span></span>&#123;&#125;<span class="comment">//报错，忽略顶层const后，重定义了</span></span><br></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">A</span><span class="params">(<span class="type">int</span> *)</span></span>&#123;&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">A</span><span class="params">(<span class="type">int</span> * <span class="type">const</span>)</span></span>&#123;&#125;<span class="comment">//报错，对于int *来说顶层const就是int * const</span></span><br></pre></td></tr></table></figure><p>上面的例子可以看出，我们这里讨论的顶层const或者底层const都是相对而言的。<br>当然，底层const是不会受到影响的：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">A</span><span class="params">(<span class="type">int</span> &amp;)</span></span>&#123;&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">A</span><span class="params">(<span class="type">const</span> <span class="type">int</span> &amp;)</span></span>&#123;&#125;</span><br></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">A</span><span class="params">(<span class="type">int</span> *)</span></span>&#123;&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">A</span><span class="params">(<span class="type">const</span> <span class="type">int</span> *)</span></span>&#123;&#125;</span><br></pre></td></tr></table></figure><p>在上面的例子中，编译器可以通过实参是否为常量来判断该调用哪个函数。</p><h3 id="7-3-3-const-cast和重载">7.3.3 const_cast和重载</h3><p>之前提到，<code>const_cast</code>常常在重载函数中用到。<br>举一个例子：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">const</span> string &amp;<span class="title">shorterString</span><span class="params">(<span class="type">const</span> string &amp;s1, <span class="type">const</span> string &amp;s2)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> s1.<span class="built_in">size</span>() &lt;= s2.<span class="built_in">size</span>() ? s1 : s2;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在这个例子中，我们可以对两个非常量的实参string调用这个函数（非const可以赋值给const，但反过来不行），但返回的结果仍然是<code>const string</code>。<br>因此，我们需要设计一个新的<code>shorterString</code>，当它的实参不是<code>const</code>时，就得到一个普通的引用就好了：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">string &amp;<span class="title">shorterString</span><span class="params">(string &amp;s1, string &amp;s2)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">auto</span> &amp;r = <span class="built_in">shorterString</span>(<span class="built_in">const_cast</span>&lt;<span class="type">const</span> string &amp;&gt;(s1),</span><br><span class="line">                            <span class="built_in">const_cast</span>&lt;<span class="type">const</span> string &amp;&gt;(s2));</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">const_cast</span>&lt;string &amp;&gt;(r);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在这个重载函数中，把实参强制转换为了<code>const string &amp;</code>。之后返回的仍然是<code>const string &amp;</code>，我们再通过强制转换成<code>string &amp;</code>，这依旧是安全的。</p><h3 id="7-3-4-重载的作用域">7.3.4 重载的作用域</h3><p>虽然函数声明置于局部作用域不是一个明智之举，但为了说明重载和作用域的关系，我们暂时违反这一原则。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">print</span><span class="params">(<span class="type">const</span> string &amp;)</span></span>;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">print</span><span class="params">(<span class="type">double</span>)</span></span>;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">fcn</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">print</span><span class="params">(<span class="type">int</span>)</span></span>;</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;hello&quot;</span>);<span class="comment">//报错，这个作用域下，只存在print(int)</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="number">3.14</span>);<span class="comment">//实际执行的是print(int)，即print(3)</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当我们调用<code>print</code>函数时，编译器首先找到该函数名字的声明，接受的是<code>print(int)</code>局部声明。一旦在当前作用域找到了所需要的名字，编译器就会忽略外层作用域的其他重载函数了。剩下来就开始检查函数调用是否有效了。（C++中，名字查找发生在类型检查之前）<br>当然，如果把他们放在同一个作用域下，倒是能完成这个效果：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">fcn</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">print</span><span class="params">(<span class="type">int</span>)</span></span>;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">print</span><span class="params">(<span class="type">const</span> string &amp;)</span></span>;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">print</span><span class="params">(<span class="type">double</span>)</span></span>;</span><br><span class="line">    <span class="built_in">print</span>(<span class="number">1</span>);</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;hello&quot;</span>);</span><br><span class="line">    <span class="built_in">print</span>(<span class="number">3.14</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="7-3-5-函数匹配">7.3.5 函数匹配</h3><p>大多情况下，我们很容易确定某次调用该选用哪个重载函数。然而，当几个重载函数的形参数量相等，且某些形参可以由其他类型转换而来时，这几项工作就不那么容易了。</p><h4 id="7-3-5-1-候选函数和可行函数">7.3.5.1 候选函数和可行函数</h4><p>函数匹配的第一步是选定本次调用对应的重载函数集，集合中的函数称为候选函数。候选函数有两个特征：一是于被调用的函数同名（废话），二是其声明在调用点可见。<br>第二步就开始考察本次调用的实参，然后从候选函数中选出能被这组实参调用的函数，这些新选出来的函数被称为可行函数。可行函数有两个特征：一是其形参数量与本次实参的数量一致，二是每个实参的类型与形参的类型相同或者是可转换为形参的类型。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">f</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">f</span><span class="params">(<span class="type">int</span>)</span></span>;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">f</span><span class="params">(<span class="type">int</span>, <span class="type">int</span>)</span></span>;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">f</span><span class="params">(<span class="type">double</span>, <span class="type">double</span>)</span></span>;</span><br><span class="line"><span class="built_in">f</span>(<span class="number">5.6</span>, <span class="number">5.7</span>);</span><br></pre></td></tr></table></figure><p>根据实参数量，先排除两个，于是可行函数就有<code>void f(int, int)</code>和<code>void f(double, double)</code></p><h4 id="7-3-5-2-寻找最佳匹配">7.3.5.2 寻找最佳匹配</h4><p>函数匹配的第三步就是从可行函数中选择与本次调用最匹配的函数。在这一过程中，逐一检查函数调用提供的实参，寻找形参类型与实参类型最匹配的那个可行函数。<br>刚刚的例子其实很容易判断出来，选择<code>void f(double, double)</code>，不会有任何精度损失，若选择<code>void f(int, int)</code>，则会面临从<code>double</code>转换为<code>int</code>的精度损失。<br>当然，上面的这个例子实在是太明显了，但我们生活中常常会遇上一些奇怪的形参和实参情况。<br>为了确定最佳匹配，编译器将实参类型到形参类型的转换划分为几个等级，具体排序如下：</p><ol><li>精确匹配<ul><li>实参类型和形参类型相同</li><li>实参从数组或函数类型转换为对应指针类型</li><li>向实参添加顶层const或者从实参中删除顶层const</li></ul></li><li>通过const转换实现的匹配</li><li>通过类型提升（小整数类型变成大整数类型）实现的匹配</li><li>通过算术类型转换或者指针转换（包括指针转换<code>void *</code>、<code>const void *</code>、指针隐式转换为布尔<code>if(p)//如果指针p不是0，则为真</code>、类类型<code>string s = &quot;hello&quot;//C风格字符串</code>）实现的匹配</li><li>通过类类型转换实现的匹配</li></ol><h5 id="7-3-5-2-1-类型提升的匹配">7.3.5.2.1 类型提升的匹配</h5><p>我们先明确一点，我们应知道小整数类型一般会被提升到<code>int</code>类型或者更大整数类型。<br>现在我们定义两个函数，并调用：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">ff</span><span class="params">(<span class="type">int</span>)</span></span>;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">ff</span><span class="params">(<span class="type">short</span>)</span></span>;</span><br><span class="line"><span class="built_in">ff</span>(<span class="string">&#x27;a&#x27;</span>);<span class="comment">//char会被提升为int：调用ff(int)</span></span><br></pre></td></tr></table></figure><p><code>char</code>会被提升为<code>int</code>。<br>一般的类型提升就是：</p><table><thead><tr><th>源类型</th><th>通常提升后的类型</th></tr></thead><tbody><tr><td>char</td><td>int</td></tr><tr><td>位段</td><td>int</td></tr><tr><td>枚举</td><td>int</td></tr><tr><td>unsigned char</td><td>int</td></tr><tr><td>short</td><td>int</td></tr><tr><td>unsigned short</td><td>int</td></tr><tr><td>float</td><td>double</td></tr><tr><td>任意数组</td><td>相应类型的指针</td></tr></tbody></table><p>关于更多可以参考：<br><a href="https://blog.csdn.net/sqrt_2/article/details/81567329">类型提升</a></p><h5 id="7-3-5-2-2-算术类型转换的匹配">7.3.5.2.2 算术类型转换的匹配</h5><p>所有算术类型转换的级别的一样。不过是从<code>int</code>到<code>unsigned int</code>，还是从<code>int</code>到<code>double</code>，转换级别都是一样高的：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">ff</span><span class="params">(<span class="type">long</span>)</span></span>;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">ff</span><span class="params">(<span class="type">float</span>)</span></span>;</span><br><span class="line"><span class="built_in">ff</span>(<span class="number">3.14</span>);<span class="comment">//报错，二义性调用</span></span><br></pre></td></tr></table></figure><p><code>3.14</code>被类型提升从<code>float</code>提升为<code>double</code>，接着又因为算术类型转换级别相同，剩下的两个可行函数都具有相同的优先级，故报错<code>error: call of overloaded 'ff(double)' is ambiguous</code></p><h5 id="7-3-5-2-3-const实参的匹配">7.3.5.2.3 const实参的匹配</h5><p>如果重载函数的区别在于它们的引用类型的形参是否引用了const，或者指针类型的形参是否指向const，则当调用发生时编译器通过实参是否是常量来判断使用哪个函数：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">A</span><span class="params">(<span class="type">int</span> &amp;)</span></span>;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">A</span><span class="params">(<span class="type">const</span> <span class="type">int</span> &amp;)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> a = <span class="number">0</span>;</span><br><span class="line">   <span class="type">int</span> b;</span><br><span class="line">   <span class="built_in">A</span>(a);<span class="comment">//调用的是A(const int &amp;)</span></span><br><span class="line">   <span class="built_in">A</span>(b);<span class="comment">//调用的是A(int &amp;)</span></span><br></pre></td></tr></table></figure><h4 id="7-3-5-3-含有多个形参的函数匹配">7.3.5.3 含有多个形参的函数匹配</h4><p>当实参的数量有两个或者more时，这个情况就比较复杂。<br>比如：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">f</span><span class="params">(<span class="type">int</span>, <span class="type">int</span>)</span></span>;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">f</span><span class="params">(<span class="type">double</span>, <span class="type">double</span>)</span></span>;</span><br><span class="line"><span class="built_in">f</span>(<span class="number">4</span>, <span class="number">5.7</span>);</span><br></pre></td></tr></table></figure><p>看样子，我们调用的实参像一个渣男一样，脚踏两条船。<br>为了应对这些多个形参的函数匹配，C++制定了一些规则：</p><ul><li>该函数每个实参的匹配都不劣于其他可行函数需要的匹配</li><li>至少有一个实参的匹配优于其他可行函数提供的匹配<br>如果在检查了所有实参之后，依旧没有任何一个函数脱颖而出，则该调用错误，编译器将报告二义性错误。</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">error: call of overloaded <span class="string">&#x27;f(int, double)&#x27;</span> is ambiguous</span><br></pre></td></tr></table></figure><p>这么多研究，总结一下就是：</p><blockquote><p>调用重载函数时应该尽量避免强制类型转换。如果在实际应用中确实需要强制类型转换，则说明我们设计的形参集合不合理。</p></blockquote><h2 id="7-4-特殊用途语言特性">7.4 特殊用途语言特性</h2><p>函数相关的一些语言特性，大多都对程序有很大用处：</p><ul><li>默认实参</li><li>内联函数和constexpr函数</li><li>程序调试过程中的一些功能</li></ul><h3 id="7-4-1-默认实参">7.4.1 默认实参</h3><p>我们在函数多次调用中，它的形参有时候总是被赋予一个相同的值。<br>于是，为了图方便，我们为它添加默认值。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">string <span class="title">screen</span><span class="params">(sz ht = <span class="number">24</span>, sz wid = <span class="number">80</span>, <span class="type">char</span> backgrnd = <span class="string">&#x27; &#x27;</span>)</span></span>;</span><br></pre></td></tr></table></figure><p>我们为每个形参都添加了默认实参。不过需要注意的一点是，一旦某个形参被赋予了默认值，它后面的所有形参都必须有默认值。</p><h4 id="7-4-1-1-使用默认实参调用函数">7.4.1.1 使用默认实参调用函数</h4><p>我们想使用默认实参时，直接在调用函数时忽略该实参就OK了。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">screen</span>(); <span class="comment">//screen(24, 80, &#x27; &#x27;);</span></span><br><span class="line">   <span class="built_in">screen</span>(<span class="number">66</span>); <span class="comment">//screen(66, 80, &#x27; &#x27;);</span></span><br><span class="line">   <span class="built_in">screen</span>(<span class="number">66</span>, <span class="number">256</span>); <span class="comment">//screen(66, 256, &#x27; &#x27;);</span></span><br><span class="line">   <span class="built_in">screen</span>(<span class="number">66</span>, <span class="number">256</span>, <span class="string">&#x27;#&#x27;</span>); <span class="comment">//screen(66, 256, &#x27;#&#x27;);</span></span><br></pre></td></tr></table></figure><p>而且函数调用时实参是按照其位置进行解析的，默认实参负责填补函数调用缺少的尾部实参（靠右的），例如，当你想要改变<code>backgrnd</code>的默认值，你就不得不也为<code>ht</code>和<code>wid</code>提供实参：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">screen</span>(, , <span class="string">&#x27;#&#x27;</span>); <span class="comment">//报错,缺少实参</span></span><br><span class="line">   <span class="built_in">screen</span>(<span class="string">&#x27;#&#x27;</span>); <span class="comment">//实际上是screen(&#x27;#&#x27;, 80, &#x27; &#x27;);</span></span><br></pre></td></tr></table></figure><h4 id="7-4-1-2-默认实参声明">7.4.1.2 默认实参声明</h4><p>总所周知，函数可以声明很多次。但在给定作用域内，一个形参只能被赋予一次默认实参：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">string <span class="title">screen</span><span class="params">(sz ht, sz wid, <span class="type">char</span> backgrnd = <span class="string">&#x27; &#x27;</span>)</span></span>;</span><br><span class="line"><span class="function">string <span class="title">screen</span><span class="params">(sz ht, sz wid, <span class="type">char</span> backgrnd = <span class="string">&#x27;*&#x27;</span>)</span></span>;<span class="comment">//报错，重复定义</span></span><br></pre></td></tr></table></figure><p>但可以补充：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">string <span class="title">screen</span><span class="params">(sz ht, sz wid, <span class="type">char</span> backgrnd = <span class="string">&#x27; &#x27;</span>)</span></span>;</span><br><span class="line"><span class="function">string <span class="title">screen</span><span class="params">(sz ht = <span class="number">24</span>, sz wid = <span class="number">80</span>, <span class="type">char</span> backgrnd)</span></span>;</span><br></pre></td></tr></table></figure><p>而且，除了局部变量不能作为实参，只要表达式能转换为形参所需要的类型，该表达式就能作为默认实参：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> string::size_type sz;</span><br><span class="line">sz wd = <span class="number">80</span>;</span><br><span class="line"><span class="type">char</span> def = <span class="string">&#x27; &#x27;</span>;</span><br><span class="line"><span class="function">string <span class="title">screen</span><span class="params">(sz ht = <span class="number">24</span>, sz wid = wd, <span class="type">char</span> backgrnd = def)</span></span>;</span><br></pre></td></tr></table></figure><p>作为默认实参的名字在函数声明的作用域内被解析，而这些名字的求值过程发生在函数调用的时候：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> string::size_type sz;</span><br><span class="line">sz wd = <span class="number">80</span>;</span><br><span class="line"><span class="type">char</span> def = <span class="string">&#x27; &#x27;</span>;</span><br><span class="line"><span class="function">string <span class="title">screen</span><span class="params">(sz ht = <span class="number">24</span>, sz wid = wd, <span class="type">char</span> backgrnd = def)</span></span>;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">screen</span>();</span><br><span class="line">    wd = <span class="number">23</span>;</span><br><span class="line">    <span class="built_in">screen</span>();</span><br><span class="line">    <span class="keyword">return</span> EXIT_SUCCESS;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">string <span class="title">screen</span><span class="params">(sz ht , sz wid , <span class="type">char</span> backgrnd)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    cout &lt;&lt; ht &lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; wid &lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt;backgrnd &lt;&lt;endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输出:<span class="number">24</span> <span class="number">80</span></span><br><span class="line">     <span class="number">24</span> <span class="number">23</span></span><br></pre></td></tr></table></figure><p>可以看到，<code>screen</code>函数的默认实参<code>wid</code>也是随着被赋值的表达式<code>wd</code>变化而变化的，这些求值发生在函数调用的一瞬间。</p><h4 id="7-4-1-3-默认实参下的函数匹配">7.4.1.3 默认实参下的函数匹配</h4><p>如果函数有默认实参，则我们在调用该函数时传入的实参数量可能少于它实际使用的实参数量：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">f</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">f</span><span class="params">(<span class="type">int</span>)</span></span>;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">f</span><span class="params">(<span class="type">int</span>, <span class="type">int</span>)</span></span>;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">f</span><span class="params">(<span class="type">double</span>, <span class="type">double</span> = <span class="number">3.14</span>)</span></span>;</span><br><span class="line"><span class="built_in">f</span>(<span class="number">5.6</span>);</span><br></pre></td></tr></table></figure><p>在函数匹配时，可行函数就变成了：<code>void f(int)</code>和<code>void f(double, double = 3.14)</code><br>之后便开始寻找最佳匹配<code>void f(double, double = 3.14)</code>。</p><h3 id="7-4-2-内联函数和constexpr函数">7.4.2 内联函数和constexpr函数</h3><p>一次函数的调用其实包含着一系列的活儿：调用前要保存寄存器，并在返回时恢复；可能要拷贝实参；程序转向一个新的位置继续执行…<br>这样就让函数调用失去了直接求等价表达式的效率优势，但函数是一种回答解决代码复现的不错答案…</p><h4 id="7-4-2-1-内联函数避免函数调用的开销">7.4.2.1 内联函数避免函数调用的开销</h4><p>我们可以指定函数为内联函数，意为它在每个调用点“内联地”展开。（直接替换）<br>只需要在函数返回类型前加上关键字<code>inline</code>：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> csr =  <span class="type">const</span> string &amp;;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> csr <span class="title">shorterString</span><span class="params">(csr s1, csr s2)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> s1.<span class="built_in">size</span>() &lt;= s2.<span class="built_in">size</span>() ? s1 : s2;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当我们调用这个函数时：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">string <span class="title">s1</span><span class="params">(<span class="string">&quot;hello&quot;</span>)</span>, <span class="title">s2</span><span class="params">(<span class="string">&quot;mua&quot;</span>)</span></span>;</span><br><span class="line">   cout &lt;&lt; <span class="built_in">shorterString</span>(s1, s2) &lt;&lt;endl;</span><br></pre></td></tr></table></figure><p>实际上被处理成了</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cout &lt;&lt; (s1.<span class="built_in">size</span>() &lt;= s2.<span class="built_in">size</span>() ? s1 : s2) &lt;&lt;endl;</span><br></pre></td></tr></table></figure><p>当然，内联函数是拿编译器处理后的代码量去换的效率，而且内联说明只是向编译器发出的一个请求，编译器有可能选择忽略这个请求。<br>一般来说，内联机制用于优化规模较小、流程直接、频繁调用的函数。很多编译器是不支持内联递归的，而且一个75行的函数也不太可能在调用点内联地展开。</p><h4 id="7-4-2-2-constexpr函数">7.4.2.2 constexpr函数</h4><p>constexpr函数是指用于常量表达式的函数。<br>定义constexpr函数的方法和其他函数类似，不过要遵守一些约定：</p><ul><li>函数的返回类型以及所有形参的类型都得到是字面值类型</li><li>函数体中必须有且只有一条<code>return</code></li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">constexpr</span> <span class="type">int</span> <span class="title">new_sz</span><span class="params">()</span></span>&#123; <span class="keyword">return</span> <span class="number">42</span>; &#125;</span><br></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">constexpr</span> <span class="type">int</span> foo = <span class="built_in">new_sz</span>();</span><br></pre></td></tr></table></figure><p>执行初始化任务时，编译器把对constexpr函数的调用替换为其结果值。为了能在编译过程中随时展开，它也被隐式地指定为内联函数。<br>constexpr函数体也可以有其他语句，只不过这些语句运行时不执行任何操作。例如，constexpr函数中可以有空语句、类型别名、using声明。</p><p>我们也允许constexpr函数返回值并非一个常量：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">constexpr</span> <span class="type">size_t</span> <span class="title">scale</span><span class="params">(<span class="type">size_t</span> cnt)</span> </span>&#123; <span class="keyword">return</span> cnt * <span class="built_in">new_sz</span>(); &#125;</span><br></pre></td></tr></table></figure><p>但调用时实参必须为字面值：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">size_t</span> a = <span class="number">7</span>;</span><br><span class="line"><span class="keyword">constexpr</span> <span class="type">size_t</span> foo = <span class="built_in">scale</span>(a);<span class="comment">//a不是常量表达式</span></span><br></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">constexpr</span> <span class="type">size_t</span> foo = <span class="built_in">scale</span>(<span class="number">6</span>);<span class="comment">//正确</span></span><br></pre></td></tr></table></figure><p>常常可以在数组声明看见这种函数：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> arr[<span class="built_in">scale</span>(<span class="number">2</span>)];</span><br></pre></td></tr></table></figure><h4 id="7-4-2-3-内联函数和constexpr函数在头文件定义">7.4.2.3 内联函数和constexpr函数在头文件定义</h4><p>和其他函数不同，内联函数和constexpr函数可以在程序中多次定义。<br>毕竟，编译器要想展开函数不能仅有函数声明，还要有函数的定义。<br>不过，对于某个给定的内联函数和constexpr函数来说，它的多个定义就完全一致了。基于这个原因，内联函数和constexpr函数会在头文件定义。</p><h3 id="7-4-3-调试帮助">7.4.3 调试帮助</h3><p>程序员调试代码时，让程序中包含了一部分用于调试的代码，但这些代码只有在开发程序的时候才使用，当编写完成打算发布的时候，就要先屏蔽掉这些调试代码。<br>这种C++给出了两种方法：<code>assert</code>和<code>NDEBUG</code>。</p><h4 id="7-4-3-1-assert">7.4.3.1 assert</h4><p><code>assert</code>是一种预处理宏。所谓预处理宏其实是一个预处理变量，它的行为有点类似于内联函数。<br><code>assert</code>宏使用一个表达式作为它的条件：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">assert</span>(expr);</span><br></pre></td></tr></table></figure><p>首先对expr求值：<br>如果表达式为假，assert输出信息并终止程序。<br>如果表达式为真，assert什么也不做。</p><p><code>assert</code>定义在<code>&lt;cassert&gt;</code>头文件中，如我们所知，预处理名字由预处理器而非编译器管理，因此我们可以直接使用预处理名字而无需再提供<code>using</code>声明。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cassert&gt;</span></span></span><br></pre></td></tr></table></figure><p><code>assert</code>宏常用于检查不能发生的条件。<br>比如，一个对输入文本进行操作的程序可能要求所有给定单词的长度都大于某个阈值。此时，程序可以包含一条这样的语句：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">assert</span>(s.<span class="built_in">size</span>() &gt; threshold);</span><br></pre></td></tr></table></figure><h4 id="7-4-3-2-ndebug">7.4.3.2 NDEBUG</h4><p><code>assert</code>的行为依赖于一个名为<code>NDEBUG</code>的预处理变量的状态。<br>如果定义了<code>NDEBUG</code>，则<code>assert</code>什么也不做。<br>默认状态下没有定义<code>NDEBUG</code>，此时的<code>assert</code>将执行运行时检查。</p><p>有的测试代码，不是用的<code>assert</code>检查的那种，也可以自己使用NDEBUG编写条件调试代码：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">print</span><span class="params">(<span class="type">const</span> <span class="type">int</span> ia[], <span class="type">size_t</span> size)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="meta">#<span class="keyword">ifndef</span> NDEBUG</span></span><br><span class="line">    std::cerr &lt;&lt; __func__ &lt;&lt; <span class="string">&quot;: array size is&quot;</span> &lt;&lt; size &lt;&lt; endl;</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>比起我们熟知的<code>cout</code>，其实标准库里还有两个ostream对象，名为<code>cerr</code>和<code>clog</code>。<br>我们通常用<code>cerr</code>输出警告和错误信息，因此它也被称为标准错误。<br>而<code>clog</code>用来输出程序运行时的一般性信息。</p><p>而<code>__func__</code>输出了当前调试的函数的名字。<br>编译器为每个函数都定义了<code>__func__</code>，它是一个<code>const char</code>的静态数组，用于存放函数的名字。<br>像这样的程序调试时的常用常量：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">__FUNCTION__ 存放函数的名字 字符串字面值 也可以写成__func__</span><br><span class="line">__FILE__ 存放文件名 字符串字面值</span><br><span class="line">   __LINE__ 当前行号 整型字面值</span><br><span class="line">   __TIME__ 存放文件编译时间 字符串字面值</span><br><span class="line">   __DATE__ 存放文件编译日期 字符串字面值</span><br></pre></td></tr></table></figure><p>像模像样地弄个错误输出：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">print</span><span class="params">(<span class="type">const</span> string word)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (word.<span class="built_in">size</span>() &lt; <span class="number">5</span>)</span><br><span class="line"><span class="meta">#<span class="keyword">ifndef</span> NDEBUG</span></span><br><span class="line">    std::cerr &lt;&lt; <span class="string">&quot;Error: &quot;</span> &lt;&lt; __FILE__</span><br><span class="line">    &lt;&lt;<span class="string">&quot; : in function &quot;</span> &lt;&lt; __func__</span><br><span class="line">    &lt;&lt; <span class="string">&quot; at line &quot;</span> &lt;&lt; __LINE__ &lt;&lt; endl</span><br><span class="line">    &lt;&lt; <span class="string">&quot;        Compiled on &quot;</span> &lt;&lt; __DATE__</span><br><span class="line">    &lt;&lt; <span class="string">&quot; at &quot;</span> &lt;&lt; __TIME__ &lt;&lt; endl</span><br><span class="line">    &lt;&lt; <span class="string">&quot;        Word read was \&quot;&quot;</span> &lt;&lt; word</span><br><span class="line">    &lt;&lt; <span class="string">&quot;\&quot;: Length too short&quot;</span> &lt;&lt; endl;</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Error: C:\Users\Whisky\CLionProjects\cpp\<span class="number">1</span>_helloworld\main.cpp : in function print at line <span class="number">20</span></span><br><span class="line">        Compiled on Jan <span class="number">30</span> <span class="number">2023</span> at <span class="number">20</span>:<span class="number">56</span>:<span class="number">55</span></span><br><span class="line">        Word read was <span class="string">&quot;hell&quot;</span>: Length too <span class="type">short</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 跟我一起从C到C++ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> c++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>函数(上)——跟我一起从C到C++(第四期)</title>
      <link href="/2023/01/30/C++/%E5%87%BD%E6%95%B0(%E4%B8%8A)%E2%80%94%E2%80%94%E8%B7%9F%E6%88%91%E4%B8%80%E8%B5%B7%E4%BB%8EC%E5%88%B0C++(%E7%AC%AC%E5%9B%9B%E6%9C%9F)/"/>
      <url>/2023/01/30/C++/%E5%87%BD%E6%95%B0(%E4%B8%8A)%E2%80%94%E2%80%94%E8%B7%9F%E6%88%91%E4%B8%80%E8%B5%B7%E4%BB%8EC%E5%88%B0C++(%E7%AC%AC%E5%9B%9B%E6%9C%9F)/</url>
      
        <content type="html"><![CDATA[<span id="more"></span><h3 id="文章目录">文章目录</h3><ul><li><a href="#7-%E5%87%BD%E6%95%B0">7 函数</a><ul><li><a href="#71-%E5%8F%82%E6%95%B0%E4%BC%A0%E9%80%92">7.1 参数传递</a><ul><li><a href="#711-%E5%BC%95%E7%94%A8%E4%BC%A0%E9%80%92">7.1.1 引用传递</a><ul><li><a href="#7111-%E4%BC%A0%E5%85%A5%E5%BC%95%E7%94%A8%E5%8F%82%E6%95%B0">7.1.1.1 传入引用参数</a></li><li><a href="#7112-%E4%BD%BF%E7%94%A8%E5%BC%95%E7%94%A8%E9%81%BF%E5%85%8D%E6%8B%B7%E8%B4%9D">7.1.1.2 使用引用避免拷贝</a></li><li><a href="#7113-const%E5%BD%A2%E5%8F%82%E5%92%8C%E5%AE%9E%E5%8F%82">7.1.1.3 const形参和实参</a></li><li><a href="#7114-%E6%8C%87%E9%92%88%E6%88%96%E5%BC%95%E7%94%A8%E5%BD%A2%E5%8F%82%E4%B8%8Econst">7.1.1.4 指针或引用形参与const</a></li></ul></li><li><a href="#712-%E6%95%B0%E7%BB%84%E5%BD%A2%E5%8F%82">7.1.2 数组形参</a><ul><li><a href="#7121-%E6%95%B0%E7%BB%84%E4%BC%A0%E5%8F%82">7.1.2.1 数组传参</a></li><li><a href="#7122-%E6%95%B0%E7%BB%84%E7%AE%A1%E7%90%86">7.1.2.2 数组管理</a><ul><li><a href="#71221-%E7%89%B9%E5%AE%9A%E6%A0%87%E8%AE%B0%E6%8C%87%E5%AE%9A%E6%95%B0%E7%BB%84%E9%95%BF%E5%BA%A6">7.1.2.2.1 特定标记指定数组长度</a></li><li><a href="#71222-%E4%BD%BF%E7%94%A8%E6%A0%87%E5%87%86%E5%BA%93%E8%A7%84%E8%8C%83">7.1.2.2.2 使用标准库规范</a></li><li><a href="#71223-%E6%98%BE%E5%BC%8F%E4%BC%A0%E9%80%92%E4%B8%80%E4%B8%AA%E6%95%B0%E7%BB%84%E5%A4%A7%E5%B0%8F%E7%9A%84%E5%BD%A2%E5%8F%82">7.1.2.2.3 显式传递一个数组大小的形参</a></li><li><a href="#71224-%E6%95%B0%E7%BB%84%E5%BC%95%E7%94%A8%E5%BD%A2%E5%8F%82">7.1.2.2.4 数组引用形参</a></li></ul></li><li><a href="#7123-%E5%A4%9A%E7%BB%B4%E6%95%B0%E7%BB%84">7.1.2.3 多维数组</a></li></ul></li><li><a href="#713-main%E5%A4%84%E7%90%86%E5%91%BD%E4%BB%A4%E8%A1%8C%E9%80%89%E9%A1%B9">7.1.3 main：处理命令行选项</a></li><li><a href="#714-%E5%90%AB%E6%9C%89%E5%8F%AF%E5%8F%98%E5%BD%A2%E5%8F%82%E7%9A%84%E5%87%BD%E6%95%B0">7.1.4 含有可变形参的函数</a><ul><li><a href="#7141-initializer_list%E5%BD%A2%E5%8F%82">7.1.4.1 initializer_list形参</a></li><li><a href="#7142-%E7%9C%81%E7%95%A5%E7%AC%A6%E5%BD%A2%E5%8F%82">7.1.4.2 省略符形参</a></li></ul></li></ul></li><li><a href="#72-%E8%BF%94%E5%9B%9E%E5%80%BC">7.2 返回值</a><ul><li><a href="#721-%E8%BF%94%E5%9B%9E%E5%BC%95%E7%94%A8">7.2.1 返回引用</a><ul><li><a href="#7211-%E5%80%BC%E6%98%AF%E5%A6%82%E4%BD%95%E8%A2%AB%E8%BF%94%E5%9B%9E%E7%9A%84">7.2.1.1 值是如何被返回的</a></li><li><a href="#7212-%E4%B8%8D%E8%A6%81%E8%BF%94%E5%9B%9E%E5%B1%80%E9%83%A8%E5%AF%B9%E8%B1%A1%E7%9A%84%E5%BC%95%E7%94%A8%E6%88%96%E6%8C%87%E9%92%88">7.2.1.2 不要返回局部对象的引用或指针</a></li><li><a href="#7213-%E5%BC%95%E7%94%A8%E8%BF%94%E5%9B%9E%E5%B7%A6%E5%80%BC">7.2.1.3 引用返回左值</a></li></ul></li><li><a href="#722-%E5%88%97%E8%A1%A8%E5%88%9D%E5%A7%8B%E5%8C%96%E8%BF%94%E5%9B%9E%E5%80%BC">7.2.2 列表初始化返回值</a></li><li><a href="#723-main%E5%87%BD%E6%95%B0%E8%BF%94%E5%9B%9E%E5%80%BC">7.2.3 main函数返回值</a></li><li><a href="#724-%E8%BF%94%E5%9B%9E%E6%95%B0%E7%BB%84%E6%8C%87%E9%92%88">7.2.4 返回数组指针</a><ul><li><a href="#7241-%E7%B1%BB%E5%9E%8B%E5%88%AB%E5%90%8D%E7%AE%80%E5%8C%96%E5%A3%B0%E6%98%8E">7.2.4.1 类型别名简化声明</a></li><li><a href="#7242-%E7%9B%B4%E6%8E%A5%E5%A3%B0%E6%98%8E">7.2.4.2 直接声明</a></li><li><a href="#7243-%E4%BD%BF%E7%94%A8%E5%B0%BE%E7%BD%AE%E8%BF%94%E5%9B%9E%E7%B1%BB%E5%9E%8B">7.2.4.3 使用尾置返回类型</a></li><li><a href="#7244-%E4%BD%BF%E7%94%A8decltype">7.2.4.4 使用decltype</a></li></ul></li></ul></li></ul></li></ul><h1 id="7-函数">7 函数</h1><p>很多与C语言函数的基础知识相关的内容，笔者也不再赘述，这里主要聊聊C++的一些新的特性。</p><h2 id="7-1-参数传递">7.1 参数传递</h2><h3 id="7-1-1-引用传递">7.1.1 引用传递</h3><h4 id="7-1-1-1-传入引用参数">7.1.1.1 传入引用参数</h4><p>每次调用函数时，都会重新创建它的形参，并用传入的实参来初始化。<br>按照我们以前学习的知识，我们将实参的值拷贝后赋给形参。<br>函数中发生的事情，不会作用到实参身上（毕竟只是一个局部变量，函数调用完了就没了）。<br>如果想让它作用到实参身上，可以使用指针形参，将地址拷贝给指针形参，并间接地访问到它所指的对象。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">A</span><span class="params">(<span class="type">int</span> *i, <span class="type">int</span> *j)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ++*i;</span><br><span class="line">    ++*j;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> a = <span class="number">1</span>, b = <span class="number">2</span>;</span><br><span class="line">    <span class="built_in">A</span>(&amp;a, &amp;b);</span><br><span class="line">    cout&lt;&lt;a&lt;&lt;<span class="string">&quot; &quot;</span>&lt;&lt;b&lt;&lt;endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">输出：<span class="number">2</span> <span class="number">3</span></span><br></pre></td></tr></table></figure><p>但你发现没有，就算是指针形参，它也重新拷贝了两个指针形参，来拷贝实参的值。</p><p>那，有没有完全不浪费内存，就能直接在函数中访问到实参的办法呢？<br>总所周知，我们之前学的对于引用的操作是直接作用在引用所引的对象上的。<br>我们改写刚刚的例子：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">A</span><span class="params">(<span class="type">int</span> &amp;i, <span class="type">int</span> &amp;j)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ++i;</span><br><span class="line">    ++j;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> a = <span class="number">1</span>, b = <span class="number">2</span>;</span><br><span class="line">    <span class="built_in">A</span>(a, b);</span><br><span class="line">    cout&lt;&lt;a&lt;&lt;<span class="string">&quot; &quot;</span>&lt;&lt;b&lt;&lt;endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">输出：<span class="number">2</span> <span class="number">3</span></span><br></pre></td></tr></table></figure><p>到达了同样的效果，不过，形参<code>i</code>仅仅是实参<code>a</code>的另外一个名字，在函数<code>A</code>中任然使用的是实参<code>a</code>。</p><blockquote><p>熟悉C的程序员常常使用指针类型的形参访问函数外部的对象。在C++语言中，建议使用引用类型的形参代替指针。</p></blockquote><h4 id="7-1-1-2-使用引用避免拷贝">7.1.1.2 使用引用避免拷贝</h4><p>之前说了形参仅仅是实参的另外一个名字，这样大大节省了内存。<br>而且拷贝大的类类型对象比较低效，甚至有的类类型根本就不支持拷贝（包括IO类型在内）。当某些类型不支持拷贝操作时，也只能通过引用形参来访问该类型的对象。<br>举个例子，当我们准备编写一个函数来比较两个string对象的长度：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">bool</span> <span class="title">isShorter</span><span class="params">(string &amp;s1, string &amp;s2)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> s1.<span class="built_in">size</span>() &lt; s2.<span class="built_in">size</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>string内容不定，可能会非常长，所以要避免拷贝它，这里使用引用形参就非常的nice。<br>不过，我们仅仅只是比较，并不修改他们的值，为了安全起见，我们把形参定义常量的引用：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">bool</span> <span class="title">isShorter</span><span class="params">(<span class="type">const</span> string &amp;s1, <span class="type">const</span> string &amp;s2)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> s1.<span class="built_in">size</span>() &lt; s2.<span class="built_in">size</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="7-1-1-3-const形参和实参">7.1.1.3 const形参和实参</h4><p>形参的初始化的机理和变量初始化差不多，每次调用函数时，都会重新创建它的形参，并用传入的实参来初始化。<br>而变量初始化时，顶层const会被忽略（只是初始化的那瞬间会被忽略）：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> a;</span><br><span class="line">   <span class="type">int</span> * <span class="type">const</span> p = &amp;a;<span class="comment">//没报错</span></span><br><span class="line">   p = <span class="literal">nullptr</span>;<span class="comment">//报错</span></span><br></pre></td></tr></table></figure><p>故，形参在被实参传参的那瞬间，也会忽略其顶层const属性，传给它常量对象或者非常量对象都是可以的。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">fcn</span><span class="params">(<span class="type">const</span> <span class="type">int</span> i)</span></span>&#123;<span class="comment">/* fcn能够读取i，但不能向i写值 */</span>&#125;</span><br></pre></td></tr></table></figure><p>而C++语言中，可以有若干相同名字的函数，前提是不同函数的形参列表不同。（具体的使用，笔者也会在后续章节讲诉，这里重点讲解忽略顶层const的这一特性）：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">fcn</span><span class="params">(<span class="type">int</span> i)</span></span>&#123;&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">fcn</span><span class="params">(<span class="type">char</span> i)</span></span>&#123;&#125;</span><br></pre></td></tr></table></figure><p>而</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">fcn</span><span class="params">(<span class="type">const</span> <span class="type">int</span> i)</span></span>&#123;&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">fcn</span><span class="params">(<span class="type">int</span> i)</span></span>&#123;&#125;<span class="comment">//报错：重复定义了fcn(int)</span></span><br></pre></td></tr></table></figure><p>这是因为顶层const被忽略掉了，所以上面的代码的两个<code>fcn</code>函数的参数完全一样，故重复定义。</p><h4 id="7-1-1-4-指针或引用形参与const">7.1.1.4 指针或引用形参与const</h4><p>指针和引用存在const转换问题，它的初始化不像是拷贝赋值这么简单，它们的含义都有关它们背后的那个实际对象。<br>我们回顾一下const初始化规则：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> i = <span class="number">0</span>;</span><br><span class="line">   <span class="type">const</span> <span class="type">int</span> *cp = &amp;i;<span class="comment">//正确，但cp不能改变i</span></span><br><span class="line">   <span class="type">const</span> <span class="type">int</span> &amp;r = i;<span class="comment">//正确，但r不能改变i</span></span><br><span class="line">   <span class="type">const</span> <span class="type">int</span> &amp;r2 = <span class="number">42</span>;<span class="comment">//正确</span></span><br><span class="line">   <span class="type">int</span> *p = cp;<span class="comment">//cp是const int *，不能转换为int *</span></span><br><span class="line">   <span class="type">int</span> &amp;r3 = r;<span class="comment">//r是const int &amp;，不能转换为int &amp;</span></span><br><span class="line">   <span class="type">int</span> &amp;r4 = <span class="number">42</span>;<span class="comment">//不能用字面值初始化一个非常量引用</span></span><br></pre></td></tr></table></figure><p>同样，我们把相同的初始化规则应用到参数传递上：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">fcn</span><span class="params">(<span class="type">int</span> &amp;i)</span></span>;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">fcn</span><span class="params">(<span class="type">int</span> *i)</span></span>;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">fcn2</span><span class="params">(<span class="type">const</span> <span class="type">int</span> &amp;i)</span></span>;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> i = <span class="number">0</span>;</span><br><span class="line">    <span class="type">const</span> <span class="type">int</span> ci = i;</span><br><span class="line">    string::size_type ctr = <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">fcn</span>(&amp;i);<span class="comment">//调用的是fcn(int *i)</span></span><br><span class="line">    <span class="built_in">fcn</span>(&amp;ci);<span class="comment">//错误：不能用const int *指针初始化int *</span></span><br><span class="line">    <span class="built_in">fcn</span>(i);<span class="comment">//调用的是fcn(int &amp;i)</span></span><br><span class="line">    <span class="built_in">fcn</span>(ci);<span class="comment">//错误：不能把普通引用绑定到const对象上</span></span><br><span class="line">    <span class="built_in">fcn</span>(<span class="number">42</span>);<span class="comment">//错误：不能把普通引用绑定到字面值上</span></span><br><span class="line">    <span class="built_in">fcn</span>(ctr);<span class="comment">//错误：类型不匹配</span></span><br><span class="line">    <span class="built_in">fcn2</span>(<span class="number">42</span>);<span class="comment">//正确：常量引用可以用字面值初始化</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>故，我们在函数不会改变形参的时候，应该尽量定义为常量引用。</p><h3 id="7-1-2-数组形参">7.1.2 数组形参</h3><h4 id="7-1-2-1-数组传参">7.1.2.1 数组传参</h4><p>数组有两个性质：</p><ol><li>数组不能拷贝</li><li>使用数组时（通常）会被处理为指针。</li></ol><p>当我们为函数传递一个数组时，实际传递的是一个指向数组首元素的指针。<br>故，有很多写法：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">print</span><span class="params">(<span class="type">const</span> <span class="type">int</span> *)</span></span>;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">print</span><span class="params">(<span class="type">const</span> <span class="type">int</span>[])</span></span>;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">print</span><span class="params">(<span class="type">const</span> <span class="type">int</span>[<span class="number">10</span>])</span></span>;<span class="comment">//这里的[10]表示我们期望数组含义10个元素，但实际上也不一定</span></span><br></pre></td></tr></table></figure><p>尽管表现形式各不相同，但上面三个函数实际上是等价的，形参类型皆为<code>const int *</code>。编译器处理函数时也仅仅检查传入的参数是否为<code>const int *</code>。</p><h4 id="7-1-2-2-数组管理">7.1.2.2 数组管理</h4><h5 id="7-1-2-2-1-特定标记指定数组长度">7.1.2.2.1 特定标记指定数组长度</h5><p>C风格字符串有个结束标记，可以让我们知道数组到此为止：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">print</span><span class="params">(<span class="type">const</span> <span class="type">char</span> *cp)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (cp)<span class="comment">//非空指针</span></span><br><span class="line">        <span class="keyword">while</span> (*cp)<span class="comment">//不为空字符</span></span><br><span class="line">            cout &lt;&lt; *cp++;</span><br><span class="line">    cout &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;hello&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">输出：hello</span><br></pre></td></tr></table></figure><h5 id="7-1-2-2-2-使用标准库规范">7.1.2.2.2 使用标准库规范</h5><p>当然，我们也可以使用指向数组首元素和尾巴元素的指针：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">print</span><span class="params">(<span class="type">const</span> <span class="type">int</span> *beg, <span class="type">const</span> <span class="type">int</span> *end)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">while</span> (beg != end)<span class="comment">//输出beg到end之间全部元素（不含尾后元素end）</span></span><br><span class="line">        cout &lt;&lt; *beg++ &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> j[<span class="number">2</span>] = &#123;<span class="number">0</span>, <span class="number">1</span>&#125;;</span><br><span class="line">    <span class="built_in">print</span>(<span class="built_in">begin</span>(j), <span class="built_in">end</span>(j));</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">输出:<span class="number">0</span> <span class="number">1</span></span><br></pre></td></tr></table></figure><h5 id="7-1-2-2-3-显式传递一个数组大小的形参">7.1.2.2.3 显式传递一个数组大小的形参</h5><p>直接定义一个表示数组大小的形参：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">print</span><span class="params">(<span class="type">const</span> <span class="type">int</span> ia[], <span class="type">size_t</span> size)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">size_t</span> i = <span class="number">0</span>; i != size ; ++i) &#123;</span><br><span class="line">        cout &lt;&lt; ia [i] &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    cout&lt;&lt;endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> j[<span class="number">2</span>] = &#123;<span class="number">0</span>, <span class="number">1</span>&#125;;</span><br><span class="line">    <span class="built_in">print</span>(j, <span class="built_in">end</span>(j) - <span class="built_in">begin</span>(j));</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="7-1-2-2-4-数组引用形参">7.1.2.2.4 数组引用形参</h5><p>C++语言允许变量定义成数组的引用，基于同样的道理，形参也可以是数组的引用。此时，引用形参绑定到对应实参上，也就是绑定到数组上：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">print</span><span class="params">(<span class="type">int</span> (&amp; arr)[<span class="number">2</span>])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">auto</span> elem : arr)</span><br><span class="line">        cout &lt;&lt; elem &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> j[<span class="number">2</span>] = &#123;<span class="number">0</span>, <span class="number">1</span>&#125;;</span><br><span class="line">    <span class="built_in">print</span>(j);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里的形参定义是<code>int (&amp; arr)[2]</code>，这里的括号不能少：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> &amp;arr[<span class="number">2</span>];<span class="comment">//报错：将arr声明为元素个数为2的引用数组，但引用数组并不存在</span></span><br><span class="line"><span class="built_in">int</span> (&amp;arr)[<span class="number">2</span>] = <span class="comment">/* ? */</span>;<span class="comment">//正确，arr是具有2个元素的int数组的引用</span></span><br></pre></td></tr></table></figure><p>不过，这里也为我们的形参添加了限制，即只能作用于元素个数为2的数组。</p><h4 id="7-1-2-3-多维数组">7.1.2.3 多维数组</h4><p>多维数组就是数组的数组嘛，而数组传递的是指向数组首元素的指针，故多维数组传递的是一个指向数组的指针。而数组的第二维（以及后面的所有维度）都是数组的类型的一部分，不能省略：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">print</span><span class="params">(<span class="type">int</span> (*matrix)[<span class="number">10</span>])</span></span>;</span><br></pre></td></tr></table></figure><p>不要写成<code>int *matrix[10]</code>，这是10个指针构成的数组的意思。<br>当然，我们也可以用数组语法来定义，此时编译器会一如既往地忽略掉第一个维度，所以最好不要让它包含在形参列表内：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">print</span><span class="params">(<span class="type">int</span> matrix[][<span class="number">10</span>])</span></span>;</span><br></pre></td></tr></table></figure><h3 id="7-1-3-main：处理命令行选项">7.1.3 main：处理命令行选项</h3><p>这个C语言学的好的朋友应该都知道，这里也是笔者才重复一下而已。<br>当我们要给<code>main</code>函数传递参数时，为main定义两个形参：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span> *argv[])</span> </span></span><br></pre></td></tr></table></figure><p>也可以写成：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span> **argv)</span> </span></span><br></pre></td></tr></table></figure><p>第一个形参<code>argc</code>表示我们给<code>main</code>传递的字符串的数量，而第二个形参<code>argv</code>字符串则是内容。<br>例如：<br>我们用g++编译得到a.exe（此处演示为Windows环境）<br>当我们在命令框执行命令<code>a.exe</code>时：<br>此时<br><code>argc</code> = 1<br><code>argv[0]</code> = <code>&quot;a.exe&quot;</code><br>而若执行<code>a.exe \-7</code><br><code>argc</code> = 2<br><code>argv[0]</code> = <code>&quot;a.exe&quot;</code><br><code>argv[1]</code> = <code>&quot;-7&quot;</code></p><h3 id="7-1-4-含有可变形参的函数">7.1.4 含有可变形参的函数</h3><p>有时候我们无法确定该向函数传递几个实参。<br>为了能编写能够处理不同数量实参的函数，C++新标准提供了两种主要的方法：如果所有的实参类型相同，可以传递一个名为<code>initializer_list</code>的标准库模型；如果实参类型不同，也可以编写可变参数模板（关于模板的细节，笔者会在后续章节介绍）。<br>C++还有一种特殊的形参符号类型，即省略符，可以用它来传递可变数量的实参。这种功能一般只用于与C函数交互的接口程序上。</p><h4 id="7-1-4-1-initializer-list形参">7.1.4.1 initializer_list形参</h4><p>如果函数的实参数量未知，但全部类型相同，我们便可以使用<code>initializer_list</code>类型的形参。<br>在std空间中声明它：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> std::initializer_list;</span><br></pre></td></tr></table></figure><p>接着你就能操作它了：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">initializer_list&lt;T&gt; lst; </span><br><span class="line"><span class="comment">//默认初始化；T类型元素的空列表</span></span><br><span class="line">initializer_list&lt;T&gt; lst&#123;a,b,c...&#125;;</span><br><span class="line"><span class="comment">//lst的元素数量和初始值一样多；lst的元素是对应初始值的副本</span></span><br><span class="line"><span class="built_in">lst2</span>(lst)   </span><br><span class="line">lst2=lst  </span><br><span class="line"><span class="comment">//拷贝或赋值一个initializer_list对象不会拷贝列表中的元素；拷贝后，原始列表和副本元素共享</span></span><br><span class="line">lst.<span class="built_in">size</span>()  <span class="comment">//列表中的元素数量</span></span><br><span class="line">lst.<span class="built_in">begin</span>()  <span class="comment">//返回指向lst中首元素的指针</span></span><br><span class="line">lst.<span class="built_in">end</span>()   <span class="comment">//返回指向lst中尾元素下一位置的指针</span></span><br></pre></td></tr></table></figure><p>可以看出，和vector一样，initializer_list也是一种模板类型。<br>定义时规定其类型</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">initializer_list&lt;<span class="type">int</span>&gt; li;</span><br><span class="line">   initializer_list&lt;string&gt; ls;</span><br></pre></td></tr></table></figure><p>不过，不一样的是，initializer_list对象中的元素永远为常量值，我们无法改变initializer_list对象中元素的值。<br>我们以此编写输出错误信息的函数，作用于可变数量的实参：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">error_msg</span><span class="params">(initializer_list&lt;string&gt; il)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">auto</span> beg = il.<span class="built_in">begin</span>(); beg != il.<span class="built_in">end</span>(); ++beg)</span><br><span class="line">        cout &lt;&lt; *beg &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">    cout&lt;&lt;endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果想传递给initializer_list对象形参一个值的序列，就必须把序列放在一对花括号之中<code>&#123;&#125;</code>。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">string expected, actual;</span><br><span class="line">   cin &gt;&gt; expected &gt;&gt; actual;</span><br><span class="line">   <span class="keyword">if</span> (expected != actual)</span><br><span class="line">       <span class="built_in">error_msg</span>(&#123;<span class="string">&quot;error&quot;</span>, <span class="string">&quot;expect: &quot;</span> + expected, <span class="string">&quot;actual: &quot;</span> + actual&#125;);</span><br><span class="line">   <span class="keyword">else</span></span><br><span class="line">       <span class="built_in">error_msg</span>(&#123;<span class="string">&quot;okay&quot;</span>&#125;);</span><br></pre></td></tr></table></figure><p>当然，含有initializer_list形参的函数也可以同时拥有其他的形参。<br>例如，调试系统可能有个名为<code>error_code</code>的类用来表示不同类型的错误，因此我们改写之前的程序：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">error_msg</span><span class="params">(std::error_code e, initializer_list&lt;string&gt; il)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    cout &lt;&lt; e.<span class="built_in">message</span>() &lt;&lt; <span class="string">&quot;:\n&quot;</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">const</span> <span class="keyword">auto</span> &amp;elem : il)</span><br><span class="line">        cout &lt;&lt; elem &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">    cout &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    string expected, actual;</span><br><span class="line">    cin &gt;&gt; expected &gt;&gt; actual;</span><br><span class="line">    <span class="keyword">if</span> (expected != actual)</span><br><span class="line">        <span class="built_in">error_msg</span>(std::<span class="built_in">error_code</span>(<span class="number">42</span>, std::<span class="built_in">system_category</span>()), &#123;<span class="string">&quot;error&quot;</span>, <span class="string">&quot;expect: &quot;</span> + expected, <span class="string">&quot;actual: &quot;</span> + actual&#125;);</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="built_in">error_msg</span>(std::<span class="built_in">error_code</span>(), &#123;<span class="string">&quot;okay&quot;</span>&#125;);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>因为initializer_list内包含了<code>begin</code>和<code>end</code>成员，我们可以使用范围for语句。</p><h4 id="7-1-4-2-省略符形参">7.1.4.2 省略符形参</h4><p>省略符形参是为了便于C++程序去访问某些特殊的C代码而设置的，这些代码使用了名为<code>varargs</code>的C标准库功能。通常，省略符形参不应用于其他的目的。<br>还不知道<code>varargs</code>的可以参考：<br><a href="https://zhuanlan.zhihu.com/p/365756463">C的可变长参数(Varargs)</a><br>省略符形参只能出现在形参列表的最后一个位置，它的形式无外乎以下两种：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">foo</span><span class="params">(parm_list, ...)</span></span>;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">foo</span><span class="params">(...)</span></span>;</span><br></pre></td></tr></table></figure><p>第一种形式只检查部分形参的类型，对于省略符形参无须类型检查，而且形参声明后面的逗号是可以省略的，有的人也爱这么写：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">foo</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b...)</span></span>;</span><br></pre></td></tr></table></figure><h2 id="7-2-返回值">7.2 返回值</h2><h3 id="7-2-1-返回引用">7.2.1 返回引用</h3><h4 id="7-2-1-1-值是如何被返回的">7.2.1.1 值是如何被返回的</h4><p>函数执行<code>return</code>之后，将返回值拷贝到临时量，并回到调用点。<br>故，当我们返回的是一个引用呢？</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">const</span> string &amp;<span class="title">shorterString</span><span class="params">(<span class="type">const</span> string &amp;s1, <span class="type">const</span> string &amp;s2)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> s1.<span class="built_in">size</span>() &lt;= s2.<span class="built_in">size</span>() ? s1 : s2;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">string s1 = <span class="string">&quot;hello&quot;</span>, s2 = <span class="string">&quot;Ohhhhhhh&quot;</span>;</span><br><span class="line"><span class="type">const</span> string &amp;s3 = <span class="built_in">shorterString</span>(s1, s2);</span><br><span class="line">cout&lt;&lt;s3&lt;&lt;endl;</span><br><span class="line">s1 = <span class="string">&quot;love u&quot;</span>;</span><br><span class="line">cout&lt;&lt;s3&lt;&lt;endl;</span><br></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输出:hello</span><br><span class="line"> love u</span><br></pre></td></tr></table></figure><p>而此时形参和返回结果都是<code>const string</code>的引用，不管是调用函数还是返回结果都不会真正拷贝string对象。</p><h4 id="7-2-1-2-不要返回局部对象的引用或指针">7.2.1.2 不要返回局部对象的引用或指针</h4><p>函数完成后，它所占用的存储空间也会随之释放掉。因此，函数终止意味着局部变量的引用指向不再有效的内存区域：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">const</span> string &amp;<span class="title">manip</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    string ret;</span><br><span class="line">    cin &gt;&gt; ret;</span><br><span class="line">    <span class="keyword">if</span> (!ret.<span class="built_in">empty</span>())</span><br><span class="line">        <span class="keyword">return</span> ret;<span class="comment">//错误，返回局部对象的引用</span></span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Empty&quot;</span>;<span class="comment">//错误，&quot;Empty&quot;也是局部临时量</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>局部变量<code>ret</code>和字面值<code>&quot;Empty&quot;</code>，在函数结束时随之释放了，所以这两条<code>return</code>指向了不再可用的内存空间。</p><h4 id="7-2-1-3-引用返回左值">7.2.1.3 引用返回左值</h4><p>函数的返回类型决定了函数调用时是否为左值。<br>调用一个返回引用的函数得到左值，其他的返回类型得到右值。<br>可以像使用其他左值一样来使用返回引用的函数的调用，特别的是，我们能够为返回类型是非常量引用的函数的结果赋值：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">char</span> &amp;<span class="title">get_val</span><span class="params">(string &amp;str, string::size_type ix)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> str[ix];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="function">string <span class="title">s</span><span class="params">(<span class="string">&quot;a value&quot;</span>)</span></span>;</span><br><span class="line">    cout &lt;&lt; s &lt;&lt; endl;</span><br><span class="line">    <span class="built_in">get_val</span>(s, <span class="number">0</span>) = <span class="string">&#x27;A&#x27;</span>;</span><br><span class="line">    cout &lt;&lt; s &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输出:a value</span><br><span class="line"> A value</span><br></pre></td></tr></table></figure><h3 id="7-2-2-列表初始化返回值">7.2.2 列表初始化返回值</h3><p>C++11标准规定函数可以返回花括号<code>&#123;&#125;</code>包围的值的列表。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">vector&lt;string&gt; <span class="title">process</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    string expected, actual;</span><br><span class="line">    cin &gt;&gt; expected &gt;&gt; actual;</span><br><span class="line">    <span class="keyword">if</span> (expected.<span class="built_in">empty</span>())</span><br><span class="line">        <span class="keyword">return</span> &#123;&#125;;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (expected == actual)</span><br><span class="line">        <span class="keyword">return</span> &#123;<span class="string">&quot;okay&quot;</span>&#125;;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="keyword">return</span> &#123;<span class="string">&quot;error&quot;</span>, expected, actual&#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>return &#123;&#125;;</code>会返回一个空列表，此时vector对象是空的。<br>而其他情况下，返回的vector对象都会由列表中的值进行初始化。<br>（关于这些初始化的值的方式，也是由这个类自己定义如何使用的）</p><h3 id="7-2-3-main函数返回值">7.2.3 main函数返回值</h3><p>如果函数返回值类型不是<code>void</code>，那么它必须有一个返回值。<br>不过有个例外就是<code>main</code>函数，我们允许main函数没有<code>return</code>语句直接结束。如果控制到达了<code>main</code>函数结尾却没有<code>return</code>语句，编译器会隐式地插入一条<code>return 0;</code>。<br>而且，<code>main</code>函数的返回值可以看作状态指示器。返回<code>0</code>表示执行成功，其他值表示失败，而这些非零值由机器决定。为了使返回值与机器无关，<code>&lt;cstdlib&gt;</code>头文件定义了两个预处理变量，我们用它们来表示成功与失败。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdlib&gt;</span></span></span><br></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">bool</span> condition;</span><br><span class="line">   cin &gt;&gt; condition;</span><br><span class="line">   <span class="keyword">if</span> (condition)</span><br><span class="line">       <span class="keyword">return</span> EXIT_SUCCESS;</span><br><span class="line">   <span class="keyword">else</span></span><br><span class="line">       <span class="keyword">return</span> EXIT_FAILURE;</span><br></pre></td></tr></table></figure><p>不过在这里的<code>EXIT_SUCCESS</code>和<code>EXIT_FAILURE</code>只是预处理变量罢了，不用<code>std::</code>或<code>using</code>了<br>在笔者的编译器效果下：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入:<span class="number">1</span></span><br><span class="line">输出:Process finished with exit code <span class="number">0</span></span><br></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入:<span class="number">0</span></span><br><span class="line">输出:Process finished with exit code <span class="number">1</span></span><br></pre></td></tr></table></figure><h3 id="7-2-4-返回数组指针">7.2.4 返回数组指针</h3><h4 id="7-2-4-1-类型别名简化声明">7.2.4.1 类型别名简化声明</h4><p>函数可以返回数组的指针和引用，从而返回数组。<br>虽然从语法上说，想要定义一个返回数组的指针或者引用的函数比较繁琐，但我们也有一些方法来简化这个过程——类型别名。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> arrT = <span class="type">int</span>[<span class="number">10</span>];</span><br><span class="line">   <span class="comment">//等于typedef int arrT10];</span></span><br><span class="line">   <span class="function">arrT* <span class="title">func</span><span class="params">(<span class="type">int</span> i)</span></span>;<span class="comment">//返回值为一个指向含有10个int的数组的指针</span></span><br></pre></td></tr></table></figure><h4 id="7-2-4-2-直接声明">7.2.4.2 直接声明</h4><p>如果不用类型别名，我们就必须牢记数组的维度：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> arr[<span class="number">10</span>];</span><br><span class="line"><span class="type">int</span> *p1[<span class="number">10</span>];    <span class="comment">//10个int指针的数组</span></span><br><span class="line"><span class="built_in">int</span> (*p2)[<span class="number">10</span>] = &amp;arr;  <span class="comment">//一个指向10个int的数组的指针</span></span><br></pre></td></tr></table></figure><p>和这些声明一样，如果我们想定义一个返回数组指针的函数，则数组的维度必须跟在函数名字之后。然而，函数的形参列表也跟在函数名字之后而且形参列表应该先于数组的维度。<br>故，返回数组的函数形式应该是这样子的：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Type</span> (*<span class="built_in">function</span>(parameter_list) ) [dimension]</span><br></pre></td></tr></table></figure><p>举个例子就是：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">int</span> (*<span class="built_in">func</span>(<span class="type">int</span> i)) [<span class="number">10</span>];</span><br></pre></td></tr></table></figure><p>这…感觉长得好抽象？！<br>我们试图理解一下：</p><ul><li><code>func(int i)</code>表示<code>func</code>函数需要一个<code>int</code>类型形参</li><li><code>(*func(int i))</code>意味着我们可以对函数的调用的结果执行解引用的操作（这是一个指针，参照数组指针的长相，形如<code>(*pointer-name)</code>）</li><li><code>(*func(int i)) [10]</code>表示解引用<code>func</code>的调用得到的是<code>[10]</code>的数组。</li></ul><h4 id="7-2-4-3-使用尾置返回类型">7.2.4.3 使用尾置返回类型</h4><p>在C++11新标准中，还有一种可以简化上述<code>func</code>声明的方法——使用尾置返回类型。<br>任何函数的定义都能使用尾置返回，但这种形式对于返回类型比较复杂的函数最有效，比如返回数组的指针或引用。<br>尾置返回类型跟在形参列表后面并以一个<code>-&gt;</code>开头。为了表示函数真正的返回类型跟在形参列表之后，我们在本应该放返回类型的地方放一个<code>auto</code>：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">auto</span> <span class="title">func</span><span class="params">(<span class="type">int</span> i)</span> -&gt; <span class="title">int</span><span class="params">(*)</span>[10]</span>;</span><br></pre></td></tr></table></figure><p>返回类型在<code>-&gt;</code>，func的返回类型为<code>int(*)[10]</code>，一个指向<code>int[10]</code>的数组的指针。</p><h4 id="7-2-4-4-使用decltype">7.2.4.4 使用decltype</h4><p>还有一种情况，就是当我们知道了函数返回的指针将指向哪个数组，就可以使用<code>decltype</code>关键字声明返回类型：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> odd[] = &#123;<span class="number">1</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">7</span>, <span class="number">9</span>&#125;;</span><br><span class="line"><span class="type">int</span> even[] = &#123;<span class="number">0</span>, <span class="number">2</span>, <span class="number">4</span>, <span class="number">6</span>, <span class="number">8</span>&#125;;</span><br><span class="line"><span class="keyword">decltype</span>(odd) *<span class="built_in">arrPtr</span>(<span class="type">int</span> i)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">return</span> (i % <span class="number">2</span>) ? &amp;odd : &amp;even;<span class="comment">//返回一个指向数组的指针</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们用<code>decltype</code>时，<code>decltype</code>只得到了那个数组（例子中的就是<code>int[5]</code>），而不是对应指针。当我们想要表示返回指针时，必须在函数声明时，添加<code>*</code>。</p>]]></content>
      
      
      <categories>
          
          <category> 跟我一起从C到C++ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> c++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>表达式和语句——跟我一起从C到C++(第三期)</title>
      <link href="/2023/01/28/C++/%E8%A1%A8%E8%BE%BE%E5%BC%8F%E5%92%8C%E8%AF%AD%E5%8F%A5%E2%80%94%E2%80%94%E8%B7%9F%E6%88%91%E4%B8%80%E8%B5%B7%E4%BB%8EC%E5%88%B0C++(%E7%AC%AC%E4%B8%89%E6%9C%9F)/"/>
      <url>/2023/01/28/C++/%E8%A1%A8%E8%BE%BE%E5%BC%8F%E5%92%8C%E8%AF%AD%E5%8F%A5%E2%80%94%E2%80%94%E8%B7%9F%E6%88%91%E4%B8%80%E8%B5%B7%E4%BB%8EC%E5%88%B0C++(%E7%AC%AC%E4%B8%89%E6%9C%9F)/</url>
      
        <content type="html"><![CDATA[<span id="more"></span><h3 id="文章目录">文章目录</h3><ul><li><a href="#5-%E8%A1%A8%E8%BE%BE%E5%BC%8F">5 表达式</a><ul><li><a href="#51-%E8%BF%90%E7%AE%97%E7%AC%A6%E5%B0%8F%E7%9F%A5%E8%AF%86">5.1 运算符小知识</a><ul><li><a href="#511-%E4%B8%80%E4%BA%8C%E4%B8%89%E5%85%83%E8%BF%90%E7%AE%97%E7%AC%A6">5.1.1 一/二/三元运算符</a></li><li><a href="#512-%E9%87%8D%E8%BD%BD%E8%BF%90%E7%AE%97%E7%AC%A6">5.1.2 重载运算符</a></li><li><a href="#513-%E5%B7%A6%E5%80%BC%E5%92%8C%E5%8F%B3%E5%80%BC">5.1.3 左值和右值</a></li><li><a href="#514-%E9%80%97%E5%8F%B7%E8%BF%90%E7%AE%97%E7%AC%A6">5.1.4 逗号运算符</a></li></ul></li><li><a href="#52-%E8%B5%8B%E5%80%BC%E8%BF%90%E7%AE%97%E7%AC%A6">5.2 赋值运算符</a><ul><li><a href="#521-%E5%A4%9A%E9%87%8D%E8%B5%8B%E5%80%BC">5.2.1 多重赋值</a></li><li><a href="#522-%E5%9C%A8%E6%9D%A1%E4%BB%B6%E4%B8%AD%E8%B5%8B%E5%80%BC">5.2.2 在条件中赋值</a></li><li><a href="#523-%E9%80%92%E5%A2%9E%E9%80%92%E5%87%8F">5.2.3 递增递减</a><ul><li><a href="#5231-%E5%89%8D%E7%BD%AE%E5%92%8C%E5%90%8E%E7%BD%AE">5.2.3.1 前置和后置</a></li><li><a href="#5232-%E6%B7%B7%E7%94%A8%E8%A7%A3%E5%BC%95%E7%94%A8%E5%92%8C%E9%80%92%E5%A2%9E%E5%87%8F">5.2.3.2 混用解引用和递增减</a></li></ul></li></ul></li><li><a href="#53-%E7%B1%BB%E5%9E%8B%E8%BD%AC%E6%8D%A2">5.3 类型转换</a><ul><li><a href="#531-static_cast">5.3.1 static_cast</a></li><li><a href="#532-const_cast">5.3.2 const_cast</a></li><li><a href="#533-reinterpret_cast">5.3.3 reinterpret_cast</a></li><li><a href="#534-%E6%97%A7%E5%BC%8F%E7%9A%84%E5%BC%BA%E5%88%B6%E7%B1%BB%E5%9E%8B%E8%BD%AC%E6%8D%A2">5.3.4 旧式的强制类型转换</a></li></ul></li></ul></li><li><a href="#6-%E8%AF%AD%E5%8F%A5">6 语句</a><ul><li><a href="#61-for%E8%AF%AD%E5%8F%A5">6.1 for语句</a><ul><li><a href="#611-%E4%BC%A0%E7%BB%9Ffor%E8%AF%AD%E5%8F%A5">6.1.1 传统for语句</a></li><li><a href="#612-%E8%8C%83%E5%9B%B4for%E8%AF%AD%E5%8F%A5">6.1.2 范围for语句</a></li></ul></li><li><a href="#62-%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86">6.2 异常处理</a><ul><li><a href="#621-throw%E8%A1%A8%E8%BE%BE%E5%BC%8F">6.2.1 throw表达式</a></li><li><a href="#622-try%E8%AF%AD%E5%8F%A5%E5%9D%97">6.2.2 try语句块</a></li><li><a href="#623-%E6%A0%87%E5%87%86%E5%BC%82%E5%B8%B8">6.2.3 标准异常</a></li></ul></li></ul></li></ul><h1 id="5-表达式">5 表达式</h1><h2 id="5-1-运算符小知识">5.1 运算符小知识</h2><h3 id="5-1-1-一-二-三元运算符">5.1.1 一/二/三元运算符</h3><p>运算符可以是一元、二元或三元的。</p><p>一元运算符有1个操作数。例如，递增运算符”++”就是一元运算符。<br>二元运算符有2个操作数。例如，除法运算符”/”有2个操作数。<br>三元运算符有3个操作数。例如，条件运算符”?:”具有3个操作数。<br>运算符的行为还可能因所提供的操作数的数量而异。减法运算符”-“既是一元运算符又是二元运算符。对于减法运算符，如果只提供一个操作数，则该运算符会对操作数取反并返回结果；如果提供两个操作数，则减法运算符返回这两个操作数的差。</p><h3 id="5-1-2-重载运算符">5.1.2 重载运算符</h3><p>C++语言定义了运算符用于内置类型和复合类型的运算对象时所执行的操作。当运算符作用于类类型的运算时，用户可以自定义其含义。运算符自定义的过程事实上是为已存在的运算符赋予了另外的一层含义，故称之为overload operator（重载运算符）。<br>IO库里的<code>&gt;&gt;</code>和<code>&lt;&lt;</code>以及string、vector对象和迭代器所使用的运算符都是重载运算符。</p><p>我们使用重载运算符时，其包括的运算对象类型、返回值类型都是自定义的，但运算的个数、运算符的优先级、结合律都是无法定义的。</p><h3 id="5-1-3-左值和右值">5.1.3 左值和右值</h3><p>C语言也有左值右值，意为位于赋值语句的左边或者右边。<br>在C++语言中，二者的区别就没那么简单了。<br>一个左值表达式的求值结果是一个对象或者一个函数，然而以常量对象为代表的某些左值实际上不能作为赋值语句的左侧运算对象。（常量对象不能被赋值嘛）此外，虽然某些表达式的求值结果是对象，但它们是右值而非左值。<br>归纳一下就是：</p><blockquote><p>当一个对象被用作右值时，用的是对象的值（内容）；<br>当一个对象被用作左值时，用的是对象的身份（在内存中的位置）；</p></blockquote><p>就比如我们使用<code>decltype</code>时，左值和右值也有所不同。如果表达式的求值结果为左值，<code>decltype</code>作用于该表达式（不是变量）得到一个引用类型。举个例子，<code>p</code>的类型为<code>int *</code>，因为解引用符生成的左值，所以<code>decltype(*p)</code>的结果为<code>int &amp;</code>。而取地址符生成右值，故<code>decltype(&amp;p)</code>的结果为<code>int**</code>。</p><h3 id="5-1-4-逗号运算符">5.1.4 逗号运算符</h3><p>这个是C语言的小知识啦。<br>逗号运算符，含有两个运算对象，按照从左向右的顺序依次求值。它首先对左侧的表达式求值，然后将求值结果扔掉，<strong>只返回右侧的表达式的值</strong>。</p><h2 id="5-2-赋值运算符">5.2 赋值运算符</h2><h3 id="5-2-1-多重赋值">5.2.1 多重赋值</h3><p>赋值运算符<code>=</code>，大家都很熟悉。<br>它满足右结合律，即靠右的赋值运算结果作为靠左赋值运算符的右侧运算对象。<br>举个例子就是：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> ival, jval;</span><br><span class="line">ival = jval = <span class="number">0</span>;</span><br></pre></td></tr></table></figure><p><code>jval = 0</code>返回<code>jval</code>，然后又执行<code>ival = jval</code><br>这样的语句名叫多重赋值语句，不过赋值是要保证他们类型相同、或者可由右边对象的类型转换得到。</p><h3 id="5-2-2-在条件中赋值">5.2.2 在条件中赋值</h3><p>经常我们看见赋值语句出现在条件中。不过赋值语句优先级相对较低，通常他们会被加上括号。<br>举一个例子：<br>这是一种形式繁琐、容易出错的写法：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> i = <span class="built_in">get_value</span>();</span><br><span class="line">   <span class="keyword">while</span> (i != <span class="number">42</span>)&#123;</span><br><span class="line">       <span class="comment">//其他处理...</span></span><br><span class="line">       i = <span class="built_in">get_value</span>();</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p>用赋值语句出现在条件中的写法来改写它，让条件部分表达更加清晰：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> i;</span><br><span class="line">   <span class="keyword">while</span> ((i = <span class="built_in">get_value</span>()) != <span class="number">42</span>)&#123;</span><br><span class="line">       <span class="comment">//其他处理...</span></span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><h3 id="5-2-3-递增递减">5.2.3 递增递减</h3><h4 id="5-2-3-1-前置和后置">5.2.3.1 前置和后置</h4><p>就是<code>++</code>/<code>--</code>在前和在后问题。</p><p><code>++</code>在前，称之为前置版本，意为先加再执行：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> i = <span class="number">0</span>, j;</span><br><span class="line">j = ++i;<span class="comment">//j = 1, i = 1：++在前，得到递增之后的值</span></span><br></pre></td></tr></table></figure><p><code>++</code>在后，称之为后置版本，意为执行之后再加：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> i = <span class="number">0</span>, j;</span><br><span class="line">j = i++;<span class="comment">//j = 0, i = 1：++在后，得到递增之前的值</span></span><br></pre></td></tr></table></figure><p>这两种运算符必须作用于左值运算对象。前置版本将对象本身作为左值返回，后置版本则将对象的原始值的副本作为右值返回。</p><p>故，除非必要，推荐朋友们使用前置版本，后置版本会造成无必要的浪费。</p><h4 id="5-2-3-2-混用解引用和递增减">5.2.3.2 混用解引用和递增减</h4><blockquote><p>简洁是一种美德</p></blockquote><p>当我们在写这个程序的时候，一个循环输出vector的数，直到遇到第一个负数停止（不包括负数）：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">vector&lt;<span class="type">int</span>&gt; v = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">-2</span>&#125;;</span><br><span class="line">   <span class="keyword">auto</span> pbeg = v.<span class="built_in">begin</span>();</span><br><span class="line">   <span class="keyword">while</span> (pbeg != v.<span class="built_in">end</span>() &amp;&amp; *pbeg &gt; <span class="number">0</span>)</span><br><span class="line">       cout&lt;&lt;*(pbeg++)&lt;&lt;endl;</span><br></pre></td></tr></table></figure><p>其实后置递增运算符的优先级要高于解引用运算符，所以<code>*(pbeg++)</code>还可以简写为<code>*pbeg++</code>，这种写法更为常见。</p><p>当然，这里用上了不推荐使用的后置递增运算符，是因为后置运算符返回的是未加1的值。而若返回加1之后的值，解引用该值将产生错误的结果。不但无法输出第一个元素，而且更糟糕的是如果序列里没有负数，程序可能试图去解引用一个不存在的元素。（这会引起程序崩溃）</p><p>故，我们应该把这样的话：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cout&lt;&lt;*iter&lt;&lt;endl;</span><br><span class="line">   ++iter;</span><br></pre></td></tr></table></figure><p>改为</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cout&lt;&lt;*iter++&lt;&lt;endl;</span><br></pre></td></tr></table></figure><p>既简洁又安全。</p><p>不过，使用这种简写时也要注意一个问题。<br>看看下面的例子：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">*pbeg = <span class="built_in">toupper</span>(*pbeg++);</span><br></pre></td></tr></table></figure><p>这个赋值语句就充满了不确定性，编译器可能有两种解读：</p><ol><li><pre><code>先求左侧的值：</code></pre></li></ol><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">*pbeg = <span class="built_in">toupper</span>(*pbeg);<span class="comment">//先求左侧的值</span></span><br></pre></td></tr></table></figure><ol start="2"><li><pre><code>先求右侧的值：</code></pre></li></ol><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">*(pbeg + <span class="number">1</span>) = <span class="built_in">toupper</span>(*pbeg);<span class="comment">//先求右侧的值</span></span><br></pre></td></tr></table></figure><p>也可能采用别的什么方法处理它。<br>故，我们要避免这种双侧使用还进行改变值的行为在一句话上，应该分开描述，避免歧义。</p><h2 id="5-3-类型转换">5.3 类型转换</h2><p>C语言旧知识：<br>算术转换：<br><a href="https://blog.csdn.net/yuejisuo1948/article/details/121666396">C/C++ 算术转换规则 (以及容易踩的坑)</a></p><p>这里主要说一下显式转换（C++新增的强制类型转换）：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cast-<span class="built_in">name</span>&lt;type&gt;(expression);</span><br></pre></td></tr></table></figure><p>其中，type是转换的目标类型，而expression是要转换的值。（如果type是引用类型，则结果为左值）<br>cast-name则是<code>static_cast</code>、<code>dynamic_cast</code>、<code>const_cast</code>、<code>reinterpret_cast</code>中的一种。<br><code>dynamic_cast</code>涉及到一些类的知识，这里我们也暂时放下不表。</p><p>详细可以查阅：<br><a href="https://blog.csdn.net/q610098308/article/details/115915802">C++强制类型转换</a></p><blockquote><p>强制类型转换应该避免使用，它干扰了正常的类型检查。</p></blockquote><h3 id="5-3-1-static-cast">5.3.1 static_cast</h3><p>任何具有明确定义的类型转换，只要不包含底层const（实际的对象为const），都能使用<code>static_cast</code>。<br>例如，把将一个<code>int</code>运算对象强制转换为<code>double</code>类型，使整个式子执行浮点数除法：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> i,j;</span><br><span class="line">   <span class="type">double</span> slope = <span class="built_in">static_cast</span>&lt;<span class="type">double</span>&gt;(j)/i;</span><br></pre></td></tr></table></figure><p>当需要把一个较大的算术类型赋值给较小的类型时，<code>static_cast</code>将会非常有用。<br>此时<code>static_cast</code>会告诉编译器，我不在乎这些精度损失，给我关闭警告。</p><p><code>static_cast</code>对于编译器无法自动执行的类型转换也非常有用。例如，我们可以使<code>static_cast</code>找回存在于<code>void *</code>指针中的值。（<code>void *</code>指针可用于存放任意对象的地址，但因为不知其类型，故无法确定能在该对象上做哪些操作）</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">double</span> i = <span class="number">5</span>;</span><br><span class="line">   <span class="type">void</span> *p = &amp;i;</span><br><span class="line">   <span class="type">double</span> *dp = <span class="built_in">static_cast</span>&lt;<span class="type">double</span> *&gt;(p);</span><br><span class="line">   cout&lt;&lt;*dp&lt;&lt;endl;</span><br></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">输出：<span class="number">5</span></span><br></pre></td></tr></table></figure><p>但若类型不一致，例如<code>void *</code>存入了一个<code>int</code>类型的地址，而用<code>double</code>类型取回，则会出错</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> i = <span class="number">5</span>;</span><br><span class="line">   <span class="type">void</span> *p = &amp;i;</span><br><span class="line">   <span class="type">double</span> *dp = <span class="built_in">static_cast</span>&lt;<span class="type">double</span> *&gt;(p);</span><br><span class="line">   cout&lt;&lt;*dp&lt;&lt;endl;</span><br></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">输出：<span class="number">8.00855e-307</span></span><br></pre></td></tr></table></figure><p>而，<code>long</code>用<code>int</code>取，在<code>long</code>变量没有超过<code>int</code>范围时也可以正确</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">long</span> i = <span class="number">5</span>;</span><br><span class="line">   <span class="type">void</span> *p = &amp;i;</span><br><span class="line">   <span class="type">int</span> *ip = <span class="built_in">static_cast</span>&lt;<span class="type">int</span> *&gt;(p);</span><br><span class="line">   cout&lt;&lt;*ip&lt;&lt;endl;</span><br></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">输出：<span class="number">5</span></span><br></pre></td></tr></table></figure><p>C语言扎实的朋友可能早就明白了，这和每个算术类型在地址中的存储方式和读取方式有关，这里就不过多赘述了。</p><h3 id="5-3-2-const-cast">5.3.2 const_cast</h3><p><code>static_cast</code>不能改变底层const，而<code>const_cast</code>只能改变cosnt特性</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">char</span> i = <span class="string">&#x27;a&#x27;</span>;</span><br><span class="line">   <span class="type">const</span> <span class="type">char</span> *pc = &amp;i;</span><br><span class="line">   <span class="type">char</span> *p = <span class="built_in">const_cast</span>&lt;<span class="type">char</span> *&gt;(pc);</span><br><span class="line">   *p = <span class="string">&#x27;b&#x27;</span>;</span><br></pre></td></tr></table></figure><p>这样，我们就得到了<code>p</code>——去掉了const特性的<code>pc</code>。<br><code>const_cast</code><strong>只能</strong>改变表达式的常量属性，其他的强制类型转换则不能转换掉const特性<br><code>const_cast</code>常用于函数重载的上下文中，这个我们将在后文提到。</p><h3 id="5-3-3-reinterpret-cast">5.3.3 reinterpret_cast</h3><p><code>reinterpret_cast</code>通常用于为运算对象的位模式提供较低层次上的重新解释。比如让<code>int *</code>指针转换为<code>char *</code>指针。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> *ip;</span><br><span class="line">   <span class="type">char</span> *cp = <span class="built_in">reinterpret_cast</span>&lt;<span class="type">char</span> *&gt;(ip);</span><br></pre></td></tr></table></figure><blockquote><p>在使用<code>reinterpret_cast</code>强制转换过程仅仅只是比特位的拷贝，因此在使用过程中需要特别谨慎！</p></blockquote><p>故，我们刚刚让<code>int *</code>指针转换为<code>char *</code>指针，就存在<code>int</code>超过<code>char</code>类型的比特位，<code>char</code>无法得到，造成一定的错误。</p><h3 id="5-3-4-旧式的强制类型转换">5.3.4 旧式的强制类型转换</h3><p>早期的C风格的强制类型转换也被继承了下来：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">char</span> val = <span class="string">&#x27;a&#x27;</span>;</span><br><span class="line">   cout&lt;&lt;(<span class="type">int</span>)val&lt;&lt;endl;</span><br></pre></td></tr></table></figure><p>这种旧式的强制类型转换在所涉及的类型不同，分别具有<code>static_cast</code>、<code>const_cast</code>、<code>reinterpret_cast</code>相似的行为。<br>不过，与新版本的强制类型转换相比，旧式的强制类型转换从表现形式上来说，不是那么清晰明了，容易看漏，所以一旦转换过程中出现了问题，追踪起来也比较困难。</p><h1 id="6-语句">6 语句</h1><p>大部分的语句与C语言无异（应该说语句这个东西，每个语言都大同小异）<br>我们就主要说说一些C++特别的地方。</p><h2 id="6-1-for语句">6.1 for语句</h2><h3 id="6-1-1-传统for语句">6.1.1 传统for语句</h3><p>我们温习一下传统for语句：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (init-statement; condition; expression) </span><br><span class="line">   statement;</span><br></pre></td></tr></table></figure><p>会发生以下的事情：</p><ol><li>循环开始时，执行一次init-statement。</li><li>接下来判断condition。</li><li>如果为true，则执行循环体。</li><li>最后执行expression。</li></ol><p>我们可以按照需求省略其中的一些部分。</p><h3 id="6-1-2-范围for语句">6.1.2 范围for语句</h3><p>C++11 新标准引入的更简单的for语句，这种语句可以遍历容器或者其他序列的所有元素。<br>之前我们也见过和用过，形如：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (declaration : expression)</span><br><span class="line">statement;</span><br></pre></td></tr></table></figure><p>expression必须是一个序列，比如数组、vector、string等类型的对象，这些类型的共同特点就是拥有能返回迭代器的<code>begin</code>和<code>end</code>成员。<br>declaration定义一个变量，要保证序列中每个变量都能转换为该变量的类型。一般使用<code>auto</code>类型说明符。<br>每次迭代都会重新定义变量，并将其初始化为序列的下一个值。之后才继续执行statement。</p><p>这次讲一点不一样的，我们来分析一下范围for语句的实质，不难分析得出，范围for语句的定义来源于与之等价的传统for语句：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">vector&lt;<span class="type">int</span>&gt; v = &#123;<span class="number">1</span>, <span class="number">2</span>&#125;;</span><br><span class="line">   <span class="keyword">for</span> (<span class="keyword">auto</span> beg = v.<span class="built_in">begin</span>(), end = v.<span class="built_in">end</span>(); beg != end; ++beg) &#123;<span class="comment">//预存end，防止序列添加和删除元素，让end无效</span></span><br><span class="line">       <span class="keyword">auto</span> &amp;r = *beg;<span class="comment">//若要修改beg，得定义为引用类型</span></span><br><span class="line">       r *= <span class="number">2</span>;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p>写成范围for就是：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">vector&lt;<span class="type">int</span>&gt; v = &#123;<span class="number">1</span>, <span class="number">2</span>&#125;;</span><br><span class="line">   <span class="keyword">for</span> (<span class="keyword">auto</span> &amp;r : v)</span><br><span class="line">       r *= <span class="number">2</span>;</span><br></pre></td></tr></table></figure><h2 id="6-2-异常处理">6.2 异常处理</h2><p>异常就是运行时的反常（相当于没说w(ﾟДﾟ)w）<br>当一个程序出现异常的时候，就要异常处理。检测出问题的部分发出某种信号以表明程序遇到了故障，无法继续下去了。<br>如果程序中含有可能引发异常的代码，那么通常我们会有专门的代码来处理问题。例如程序的问题是输入无效，则异常处理可能会要求用户输入正确信息之类的。<br>异常处理机制为程序提供了异常检测和异常处理两部分协作提供支持。<br>在C++中，就有：</p><ol><li>throw 表达式</li><li>try语句块</li><li>一套异常类</li></ol><h3 id="6-2-1-throw表达式">6.2.1 throw表达式</h3><p>程序的异常检测部分使用throw表达式引发一个异常。（意思是异常检测部分使用throw表达式来表示它遇到了无法处理的问题）<br>一般为<code>throw</code>紧跟着一个表达式，表达式的类型就是抛出的异常类型。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdexcept&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> std::runtime_error;</span><br></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">char</span> choose;</span><br><span class="line">   cout&lt;&lt;<span class="string">&quot;please input y or n&quot;</span>&lt;&lt;endl;</span><br><span class="line">   cin&gt;&gt;choose;</span><br><span class="line">   <span class="keyword">if</span>(choose != <span class="string">&#x27;y&#x27;</span> &amp;&amp; choose != <span class="string">&#x27;n&#x27;</span>)</span><br><span class="line">       <span class="keyword">throw</span> <span class="built_in">runtime_error</span>(<span class="string">&quot;choose must be y or n&quot;</span>);</span><br><span class="line">   <span class="keyword">return</span> <span class="number">0</span>;</span><br></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入:a</span><br><span class="line">输出:terminate called after throwing an instance of <span class="string">&#x27;std::runtime_error&#x27;</span></span><br><span class="line">  <span class="built_in">what</span>():  choose must be y <span class="keyword">or</span> n</span><br></pre></td></tr></table></figure><p>当输入的不是<code>'y'</code>或者<code>'n'</code>就抛出一个异常，该异常的类型为<code>runtime_error</code>的对象。抛出异常并终止当前函数，并把控制权转移给能处理该异常的代码。<br>类型<code>runtime_error</code>是标准库异常类型的一种，定义在<code>&lt;stdexcept&gt;</code>头文件中。关于更多的标准库异常类型，笔者打算在接下来的_6.2.3 标准异常_中介绍。这里我们初始化<code>runtime_error</code>对象，给它提供一个string对象或者一个C风格字符串，来表达关于异常的辅助信息。</p><h3 id="6-2-2-try语句块">6.2.2 try语句块</h3><p>try语句块的通用语法为：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">       program-statement;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="built_in">catch</span> (exception-declaration) &#123;</span><br><span class="line">       handler-statement;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="built_in">catch</span> (exception-declaration) &#123;</span><br><span class="line">       handler-statement;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p><code>try</code>的块里装需要异常检测的代码<br><code>catch</code>后跟exception-declaration是异常声明，块里是异常处理的代码。<br><code>catch</code>块中的代码一旦执行完了，程序就会跳转到try语句块最后一个<code>catch</code>子句之后的那条语句继续执行。</p><p>我们简单编写一个模拟密码输入程序：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">string password;</span><br><span class="line">   <span class="keyword">while</span> (cout&lt;&lt;<span class="string">&quot;please input your password&quot;</span>&lt;&lt;endl, cin&gt;&gt;password)</span><br><span class="line">   &#123;</span><br><span class="line">       <span class="keyword">try</span> &#123;</span><br><span class="line">           <span class="keyword">if</span>(password == <span class="string">&quot;123456&quot;</span>)</span><br><span class="line">           &#123;</span><br><span class="line">               cout&lt;&lt;<span class="string">&quot;hello world&quot;</span>&lt;&lt;endl;</span><br><span class="line">               <span class="keyword">break</span>;</span><br><span class="line">           &#125;</span><br><span class="line"></span><br><span class="line">           <span class="keyword">throw</span> <span class="built_in">runtime_error</span>(<span class="string">&quot;password error&quot;</span>);</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="built_in">catch</span> (runtime_error err)</span><br><span class="line">       &#123;</span><br><span class="line">           cout&lt;&lt;err.<span class="built_in">what</span>()&lt;&lt;<span class="string">&quot;\nTry Again ? Enter y or n&quot;</span>&lt;&lt;endl;</span><br><span class="line">           <span class="type">char</span> c;</span><br><span class="line">           cin &gt;&gt; c;</span><br><span class="line">           <span class="keyword">if</span>(!cin || c == <span class="string">&#x27;n&#x27;</span>)</span><br><span class="line">               <span class="keyword">break</span>;</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p>我们在<code>try</code>里检查异常，一旦密码错误，我们就<code>throw</code>一个异常<br>而在对应的<code>catch</code>里异常处理语句就会执行<br>这里的catch异常声明了一个<code>runtime_error</code>类型的异常<code>err</code>，并调用了它的成员函数<code>what</code>（每个标准库异常类都有成员函数<code>what</code>），这些函数没有参数，返回的是一个C风格字符串（即<code>const char *</code>），内容是我们之前初始化这个异常的<br>表达关于这个异常的辅助信息那段字符串。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">输出:please input your password</span><br><span class="line">输入:<span class="number">156</span></span><br><span class="line">输出:password error</span><br><span class="line"> Try Again ? Enter y <span class="keyword">or</span> n</span><br><span class="line">输入:y</span><br><span class="line">输出:please input your password</span><br><span class="line">输入:<span class="number">123456</span></span><br><span class="line">输出:hello world</span><br><span class="line"></span><br><span class="line"> Process finished with exit code <span class="number">0</span></span><br></pre></td></tr></table></figure><p>有一点需要注意的是：<br>在复杂的系统中，程序在遇到抛出异常的代码前，其执行路径就已经经过了一个又一个的try语句块了。（一个try语句块中还有一个try语句块，一层套一层，很多层那种）<br>而寻找处理代码的过程和函数调用链正好相反。当异常抛出时，首先搜索抛出该异常的函数。如果没找到找到匹配的catch子句，终止该函数，并在调用该函数的函数中寻找。一层套一层，以此内推，直到找到为止。<br>如果没有找到呢，程序就转入名为<code>terminate</code>的标准库函数。该函数的行为与系统有关，一般情况下，执行该函数程序就会非正常退出了。</p><h3 id="6-2-3-标准异常">6.2.3 标准异常</h3><p>C++标准库定义了一组类，用于报告标准库遇到的问题。</p><ul><li>头文件<code>&lt;exception&gt;</code>定义了最通用的异常类exception。它只报告异常的发生，不提供别的信息（除了自己继承，关于类的继承，笔者也会在后续章节介绍）</li></ul><p>可以参考：<br><a href="https://www.runoob.com/cplusplus/cpp-exceptions-handling.html">C++ 异常处理</a></p><ul><li>头文件<code>&lt;stdexcept&gt;</code>定义了几种常用的异常类：<br><img src="https://img-blog.csdnimg.cn/4a3c279804ea43ff87bbc47fcec71dff.png#pic_center" alt=""></li></ul><p>可以参考：<br><a href="https://blog.csdn.net/qingdujun/article/details/75195061">浅谈C++ 标准库中的异常 —— stdexcept类</a></p><ul><li>头文件<code>&lt;new&gt;</code>定义了<code>bad_alloc</code></li><li>头文件<code>&lt;typeinfo&gt;</code>定义了<code>bad_cast</code></li></ul><p>除了<code>exception</code>、<code>bad_alloc</code>、<code>bad_cast</code>是默认初始化，其他的都需要提供string对象或者C风格字符串作为初始值表示错误相关信息。<br>异常类型也只定义了一个名为<code>what</code>的成员函数，无参数，返回值为一个C风格字符串，提供关于异常的文本信息。<code>what</code>函数返回的C风格字符串的内容与异常对象的类型有关。如果异常类型有一个字符串初始值，则返回这个字符串；对于那些没有字符串的异常类型来说，<code>what</code>函数返回的内容由编译器来定。</p>]]></content>
      
      
      <categories>
          
          <category> 跟我一起从C到C++ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> c++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>标准库类型——跟我一起从C到C++(第二期)</title>
      <link href="/2023/01/27/C++/%E6%A0%87%E5%87%86%E5%BA%93%E7%B1%BB%E5%9E%8B%E2%80%94%E2%80%94%E8%B7%9F%E6%88%91%E4%B8%80%E8%B5%B7%E4%BB%8EC%E5%88%B0C++(%E7%AC%AC%E4%BA%8C%E6%9C%9F)/"/>
      <url>/2023/01/27/C++/%E6%A0%87%E5%87%86%E5%BA%93%E7%B1%BB%E5%9E%8B%E2%80%94%E2%80%94%E8%B7%9F%E6%88%91%E4%B8%80%E8%B5%B7%E4%BB%8EC%E5%88%B0C++(%E7%AC%AC%E4%BA%8C%E6%9C%9F)/</url>
      
        <content type="html"><![CDATA[<span id="more"></span><h3 id="文章目录">文章目录</h3><ul><li><a href="#4-%E6%A0%87%E5%87%86%E5%BA%93%E7%B1%BB%E5%9E%8B">4 标准库类型</a><ul><li><a href="#41-string">4.1 string</a><ul><li><a href="#411-%E5%91%BD%E5%90%8D%E7%A9%BA%E9%97%B4">4.1.1 命名空间</a></li><li><a href="#412-%E5%88%9D%E8%AF%86%E8%BE%93%E5%85%A5%E8%BE%93%E5%87%BA">4.1.2 初识输入输出</a></li><li><a href="#413-%E5%88%9D%E5%A7%8B%E5%8C%96string">4.1.3 初始化string</a></li><li><a href="#414-%E6%93%8D%E4%BD%9Cstring%E5%AF%B9%E8%B1%A1">4.1.4 操作string对象</a><ul><li><a href="#4141-cin%E8%AF%BB%E5%8F%96">4.1.4.1 cin读取</a></li><li><a href="#4142-getline%E8%A1%8C%E8%AF%BB%E5%8F%96">4.1.4.2 getline行读取</a></li><li><a href="#4143-empty%E5%92%8Csize">4.1.4.3 empty和size</a></li><li><a href="#4144-%E8%BF%90%E7%AE%97string%E5%AF%B9%E8%B1%A1">4.1.4.4 运算string对象</a></li></ul></li><li><a href="#415-%E5%A4%84%E7%90%86string%E5%AF%B9%E8%B1%A1%E4%B8%AD%E7%9A%84%E5%AD%97%E7%AC%A6">4.1.5 处理string对象中的字符</a><ul><li><a href="#4151-%E5%A4%84%E7%90%86%E5%8D%95%E4%B8%AA%E5%AD%97%E7%AC%A6%E7%9A%84%E5%87%BD%E6%95%B0">4.1.5.1 处理单个字符的函数</a></li><li><a href="#4152-%E4%B8%8D%E4%B8%80%E6%A0%B7%E7%9A%84for">4.1.5.2 不一样的for</a><ul><li><a href="#41521-for%E6%A3%80%E6%9F%A5">4.1.5.2.1 for检查</a></li><li><a href="#41522-for%E6%94%B9%E5%8F%98">4.1.5.2.2 for改变</a></li><li><a href="#41523-%E4%B8%8B%E6%A0%87%E6%89%A7%E8%A1%8C%E9%9A%8F%E6%9C%BA%E8%AE%BF%E9%97%AE">4.1.5.2.3 下标执行随机访问</a></li></ul></li></ul></li></ul></li><li><a href="#42-vector">4.2 vector</a><ul><li><a href="#421-%E5%88%9D%E8%AF%86vector">4.2.1 初识vector</a></li><li><a href="#421-%E5%AE%9A%E4%B9%89%E5%92%8C%E5%88%9D%E5%A7%8B%E5%8C%96">4.2.1 定义和初始化</a></li><li><a href="#422-%E6%93%8D%E4%BD%9Cvector">4.2.2 操作vector</a></li></ul></li><li><a href="#43-%E8%BF%AD%E4%BB%A3%E5%99%A8">4.3 迭代器</a><ul><li><a href="#431-%E4%BD%BF%E7%94%A8%E8%BF%AD%E4%BB%A3%E5%99%A8">4.3.1 使用迭代器</a></li><li><a href="#432-%E8%BF%AD%E4%BB%A3%E5%99%A8%E7%B1%BB%E5%9E%8B">4.3.2 迭代器类型</a></li><li><a href="#433-%E8%BF%AD%E4%BB%A3%E5%99%A8%E6%8C%87%E5%90%91%E5%AE%B9%E5%99%A8">4.3.3 迭代器指向容器</a></li></ul></li><li><a href="#44-%E6%95%B0%E7%BB%84">4.4 数组</a><ul><li><a href="#441-%E6%95%B0%E7%BB%84%E6%96%B0%E5%A2%9E%E5%8A%9F%E8%83%BD">4.4.1 数组新增功能</a></li><li><a href="#442-%E6%95%B0%E7%BB%84%E4%B8%8E%E6%8C%87%E9%92%88">4.4.2 数组与指针</a></li><li><a href="#443-c%E9%A3%8E%E6%A0%BC%E5%AD%97%E7%AC%A6%E4%B8%B2">4.4.3 C风格字符串</a></li><li><a href="#444-%E4%B8%8E%E6%97%A7%E4%BB%A3%E7%A0%81%E7%9A%84%E6%8E%A5%E5%8F%A3">4.4.4 与旧代码的接口</a><ul><li><a href="#4441-%E6%B7%B7%E7%94%A8string%E5%92%8Cc%E9%A3%8E%E6%A0%BC%E5%AD%97%E7%AC%A6%E4%B8%B2">4.4.4.1 混用string和C风格字符串</a></li><li><a href="#4442-%E4%BD%BF%E7%94%A8%E6%95%B0%E7%BB%84%E5%88%9D%E5%A7%8B%E5%8C%96vector%E5%AF%B9%E8%B1%A1">4.4.4.2 使用数组初始化vector对象</a></li></ul></li><li><a href="#445-%E5%A4%9A%E7%BB%B4%E6%95%B0%E7%BB%84">4.4.5 多维数组</a><ul><li><a href="#4451-%E6%93%8D%E4%BD%9C%E5%A4%9A%E7%BB%B4%E6%95%B0%E7%BB%84">4.4.5.1 操作多维数组</a></li><li><a href="#4452-%E5%A4%9A%E7%BB%B4%E6%95%B0%E7%BB%84%E5%92%8C%E6%8C%87%E9%92%88">4.4.5.2 多维数组和指针</a></li></ul></li></ul></li></ul></li></ul><h1 id="4-标准库类型">4 标准库类型</h1><h2 id="4-1-string">4.1 string</h2><h3 id="4-1-1-命名空间">4.1.1 命名空间</h3><p>为防止名字冲突(出现同名),C++引入了namespace（命名空间），<br>通过<code>::</code>运算符限定某个名字属于哪个namespace</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="keyword">namespace</span> myspace</span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> a;</span><br><span class="line">    <span class="type">int</span> b;</span><br><span class="line">    <span class="type">int</span> c;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    myspace::a = <span class="number">5</span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>,myspace::a);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>为了方便，我们也可以直接使用</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span>::name</span><br></pre></td></tr></table></figure><p>一旦声明了上述语句，就可以直接访问namespace里的名字了</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="keyword">namespace</span> myspace</span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> a;</span><br><span class="line">    <span class="type">int</span> b;</span><br><span class="line">    <span class="type">int</span> c;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">using</span> myspace::a;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    a = <span class="number">5</span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>, a);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4-1-2-初识输入输出">4.1.2 初识输入输出</h3><p>除了我们自己定义的这些namespace外，C++还为我们提供了一个非常好用的namespace——<code>std</code>。<br>之前我们一直在用的<code>scanf</code>、<code>printf</code>是一种输入输出手段，依赖的是<code>&lt;cstdio&gt;</code>库。<br>而C++也为我们准备了一个全面的标准库，其中就有IO机制（输入输出）——<code>&lt;iostream&gt;</code><br><code>iostream</code>包含<code>istream</code>和<code>ostream</code>，它们分别表示输入流和输出流（字面含义）。一个流就是字符序列，是从IO设备读取或者写入IO设备，是表达：随着时间流逝，字符是顺序生成或者消耗 的一种概念。</p><p>我们今天主要认识的有<code>cin</code>和<code>cout</code>，以及<code>endl</code><br>它们依赖<code>&lt;iostream&gt;</code>标准库，使用<code>std</code>的namespace，所以我们要：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> std::cin;</span><br><span class="line"><span class="keyword">using</span> std::cout;</span><br><span class="line"><span class="keyword">using</span> std::endl;</span><br></pre></td></tr></table></figure><p>接着我们编写输入输出</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> a;</span><br><span class="line">   cin&gt;&gt;a;</span><br><span class="line">   cout&lt;&lt;a&lt;&lt;endl;</span><br></pre></td></tr></table></figure><p>这里的<code>&gt;&gt;</code>和<code>&lt;&lt;</code>不再是位运算符号，至少在<code>cin</code>和<code>cout</code>后面跟着的时候不是。<br>在此处<code>&gt;&gt;</code>意为输入运算符，&lt;&lt;则为输出运算符。<br><code>cin&gt;&gt;a;</code>意为从给定的<code>istream</code>读入数据，并存在给定对象a中。<br>实际上，就是输入<code>a</code>的意思。<br>而<code>cout&lt;&lt;a</code>将给定的对象<code>a</code>写入<code>ostream</code>对象中<br>实际上，就是输出<code>a</code>的意思。<br>不过，<code>cout&lt;&lt;</code>运算完成后返回结果为其左侧的对象<br>故我们得到的最后结果可以看作：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(cout&lt;&lt;a)&lt;&lt;endl;</span><br></pre></td></tr></table></figure><p>而<code>endl</code>，则为操作符，写入<code>endl</code>的效果有：</p><ol><li>结束当前行（<code>'\n'</code>）</li><li>将与设备关联的缓冲区中的内容刷程序之中。（可以保证到目前为止程序所产生的所有输出都真正写入输出流中，而不是在内存中等待写入流）</li></ol><p>当然<code>cin&gt;&gt;</code>最后返回的也是其左边的对象作为计算结果。<br>故：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cin&gt;&gt;a;</span><br><span class="line">cin&gt;&gt;b;</span><br></pre></td></tr></table></figure><p>可以写作</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cin&gt;&gt;a&gt;&gt;b;</span><br></pre></td></tr></table></figure><h3 id="4-1-3-初始化string">4.1.3 初始化string</h3><p>标准库有个神奇玩意<code>string</code>，表示可变长的字符序列。<br><code>string</code>作为标准库的一份子，依赖头文件<code>&lt;string&gt;</code>，使用std命名空间：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> std::string;</span><br></pre></td></tr></table></figure><p>初始化</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">string s1;<span class="comment">//空的</span></span><br><span class="line">   string s2 = <span class="string">&quot;Hello World&quot;</span>;<span class="comment">//字符串</span></span><br><span class="line">   <span class="function">string <span class="title">s3</span><span class="params">(<span class="number">10</span>, <span class="string">&#x27;a&#x27;</span>)</span></span>;<span class="comment">//10个a</span></span><br><span class="line">   <span class="function">string <span class="title">s4</span><span class="params">(s2)</span></span>;<span class="comment">//s4 = s2</span></span><br></pre></td></tr></table></figure><p>输出：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">Hello World</span><br><span class="line">aaaaaaaaaa</span><br><span class="line">Hello World</span><br></pre></td></tr></table></figure><p>其中，用<code>=</code>符号进行初始化的叫拷贝初始化；而使用<code>()</code>进行初始化的叫作直接初始化。</p><h3 id="4-1-4-操作string对象">4.1.4 操作string对象</h3><h4 id="4-1-4-1-cin读取">4.1.4.1 cin读取</h4><p>使用string最爽的地方就在于可以无畏C语言字符串定长的限制，可以输多少存多少。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> std::cin;</span><br><span class="line"><span class="keyword">using</span> std::cout;</span><br><span class="line"><span class="keyword">using</span> std::endl;</span><br><span class="line"><span class="keyword">using</span> std::string;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    string s;</span><br><span class="line">    cin&gt;&gt;s;</span><br><span class="line">    cout&lt;&lt;s&lt;&lt;endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>不过，在读写使用上有些区别：<br>比如上面的程序:</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：   hello world </span><br><span class="line">输出：hello</span><br></pre></td></tr></table></figure><p>可以看见，string对象会自动忽略开头的空白，并从第一个真正有效的字符开始读取，直到遇到下一次空白为止。</p><p>解决这个问题，我们可以采用两个string类型来存放：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cin&gt;&gt;s1&gt;&gt;s2;</span><br></pre></td></tr></table></figure><p>但万一string是一个不定数量的未知字符串：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> std::cin;</span><br><span class="line"><span class="keyword">using</span> std::cout;</span><br><span class="line"><span class="keyword">using</span> std::endl;</span><br><span class="line"><span class="keyword">using</span> std::string;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    string word;</span><br><span class="line">    <span class="keyword">while</span> (cin&gt;&gt;word)</span><br><span class="line">        cout&lt;&lt;word&lt;&lt;endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">输入:cout fuck r</span><br><span class="line">输出:cout</span><br><span class="line"> fuck</span><br><span class="line"> r</span><br></pre></td></tr></table></figure><p><code>cin</code>在遇到不是string类型的时候就返回为假，即读到空格时返回为假。<br>利用<code>cin</code>的这种特性可以实现一个不定数量的未知字符串读取</p><h4 id="4-1-4-2-getline行读取">4.1.4.2 getline行读取</h4><p>但是，有人又要说了，你这个也不能实现一行读取啊，你一行分开处理，影响了实时性啊。</p><p>于是我们引入<code>getline</code>。<code>getline</code>可以读取一整行，遇到换行符才结束读取返回操作。<br>于是：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">string word;</span><br><span class="line">   <span class="keyword">while</span> (<span class="built_in">getline</span>(cin, word))</span><br><span class="line">       cout&lt;&lt;word&lt;&lt;endl;</span><br></pre></td></tr></table></figure><h4 id="4-1-4-3-empty和size">4.1.4.3 empty和size</h4><p><strong>empty</strong><br><code>empty</code>可以根据string对象是否为空返回一个对应的布尔值</p><p><code>empty</code>为空就返回假<br><code>empty</code>不为空就返回真</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">string word;</span><br><span class="line">   <span class="keyword">while</span> (<span class="built_in">getline</span>(cin, word))</span><br><span class="line">       <span class="keyword">if</span> (!word.<span class="built_in">empty</span>())</span><br><span class="line">           cout&lt;&lt;word&lt;&lt;endl;</span><br><span class="line">   <span class="keyword">return</span> <span class="number">0</span>;</span><br></pre></td></tr></table></figure><p><strong>size</strong><br><code>size</code>可以返回string对象的长度。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">string word;</span><br><span class="line">   <span class="keyword">while</span> (<span class="built_in">getline</span>(cin, word))</span><br><span class="line">       <span class="keyword">if</span> (!word.<span class="built_in">empty</span>() &amp;&amp; word.<span class="built_in">size</span>() &gt; <span class="number">5</span>)</span><br><span class="line">           cout&lt;&lt;word&lt;&lt;endl;</span><br><span class="line">   <span class="keyword">return</span> <span class="number">0</span>;</span><br></pre></td></tr></table></figure><p>不过，有一点要提醒你<br><code>size()</code>返回的类型不是<code>int</code>，而是<code>size_type</code><br>虽然我们并不清楚<code>size_type</code>类型的细节，但是有一点要肯定的是：这是一个无符号类型的值，而且足够存下任何string的大小。<br>例如，假设<code>n</code>是一个具有负值的<code>int</code>，则表达式<code>s.size() &lt; n</code>的判断结果几乎都是true，这是因为负值的会自动转化成一个比较大的无符号值。</p><h4 id="4-1-4-4-运算string对象">4.1.4.4 运算string对象</h4><p><strong>比较string</strong><br>string不像C语言的字符串，需要使用<code>strcmp</code>；<br>string可以直接使用比较运算符(<code>==</code>、<code>!=</code>、<code>&gt;=</code> 、<code>&lt;=</code>、<code>&lt;</code>、<code>&gt;</code>)。<br>比较运算符是逐一比较string对象的字符<br>其中，相等性运算符(<code>==</code>、<code>!=</code>)是分别检验两个string对象相等与否，string对象相等意味着他们的长度和所含字符全部相同。<br>而其他的运算符就是（<code>&gt;=</code> 、<code>&lt;=</code>、<code>&lt;</code>、<code>&gt;</code>）：</p><ol><li><pre><code>如果两个string对象长度不同，而且较短的string对象的每个字符都与较长的string对象对应位置上的字符相同的话，就说较短string对象小于较长的string对象。</code></pre></li><li><pre><code>如果两个string对象在某些对应位置上不一致，则string对象比较的结果就是第一对相异字符的比较。</code></pre></li></ol><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">string s1 = <span class="string">&quot;5b6&quot;</span>;</span><br><span class="line">   string s2 = <span class="string">&quot;5a77777&quot;</span>;</span><br><span class="line">   cout&lt;&lt;(s1 &gt; s2)&lt;&lt;endl;</span><br></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">输出：<span class="number">1</span></span><br></pre></td></tr></table></figure><p><strong>赋值string</strong><br>也可以直接<code>=</code>赋值</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">string s1 = <span class="string">&quot;5b6&quot;</span>;</span><br><span class="line">   string s2;</span><br><span class="line">   s2 = s1;</span><br><span class="line">   cout&lt;&lt;s2&lt;&lt;endl;</span><br></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">输出：<span class="number">5b</span>6</span><br></pre></td></tr></table></figure><p><strong>相加string</strong><br>直接<code>+</code>号相加，得到字符串相连</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">string s1 = <span class="string">&quot;wolrd&quot;</span>;</span><br><span class="line">   string s2 = <span class="string">&quot;hello&quot;</span>;</span><br><span class="line">   string s3 = s2 + s1;</span><br><span class="line">   cout&lt;&lt;s3&lt;&lt;endl;</span><br></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">输出：hellowolrd</span><br></pre></td></tr></table></figure><p>也可以与字面值相加</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">string s3 = s2 + <span class="string">&quot; &quot;</span> + s1;</span><br><span class="line">cout&lt;&lt;s3&lt;&lt;endl;</span><br></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">输出：hello wolrd</span><br></pre></td></tr></table></figure><p>不过，字面值有些需要注意的地方：</p><blockquote><p>因为某些历史原因，也为了和C兼容，所以C++语言中的字符串字面值并不是标准库类型string的对象。</p></blockquote><p>所以，当我们执行<code>s3 = s2 + &quot; &quot; + s1;</code>的时候，是当string和字面值字符串在一起的时候，把<code>&quot; &quot;</code>转化成了string类型。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">string s4 = <span class="string">&quot;hello&quot;</span> + <span class="string">&quot;wolrd&quot;</span>;<span class="comment">//报错</span></span><br></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">error: invalid operands of types <span class="string">&#x27;const char [6]&#x27;</span> <span class="keyword">and</span> <span class="string">&#x27;const char [6]&#x27;</span></span><br></pre></td></tr></table></figure><h3 id="4-1-5-处理string对象中的字符">4.1.5 处理string对象中的字符</h3><h4 id="4-1-5-1-处理单个字符的函数">4.1.5.1 处理单个字符的函数</h4><p>使用<code>&lt;cctype&gt;</code>头文件中定义一组标准库函数处理这部分工作<br><img src="https://img-blog.csdnimg.cn/887764fd47ae458d9bcd7e3f0348b4f0.png#pic_center" alt=""><br>使用下标索引到字符串的对应字符，并给函数的形参：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">isdigit</span>(s1[<span class="number">0</span>])</span><br></pre></td></tr></table></figure><p>可以参考：<br><a href="https://blog.csdn.net/zy2317878/article/details/79414096">C++——cctype</a><br><a href="https://blog.csdn.net/gyysmall/article/details/12650937">cctype头文件（字符处理库）的使用–gyy整理</a></p><h4 id="4-1-5-2-不一样的for">4.1.5.2 不一样的for</h4><h5 id="4-1-5-2-1-for检查">4.1.5.2.1 for检查</h5><p>C++的for循环和C语言差不多，但他也多了一些属性。<br>假如朋友们学过python，可能还会直呼内行。<br>这个就是C++新标准下的范围for语句。这种语句遍历给定序序列中的每个元素并对序列中的每个值执行某种操作，其语法就是：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (declaration : expression)</span><br><span class="line">statement</span><br></pre></td></tr></table></figure><p>在这里面，expression是一个对象，表示一个序列；declaration是声明对象，用来访问序列中的基础元素。<br>每次迭代(你可以暂时理解为，每次循环时)declaration都会变成expression序列的下一个元素，直到序列末尾。<br>一个string对象可以表示一个字符的序列：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">string <span class="title">s1</span><span class="params">(<span class="string">&quot;world&quot;</span>)</span></span>;</span><br><span class="line">   <span class="keyword">for</span> (<span class="keyword">auto</span> c : s1)</span><br><span class="line">       cout&lt;&lt;c;</span><br><span class="line">   cout&lt;&lt;endl;</span><br></pre></td></tr></table></figure><p>举个复杂点的例子，检查string对象中的标点符号个数：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">string <span class="title">s1</span><span class="params">(<span class="string">&quot;world!!&quot;</span>)</span></span>;</span><br><span class="line">   <span class="keyword">decltype</span>(s1.<span class="built_in">size</span>()) punct_cnt = <span class="number">0</span>;</span><br><span class="line">   <span class="keyword">for</span> (<span class="keyword">auto</span> c : s1)</span><br><span class="line">       <span class="keyword">if</span>(<span class="built_in">ispunct</span>(c))</span><br><span class="line">           ++punct_cnt;</span><br><span class="line">   cout&lt;&lt;punct_cnt&lt;&lt;endl;</span><br></pre></td></tr></table></figure><h5 id="4-1-5-2-2-for改变">4.1.5.2.2 for改变</h5><p>但当你尝试在for中改变每个字符时，你会发现这样的现象：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">string <span class="title">s1</span><span class="params">(<span class="string">&quot;world!!&quot;</span>)</span></span>;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">auto</span> c : s1)</span><br><span class="line">      c = <span class="built_in">toupper</span>(c);<span class="comment">//转大写</span></span><br><span class="line">  cout&lt;&lt;s1&lt;&lt;endl;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">输出：world!!</span><br></pre></td></tr></table></figure><p>咦？没变？好奇怪！</p><p>其实我们分析一下它的实质，不难发现，其实所谓的<code>c</code>只不过是一份序列成员的临时拷贝，但没有作用到序列本身，也就是说我们改了个寂寞。<br>于是，我们稍微加修改：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">string <span class="title">s1</span><span class="params">(<span class="string">&quot;world!!&quot;</span>)</span></span>;</span><br><span class="line">   <span class="keyword">for</span> (<span class="keyword">auto</span> &amp;c : s1)</span><br><span class="line">       c = <span class="built_in">toupper</span>(c);<span class="comment">//转大写</span></span><br><span class="line">   cout&lt;&lt;s1&lt;&lt;endl;</span><br></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">输出：WORLD!!</span><br></pre></td></tr></table></figure><p>我们修改了<code>c</code>的类型，让它成为引用类型，而作用到<code>s1</code>本身。</p><p>或者直接使用下标，实现把第一个词变成大写：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">string <span class="title">s1</span><span class="params">(<span class="string">&quot;hello world!!&quot;</span>)</span></span>;</span><br><span class="line">   <span class="keyword">for</span> (<span class="keyword">decltype</span>(s1.<span class="built_in">size</span>()) index = <span class="number">0</span>;index != s1.<span class="built_in">size</span>() &amp;&amp; !<span class="built_in">isspace</span>(s1[index]);++index)</span><br><span class="line">       s1[index] = <span class="built_in">toupper</span>(s1[index]);<span class="comment">//转大写</span></span><br><span class="line">   cout&lt;&lt;s1&lt;&lt;endl;</span><br></pre></td></tr></table></figure><p>老生常谈的下标合法性就不多说了（下标无符号，下标不要超出范围…）</p><h5 id="4-1-5-2-3-下标执行随机访问">4.1.5.2.3 下标执行随机访问</h5><p>实现一个0-15之间的十进制数转十六进制：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">const</span> string hex = <span class="string">&quot;0123456789ABCDEF&quot;</span>;</span><br><span class="line">   string result;</span><br><span class="line">   string::size_type num;</span><br><span class="line">   <span class="keyword">while</span> (cin&gt;&gt;num)</span><br><span class="line">       <span class="keyword">if</span> (num &lt; hex.<span class="built_in">size</span>())</span><br><span class="line">           result += hex[num];</span><br><span class="line">   cout&lt;&lt;result&lt;&lt;endl;</span><br></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：<span class="number">8</span> <span class="number">9</span> <span class="number">7</span> <span class="number">3</span> <span class="number">11</span> e</span><br><span class="line">输出：<span class="number">8973B</span></span><br></pre></td></tr></table></figure><p>这个利用了提前做好的表<code>hex</code>，再按照下标对应的数字去找值，就像查阅字典的一样的方式，非常有python中字典的味道。</p><h2 id="4-2-vector">4.2 vector</h2><h3 id="4-2-1-初识vector">4.2.1 初识vector</h3><p>vector，称为容器，表示对象的集合(其中所有的对象类型相同)。<br>C++语言有类模板，函数模板，其中vector就是一个类模板。而模板本身不是类或者函数，它是一种为编译器生成类或者函数编写的一份说明。编译器根据模板创建类或函数的过程称之为<strong>实例化</strong>，当使用模板的时候，需要指出编译器应把类或函数实例化成何种类型。<br>使用之前：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> std::vector;</span><br></pre></td></tr></table></figure><p>实例化他们的方法就是：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vector&lt;类型&gt; 容器名字;</span><br></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">vector&lt;<span class="type">int</span>&gt; ivec;<span class="comment">//保存int类型对象</span></span><br><span class="line">   vector&lt;string&gt; svec;<span class="comment">//保存string类的类型的对象</span></span><br><span class="line">   vector&lt;vector&lt;string&gt;&gt; svec_vec;<span class="comment">//该向量的元素是vector对象</span></span><br></pre></td></tr></table></figure><h3 id="4-2-1-定义和初始化">4.2.1 定义和初始化</h3><p>初始化vector对象的方法很多，以<code>int</code>为例：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">vector&lt;<span class="type">int</span>&gt; v1;<span class="comment">//空的vector，执行默认初始化</span></span><br><span class="line">   <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">v2</span><span class="params">(v1)</span></span>;<span class="comment">//包含v1所有元素的副本</span></span><br><span class="line">   <span class="comment">//等于 vector&lt;int&gt; v2 = v1;</span></span><br><span class="line">   <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">v3</span><span class="params">(<span class="number">5</span>, <span class="number">1</span>)</span></span>;<span class="comment">//v3里有5个元素，值都为1</span></span><br><span class="line">   <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">v4</span><span class="params">(<span class="number">5</span>)</span></span>;<span class="comment">//v4里有5个元素，都执行了值默认初始化</span></span><br><span class="line">   vector&lt;<span class="type">int</span>&gt; v5&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>&#125;;<span class="comment">//v5里有5个元素，值分别是1-5</span></span><br><span class="line">   <span class="comment">//等于 vector&lt;int&gt; v5 = &#123;1,2,3,4,5&#125;;</span></span><br></pre></td></tr></table></figure><p>这里提到了一个叫默认初始化的东东，这里介绍一下：<br>如果vector的对象元素是内置类型，比如<code>int</code>，则元素初始值自动设为0。<br>如果元素是某种类的类型，比如<code>string</code>，则元素由类初始化。</p><p>当然，圆括号和花括号也各有其区别：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">v1</span><span class="params">(<span class="number">10</span>)</span></span>;<span class="comment">//10个元素</span></span><br><span class="line">   vector&lt;<span class="type">int</span>&gt; v2&#123;<span class="number">10</span>&#125;;<span class="comment">//1个元素，值为10</span></span><br><span class="line">   <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">v3</span><span class="params">(<span class="number">10</span>,<span class="number">1</span>)</span></span>;<span class="comment">//10个1</span></span><br><span class="line">   vector&lt;<span class="type">int</span>&gt; v4&#123;<span class="number">10</span>, <span class="number">1</span>&#125;;<span class="comment">//2个元素， 10和1</span></span><br></pre></td></tr></table></figure><p>圆括号的含义为construct（构造）vector对象。<br>花括号的含义为list initialize（列表初始化）</p><h3 id="4-2-2-操作vector">4.2.2 操作vector</h3><p>我们创建一个空的vector</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vector&lt;<span class="type">int</span>&gt; v;</span><br></pre></td></tr></table></figure><p>接着我们利用vector的成员函数<code>push_back</code>向其中添加元素。<br>这种添加的元素添加在vector容器的末尾(有点类似栈)<br>例如，添加0到100：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt;= <span class="number">100</span>; ++i)</span><br><span class="line">        v.<span class="built_in">push_back</span>(i);</span><br></pre></td></tr></table></figure><p>接着访问它们：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt;= <span class="number">100</span>; ++i)</span><br><span class="line">        cout&lt;&lt;v[i]&lt;&lt;<span class="string">&quot; &quot;</span>;</span><br><span class="line">cout&lt;&lt;endl;</span><br></pre></td></tr></table></figure><p>是的，像数组一样。<br>不过，</p><blockquote><p>vector对象(以及string对象)的下标运算符可用于访问已经存在的元素，而不能用于添加元素。</p></blockquote><p>关于vector操作：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">v.<span class="built_in">empty</span>()<span class="comment">//不含有任何元素，返回为真</span></span><br><span class="line">   v.<span class="built_in">size</span>()<span class="comment">//返回元素的个数,类型为vector&lt;int&gt;::size_type</span></span><br><span class="line">   v.<span class="built_in">push_back</span>(t)<span class="comment">//在v的末尾添加一个值为t的元素</span></span><br><span class="line">   v[n]<span class="comment">//返回第n个位置上的元素的引用</span></span><br><span class="line">   v1 = v2<span class="comment">//把v2中元素的拷贝赋值给v1</span></span><br><span class="line">   v1 = &#123;a,b,c&#125;<span class="comment">//赋值</span></span><br><span class="line">   v1 == v2<span class="comment">//  !、= 、&gt;、 &lt; 、&gt;= 、&lt;=</span></span><br></pre></td></tr></table></figure><p>当然，我们也可以使用刚刚学的范围for来更便捷的处理这个问题：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">vector&lt;<span class="type">int</span>&gt; v;</span><br><span class="line">   vector&lt;<span class="type">int</span>&gt;::size_type max = <span class="number">100</span>;<span class="comment">//和v的类型保持一致,此处都为int</span></span><br><span class="line">   <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; v.<span class="built_in">size</span>() != max; ++i)</span><br><span class="line">       v.<span class="built_in">push_back</span>(i);</span><br><span class="line">   <span class="keyword">for</span> (<span class="keyword">auto</span> i : v)</span><br><span class="line">       cout&lt;&lt;v[i]&lt;&lt;<span class="string">&quot; &quot;</span>;</span><br><span class="line">   cout&lt;&lt;endl;</span><br></pre></td></tr></table></figure><h2 id="4-3-迭代器">4.3 迭代器</h2><p>我们可以使用下标符号来访问string和vector对象的元素，也可以使用范围for。<br>其实还有一种方法——迭代器。<br>除了vector（严格来说，string不属于容器类型，但string支持很多与容器类型类似的操作），还有其他以后学习的标准库定义的容器，都可以使用迭代器（而他们之中也只有少数能使用下标运算符）。</p><h3 id="4-3-1-使用迭代器">4.3.1 使用迭代器</h3><p>迭代器我把它理解成另类指针，一般都是指向容器的开头和结尾，故他们也有各自的成员<code>begin</code>和<code>end</code>。<br>end成员会返回容器尾元素的下一个位置的迭代器，指示一个不存在的“尾后元素”。如果容器为空，则<code>begin</code>和<code>end</code>返回同一个迭代器，即都是“尾后元素”。</p><p>而迭代器操作起来，基本和指针大同小异。<br><img src="https://img-blog.csdnimg.cn/02d43b316fa841988320af30fa40c12d.png#pic_center" alt=""><br>例如令首字母大写：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">string <span class="title">s</span><span class="params">(<span class="string">&quot;hello world&quot;</span>)</span></span>;</span><br><span class="line">   <span class="keyword">if</span> (s.<span class="built_in">begin</span>() != s.<span class="built_in">end</span>())&#123;<span class="comment">//s非空</span></span><br><span class="line">       <span class="keyword">auto</span> it = s.<span class="built_in">begin</span>();</span><br><span class="line">       *it = <span class="built_in">toupper</span>(*it);</span><br><span class="line">   &#125;</span><br><span class="line">   cout&lt;&lt;s&lt;&lt;endl;</span><br></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">输出：Hello world</span><br></pre></td></tr></table></figure><p>当然，也可以将每个单词都首字母大写：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">string <span class="title">s</span><span class="params">(<span class="string">&quot;hello world&quot;</span>)</span></span>;</span><br><span class="line">   <span class="keyword">for</span>(<span class="keyword">auto</span> it = s.<span class="built_in">begin</span>(); it != s.<span class="built_in">end</span>(); ++it)</span><br><span class="line">   &#123;</span><br><span class="line">       <span class="keyword">if</span> (it == s.<span class="built_in">begin</span>())<span class="comment">//第一个词首字母大写</span></span><br><span class="line">           *it = <span class="built_in">toupper</span>(*it);</span><br><span class="line">       <span class="keyword">if</span> (<span class="built_in">isspace</span>(*it))<span class="comment">//空白</span></span><br><span class="line">           *(it + <span class="number">1</span>) = <span class="built_in">toupper</span>(*(it + <span class="number">1</span>));<span class="comment">//空白后一个字符大写</span></span><br><span class="line">   &#125;</span><br><span class="line">   cout&lt;&lt;s&lt;&lt;endl;</span><br></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">输出：Hello World</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/736c51e947854ebd8dca32caa11c4ec0.png#pic_center" alt=""></p><h3 id="4-3-2-迭代器类型">4.3.2 迭代器类型</h3><p>我们之前用<code>auto</code>来声明迭代器，其实类型为<code>string ::iterator</code><br>当然vector也有：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">vector&lt;<span class="type">int</span>&gt; v;</span><br><span class="line">   vector&lt;<span class="type">int</span>&gt;::iterator it;</span><br></pre></td></tr></table></figure><p>也可以声明const迭代器——只能读元素，不能写元素：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vector&lt;<span class="type">int</span>&gt;::const_iterator c_it;</span><br></pre></td></tr></table></figure><h3 id="4-3-3-迭代器指向容器">4.3.3 迭代器指向容器</h3><p>就像C语言的结构体指针一样，可以把<code>(*pA).b</code>简写为<code>pA-&gt;b</code></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">A</span>&#123;</span><br><span class="line">    <span class="type">int</span> a;</span><br><span class="line">    <span class="type">int</span> b=<span class="number">5</span>;</span><br><span class="line">    <span class="type">int</span> c;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">struct</span> <span class="title class_">A</span> AA;</span><br><span class="line">    <span class="keyword">struct</span> <span class="title class_">A</span> *pA = &amp;AA;</span><br><span class="line">    cout&lt;&lt;pA-&gt;b&lt;&lt;endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当出现迭代器指向容器时，也可以把<code>(*it).empty()</code>简写为<code>it-&gt;empty()</code></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; v;</span><br><span class="line">   <span class="keyword">auto</span> it = v.<span class="built_in">begin</span>();</span><br><span class="line">   <span class="keyword">if</span> (!it-&gt;<span class="built_in">empty</span>())</span><br><span class="line">       cout&lt;&lt;<span class="string">&quot;have&quot;</span>&lt;&lt;endl;</span><br></pre></td></tr></table></figure><h2 id="4-4-数组">4.4 数组</h2><h3 id="4-4-1-数组新增功能">4.4.1 数组新增功能</h3><p>我们学习了vector，可以与数组比较一下：</p><table><thead><tr><th></th><th>长度</th></tr></thead><tbody><tr><td>数组</td><td>确定不变</td></tr><tr><td>vector</td><td>可以添加元素</td></tr></tbody></table><p>基于这样的特性，对于某些特殊应用来说程序运行时性能较好，但相应的也损失了一定的灵活性。</p><p>和C语言数组大体相同。</p><p>不过我们学习了<code>constexpr</code>，所以我们的数组大小声明使用<code>constexpr</code>：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">const</span> <span class="type">int</span> a = <span class="number">5</span>;</span><br><span class="line">   <span class="keyword">constexpr</span> <span class="keyword">auto</span> b = a + <span class="number">1</span>;</span><br><span class="line">   <span class="type">int</span> c[b] = &#123;<span class="number">0</span>&#125;;</span><br></pre></td></tr></table></figure><p>也可以声明<code>string</code>和<code>vector</code>数组：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">string strs[<span class="number">5</span>];</span><br><span class="line">   vector&lt;<span class="type">int</span>&gt; v[<span class="number">5</span>];</span><br></pre></td></tr></table></figure><p>是的，和vector一样，数组能够存放大多数类型的对象。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> *ptrs[<span class="number">10</span>];<span class="comment">//ptrs是含有10个整型指针的数组</span></span><br><span class="line"><span class="type">int</span> &amp;refs[<span class="number">1</span>] = <span class="comment">/* ？ */</span>;<span class="comment">//报错：因为不存在引用数组</span></span><br></pre></td></tr></table></figure><p>当然也可以声明数组指针，和C语言函数指针类似：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> arr[<span class="number">10</span>];</span><br><span class="line">   <span class="built_in">int</span> (*Parray)[<span class="number">10</span>] = &amp;arr;<span class="comment">//Parray指向一个含有10个int的数组</span></span><br></pre></td></tr></table></figure><p>有数组指针就有，数组引用（不同于引用数组，数组引用只是对这个一个数组的引用；引用数组不存在，是想让数组的每个元素为引用类型）：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">int</span> (&amp;arrRef)[<span class="number">10</span>] = arr;<span class="comment">//arrRef引用了一个含义10个int的数组</span></span><br></pre></td></tr></table></figure><p>当然，数组和容器不同，是不能直接进行拷贝赋值的。（C语言的时候，大家都明白了嘛）</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">string strs1[<span class="number">5</span>]=&#123;<span class="number">0</span>&#125;;</span><br><span class="line">   string strs2[<span class="number">5</span>]=&#123;<span class="number">0</span>&#125;;</span><br><span class="line">   strs1 = strs2;<span class="comment">//报错</span></span><br></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">error: invalid array assignment</span><br></pre></td></tr></table></figure><p>和string和vector一样，需要遍历每个元素时，最好的方法依旧是范围for：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//生成数组</span></span><br><span class="line"><span class="keyword">constexpr</span> <span class="type">size_t</span> array_size = <span class="number">10</span>;</span><br><span class="line">   <span class="type">int</span> ia[array_size];</span><br><span class="line">   <span class="keyword">for</span>(<span class="type">size_t</span> ix = <span class="number">0</span>; ix &lt; array_size; ++ix)</span><br><span class="line">   &#123;</span><br><span class="line">       ia[ix] = ix;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="comment">//遍历数组</span></span><br><span class="line">   cout&lt;&lt;<span class="string">&quot;Result:&quot;</span>;</span><br><span class="line">   <span class="keyword">for</span>(<span class="keyword">auto</span> i : ia)</span><br><span class="line">       cout&lt;&lt;i&lt;&lt;<span class="string">&quot; &quot;</span>;</span><br><span class="line">   cout&lt;&lt;endl;</span><br></pre></td></tr></table></figure><h3 id="4-4-2-数组与指针">4.4.2 数组与指针</h3><p>在C语言中，我们用指针访问数组：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//生成数组</span></span><br><span class="line"><span class="keyword">constexpr</span> <span class="type">size_t</span> array_size = <span class="number">10</span>;</span><br><span class="line">   <span class="type">int</span> arr[array_size];</span><br><span class="line">   <span class="type">int</span> *e = &amp;arr[array_size];<span class="comment">//末尾是一个不存在的元素（尾后元素）</span></span><br><span class="line">   <span class="keyword">for</span> (<span class="type">int</span> *b = arr; b != e; ++b) &#123;</span><br><span class="line">       *b = <span class="number">1</span>;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="comment">//遍历数组</span></span><br><span class="line">   cout&lt;&lt;<span class="string">&quot;Result:&quot;</span>;</span><br><span class="line">   <span class="keyword">for</span>(<span class="keyword">auto</span> i : arr)</span><br><span class="line">       cout&lt;&lt;i&lt;&lt;<span class="string">&quot; &quot;</span>;</span><br><span class="line">   cout&lt;&lt;endl;</span><br></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">输出：Result:<span class="number">1</span> <span class="number">1</span> <span class="number">1</span> <span class="number">1</span> <span class="number">1</span> <span class="number">1</span> <span class="number">1</span> <span class="number">1</span> <span class="number">1</span> <span class="number">1</span></span><br></pre></td></tr></table></figure><p>不过，C++新标准下，我们可以使用<code>begin</code>和<code>end</code>函数来帮助我们寻找数组开头地址和结尾地址：<br>使用std空间下的<code>begin</code>和<code>end</code>函数（数组不是类类型，没有成员函数）：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> std::begin;</span><br><span class="line"><span class="keyword">using</span> std::end;</span><br></pre></td></tr></table></figure><p>定义始末指针：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> *beg = <span class="built_in">begin</span>(arr);</span><br><span class="line">   <span class="type">int</span> *last = <span class="built_in">end</span>(arr);</span><br></pre></td></tr></table></figure><p>这次用while改写刚刚的指针控制数组元素：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> *pbeg = beg;</span><br><span class="line"><span class="keyword">while</span> (pbeg != last)&#123;</span><br><span class="line">   *pbeg = <span class="number">1</span>;</span><br><span class="line">       pbeg++;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p>其实，这个<code>begin</code>和<code>end</code>有些妙用。<br>还记得C语言时，我们使用指针运算时：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> arr[<span class="number">10</span>] = &#123;<span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>&#125;;</span><br><span class="line"><span class="type">int</span> *ip = arr + <span class="number">5</span>;</span><br><span class="line">cout&lt;&lt;*ip&lt;&lt;endl;</span><br></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">输出：<span class="number">5</span></span><br></pre></td></tr></table></figure><p>故，我们可以利用<code>begin</code>和<code>end</code>相减得到数组大小：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> arr[<span class="number">10</span>] = &#123;<span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>&#125;;</span><br><span class="line">   <span class="type">int</span> *beg = <span class="built_in">begin</span>(arr);</span><br><span class="line">   <span class="type">int</span> *last = <span class="built_in">end</span>(arr);</span><br><span class="line">   <span class="keyword">auto</span> size = last - beg;</span><br><span class="line">   cout&lt;&lt;size&lt;&lt;endl;</span><br></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">输出：<span class="number">10</span></span><br></pre></td></tr></table></figure><p>这里使用的<code>auto</code>，其实他们的类型是一种名为<code>ptrdiff_t</code>的标准库类型，和<code>size_t</code>不同的是，它是有符号的。（毕竟差值可能是负数）</p><h3 id="4-4-3-c风格字符串">4.4.3 C风格字符串</h3><p>C语言的字符串以空字符<code>'\0'</code>结尾，实质是一个<code>char</code>数组。<br>我们从前操作这些字符串使用的是<code>&lt;string.h&gt;</code>中的函数：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">strlen</span>(p)<span class="comment">//p的长度，不算空字符</span></span><br><span class="line"><span class="built_in">strcmp</span>(p1, p2)<span class="comment">//相等返回0，如果p1&gt;p2，返回正数，反之负数</span></span><br><span class="line"><span class="built_in">strcat</span>(p1, p2)<span class="comment">//把p2附加到p1上，并返回p1</span></span><br><span class="line"><span class="built_in">strcpy</span>(p1, p2)<span class="comment">//把p2拷贝给p1，并返回p1</span></span><br></pre></td></tr></table></figure><p>这些被C++所继承了下来，放在了<code>&lt;cstring&gt;</code>里面。<br>不过<code>string</code>类型和<code>&lt;cstring&gt;</code>函数中需要的<code>const char*</code>可不太一样，具体使用请看下面的4.4.4.1</p><blockquote><p>尽管C++支持C风格字符串，但C++程序中最好不要使用他们。这是因为C风格字符串不仅用起来不方便，也极易引发程序漏洞，是诸多安全问题的根本原因。</p></blockquote><h3 id="4-4-4-与旧代码的接口">4.4.4 与旧代码的接口</h3><p>很多C++程序在标准库之前就已经写成了，他们肯定没有用上vector和string类型。而且有些C++程序是与C语言的接口程序，无法使用C++标准库。因此，C++程序不得不与那些充满了数组和C风格字符串的代码衔接，为了简化这一工作，C++还提供了一组功能。</p><h4 id="4-4-4-1-混用string和c风格字符串">4.4.4.1 混用string和C风格字符串</h4><p>引用头文件</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br></pre></td></tr></table></figure><p>直接调用：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">string <span class="title">s</span><span class="params">(<span class="string">&quot;hello world&quot;</span>)</span></span>;</span><br><span class="line">   cout&lt;&lt;<span class="built_in">strlen</span>(s)&lt;&lt;endl;<span class="comment">//报错</span></span><br></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">error: cannot convert <span class="string">&#x27;std::string&#x27;</span> &#123;aka <span class="string">&#x27;std::__cxx11::basic_string&lt;char&gt;&#x27;</span>&#125; to <span class="string">&#x27;const char*&#x27;</span></span><br></pre></td></tr></table></figure><p>于是，我们可以用上C++提供的<code>c_str</code>成员函数，返回一个C风格字符串：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">string <span class="title">s</span><span class="params">(<span class="string">&quot;hello world&quot;</span>)</span></span>;</span><br><span class="line">   cout&lt;&lt;<span class="built_in">strlen</span>(s.<span class="built_in">c_str</span>())&lt;&lt;endl;</span><br></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">输出：<span class="number">11</span></span><br></pre></td></tr></table></figure><p>如果执行完<code>c_str</code>函数后程序想要一直都能使用其返回的数组，最好将数组重新拷贝一份：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">const</span> <span class="type">char</span> *cs = s.<span class="built_in">c_str</span>();</span><br></pre></td></tr></table></figure><h4 id="4-4-4-2-使用数组初始化vector对象">4.4.4.2 使用数组初始化vector对象</h4><p>之前说过不能用数组为另一个数组赋值，也不能用vector对象为数组赋值。<br>不过，相反的，我们可以使用数组来初始化vector对象。<br>要实现这一目的，只需要指明数组首元素地址和尾后元素的地址就OK了：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> arr[] = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>&#125;;</span><br><span class="line">   <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">ivec</span><span class="params">(begin(arr), end(arr))</span></span>;</span><br></pre></td></tr></table></figure><p>当然，也可以通过一些计算，只拷贝部分：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> arr[] = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>&#125;;</span><br><span class="line">   <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">ivec</span><span class="params">(arr + <span class="number">2</span>, arr + <span class="number">5</span>)</span></span>;</span><br><span class="line">   <span class="keyword">for</span>(<span class="keyword">auto</span> i: ivec)</span><br><span class="line">       cout&lt;&lt;i&lt;&lt;<span class="string">&quot; &quot;</span>;</span><br><span class="line">   cout&lt;&lt;endl;</span><br></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">输出：<span class="number">3</span> <span class="number">4</span> <span class="number">5</span></span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/e845377fee2140d899425055217e4b8e.png#pic_center" alt=""></p><h3 id="4-4-5-多维数组">4.4.5 多维数组</h3><h4 id="4-4-5-1-操作多维数组">4.4.5.1 操作多维数组</h4><p>多维数组不足为奇：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> a[<span class="number">3</span>][<span class="number">4</span>]=&#123;</span><br><span class="line">       &#123;<span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>&#125;,</span><br><span class="line">       &#123;<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>&#125;,</span><br><span class="line">       &#123;<span class="number">8</span>,<span class="number">9</span>,<span class="number">10</span>,<span class="number">11</span>&#125;</span><br><span class="line">   &#125;;</span><br></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> a[<span class="number">3</span>][<span class="number">4</span>]=&#123;<span class="comment">//显式地初始化每行的首元素</span></span><br><span class="line">       &#123;<span class="number">0</span>&#125;,</span><br><span class="line">       &#123;<span class="number">4</span>&#125;,</span><br><span class="line">       &#123;<span class="number">8</span>&#125;</span><br><span class="line">   &#125;;</span><br></pre></td></tr></table></figure><p>可以看作有3个<code>int[4]</code>的数组的数组。类似vector容器装vector容器的关系。</p><p>故，在C++中，我们可以通过范围for语句来处理多维数组：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">auto</span> &amp;row : a)&#123;<span class="comment">//一定是引用类型</span></span><br><span class="line">       <span class="keyword">for</span> (<span class="keyword">auto</span> col : row)</span><br><span class="line">           cout&lt;&lt;col&lt;&lt;<span class="string">&quot; &quot;</span>;</span><br><span class="line">       cout&lt;&lt;endl;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p>外层的范围for一定要使用引用类型<code>for (auto &amp;row : a)</code>，是因为如果不使用引用类型，<code>auto</code>会把这些数组形式的元素当作指针类型来处理，这样甚至通过不了编译。</p><blockquote><p>要使用范围for语句处理多维数组，除了最内层的循环外，其他所有循环的控制变量类型都应该是引用类型。</p></blockquote><h4 id="4-4-5-2-多维数组和指针">4.4.5.2 多维数组和指针</h4><p>声明数组指针时，括号很重要：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> *ip[<span class="number">4</span>];<span class="comment">//int型指针数组</span></span><br><span class="line">   <span class="built_in">int</span> (* ip)[<span class="number">4</span>];<span class="comment">//指向int型[4]的数组的指针</span></span><br></pre></td></tr></table></figure><p>不过在C++新标准下，我们也一般使用的是<code>auto</code>或<code>decltype</code>，就能尽可能地避免在数组前面加上一个指针类型了。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">auto</span> p = <span class="built_in">begin</span>(a); p != <span class="built_in">end</span>(a); ++p) &#123;<span class="comment">//p是指向int型[4]的数组的指针</span></span><br><span class="line">       <span class="keyword">for</span> (<span class="keyword">auto</span> q = <span class="built_in">begin</span>(*p); q != <span class="built_in">end</span>(*p); ++q)<span class="comment">//q指向p指的数组的首元素，相当于，q指向一个int</span></span><br><span class="line">           cout&lt;&lt;*q&lt;&lt;<span class="string">&quot; &quot;</span>;</span><br><span class="line">       cout&lt;&lt;endl;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p>前面说过<code>int a[3][4]</code>可以看作有3个<code>int[4]</code>的数组的数组。<br>其实我们甚至还能用类型别名来简化多维数组的指针：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> int_array = <span class="type">int</span>[<span class="number">4</span>];</span><br><span class="line">   <span class="comment">//等于typedef int int_array[4];</span></span><br></pre></td></tr></table></figure><p>刚刚的例子就可以把<code>auto</code>改成我们自己的类型别名了：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (int_array *p = <span class="built_in">begin</span>(a); p != <span class="built_in">end</span>(a); ++p) &#123;<span class="comment">//p是指向int型[4]的数组的指针</span></span><br><span class="line">       <span class="keyword">for</span> (<span class="type">int</span> *q = <span class="built_in">begin</span>(*p); q != <span class="built_in">end</span>(*p); ++q)<span class="comment">//q指向p指的数组的首元素，相当于，q指向一个int</span></span><br><span class="line">           cout&lt;&lt;*q&lt;&lt;<span class="string">&quot; &quot;</span>;</span><br><span class="line">       cout&lt;&lt;endl;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 跟我一起从C到C++ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> c++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>变量和基本类型——跟我一起从C到C++(第一期)</title>
      <link href="/2023/01/26/C++/%E5%8F%98%E9%87%8F%E5%92%8C%E5%9F%BA%E6%9C%AC%E7%B1%BB%E5%9E%8B%E2%80%94%E2%80%94%E8%B7%9F%E6%88%91%E4%B8%80%E8%B5%B7%E4%BB%8EC%E5%88%B0C++(%E7%AC%AC%E4%B8%80%E6%9C%9F)/"/>
      <url>/2023/01/26/C++/%E5%8F%98%E9%87%8F%E5%92%8C%E5%9F%BA%E6%9C%AC%E7%B1%BB%E5%9E%8B%E2%80%94%E2%80%94%E8%B7%9F%E6%88%91%E4%B8%80%E8%B5%B7%E4%BB%8EC%E5%88%B0C++(%E7%AC%AC%E4%B8%80%E6%9C%9F)/</url>
      
        <content type="html"><![CDATA[<span id="more"></span><h3 id="文章目录">文章目录</h3><ul><li><a href="#1-%E5%89%8D%E8%A8%80">1 前言</a></li><li><a href="#2-%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE">2 环境配置</a></li><li><a href="#3-%E5%8F%98%E9%87%8F%E5%92%8C%E5%9F%BA%E6%9C%AC%E7%B1%BB%E5%9E%8B">3 变量和基本类型</a><ul><li><a href="#31-%E6%96%B0%E7%9A%84%E7%B1%BB%E5%9E%8B">3.1 新的类型</a><ul><li><a href="#311-bool">3.1.1 bool</a></li><li><a href="#312-%E6%89%A9%E5%B1%95%E5%AD%97%E7%AC%A6%E9%9B%86">3.1.2 扩展字符集</a></li></ul></li><li><a href="#32-%E5%8F%98%E9%87%8F">3.2 变量</a><ul><li><a href="#321-%E5%88%9D%E5%A7%8B%E5%8C%96">3.2.1 初始化</a></li><li><a href="#322-%E7%BB%93%E6%9E%84%E4%BD%93%E9%BB%98%E8%AE%A4%E5%80%BC">3.2.2 结构体默认值</a></li><li><a href="#323-%E5%8F%98%E9%87%8F%E5%A3%B0%E6%98%8E%E5%92%8C%E5%AE%9A%E4%B9%89%E7%9A%84%E5%85%B3%E7%B3%BB">3.2.3 变量声明和定义的关系</a></li></ul></li><li><a href="#33-%E5%A4%8D%E5%90%88%E7%B1%BB%E5%9E%8B">3.3 复合类型</a><ul><li><a href="#331-%E5%BC%95%E7%94%A8">3.3.1 引用</a></li><li><a href="#332-%E6%8C%87%E9%92%88">3.3.2 指针</a></li></ul></li><li><a href="#34-const-%E9%99%90%E5%AE%9A%E7%AC%A6">3.4 const 限定符</a><ul><li><a href="#341-const-%E5%BC%95%E7%94%A8">3.4.1 const 引用</a></li><li><a href="#342-%E9%A1%B6%E5%B1%82const%E5%92%8C%E5%BA%95%E5%B1%82const">3.4.2 顶层const和底层const</a></li><li><a href="#343-constexpr">3.4.3 constexpr</a></li></ul></li><li><a href="#35-%E5%A4%84%E7%90%86%E7%B1%BB%E5%9E%8B">3.5 处理类型</a><ul><li><a href="#351-%E7%B1%BB%E5%9E%8B%E5%88%AB%E5%90%8D">3.5.1 类型别名</a></li><li><a href="#352-auto%E7%B1%BB%E5%9E%8B">3.5.2 auto类型</a></li><li><a href="#353-decltype%E7%B1%BB%E5%9E%8B%E6%8C%87%E7%A4%BA%E7%AC%A6">3.5.3 decltype类型指示符</a></li></ul></li></ul></li></ul><h1 id="1-前言">1 前言</h1><p>众所周知，C语言对于嵌入式可谓是十分贴近，运行效率非常之高。<br>但随着单片机性能的日益提升，单片机性能过剩，我们也开始渴望使用高级语言来使我们的开发更加高效（但相应也会降低单片机的运行效率和占用更大的空间）。<br>本笔记主要意在从C语言过渡到C++语言，介绍C++语言的冰山一角，但也不只是将C++运用在嵌入式这么简单，而是过一遍语言框架。<br>故，笔者留下此笔记和大家共同学习。此笔记大量参考互联网各种资料，笔者只是拾人牙慧的小屁孩而已。</p><p>主要参考：</p><p>《C++ Primer 5》<br><img src="https://img-blog.csdnimg.cn/168e337896c14e3cbd37d3a083a13b35.jpeg" alt=""></p><h1 id="2-环境配置">2 环境配置</h1><p>既然大家都学习过C语言，配置环境定不必多言，基本上你配置C语言环境的时候，使用的clang或者gcc都也有其的C++编译器。</p><p>笔者使用的IDE(集成开发环境)为——CLion。<br><img src="https://img-blog.csdnimg.cn/017f699ac29748adb8c0772b9ce5aead.png" alt=""><br>笔者使用的G++编译器版本：<br><img src="https://img-blog.csdnimg.cn/395ac06a464a46eeaea570661b07a780.png" alt=""></p><h1 id="3-变量和基本类型">3 变量和基本类型</h1><h2 id="3-1-新的类型">3.1 新的类型</h2><p>总所周知，基本数据类型主要分为arithmetic type（算术类型）和void（空类型），而arithmetic type相比C语言，增加了很多新东西。</p><h3 id="3-1-1-bool">3.1.1 bool</h3><p>bool类型取值</p><table><thead><tr><th></th><th></th><th></th></tr></thead><tbody><tr><td>真</td><td>ture</td><td>1</td></tr><tr><td>假</td><td>false</td><td>0</td></tr></tbody></table><p>就比如你可以这样</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="type">bool</span> a = <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">if</span> (a != <span class="literal">false</span>)</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;yes&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在朋友们没有学会C++的输入输出之前，可以使用<code>#include &lt;cstdio&gt;</code>来使用C语言标准库<code>&lt;stdio.h&gt;</code>里的函数。<br>当然，朋友们又发现了，这个不对啊，怎么头文件没有加<code>.h</code>啊<br>其实，C++头文件不必是<code>.h</code>结尾，C语言中的标准库头文件如<code>math.h</code>,<code>stdio.h</code>在C++被命名为<code>cmath</code>,<code>cstdio</code>。</p><h3 id="3-1-2-扩展字符集">3.1.2 扩展字符集</h3><p>基本的字符类型是<code>char</code><br>而为了表示更多的字符，就有了：</p><table><thead><tr><th>类型</th><th>含义</th><th>最小尺寸</th></tr></thead><tbody><tr><td>char</td><td>字符</td><td>8位</td></tr><tr><td>wchar_t</td><td>宽字符</td><td>16位</td></tr><tr><td>char16_t</td><td>Unicode字符</td><td>16位</td></tr><tr><td>char32_t</td><td>Unicode字符</td><td>32位</td></tr></tbody></table><p>arithmetic type的尺寸是指该类型所占的比特数（当然，不同机器也有所差距）</p><h2 id="3-2-变量">3.2 变量</h2><p>C++程序员们在很多场合都会使用对象(object)这个词，通常情况下，对象是指一块能够存储数据并具有某种类型的内存空间。<br>而变量是指，提供一个具名的、可供程序操作的存储空间。<br>所以，有的人把命了名的对象称为变量。</p><p>可以参考：<br><a href="https://blog.csdn.net/qq_40828914/article/details/104206768">c++变量，对象</a></p><h3 id="3-2-1-初始化">3.2.1 初始化</h3><p>在对象创建的同时获得了一个特定的值，我们说这个对象被initialized（初始化）了。</p><p>不过，需要注意的是：</p><blockquote><p>初始化不是赋值，初始化的含义是创建变量时赋予其一个初始值，而赋值的含义是把对象的当前值擦除，而以一个新的值代替。</p></blockquote><p>故C++增加了initialized的方法</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> a = <span class="number">0</span>;</span><br><span class="line">   <span class="type">int</span> b = &#123;<span class="number">0</span>&#125;;</span><br><span class="line">   <span class="type">int</span> c&#123;<span class="number">0</span>&#125;;</span><br><span class="line">   <span class="function"><span class="type">int</span> <span class="title">d</span><span class="params">(<span class="number">0</span>)</span></span>;</span><br></pre></td></tr></table></figure><h3 id="3-2-2-结构体默认值">3.2.2 结构体默认值</h3><p>结构体<code>struct</code>，我们在C语言里至少叫它结构体。<br>虽然之后我们将会在C++里学习到不同的<code>struct</code>，不过在这里我们就先接触一个它的新特性，默认值。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">A</span>&#123;</span><br><span class="line">    <span class="type">int</span> a&#123;<span class="number">2</span>&#125;;</span><br><span class="line">    <span class="type">int</span> b = <span class="number">4</span>;</span><br><span class="line">    <span class="type">int</span> c = &#123;<span class="number">3</span>&#125;;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">struct</span> <span class="title class_">A</span> A1;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d %d %d&quot;</span>, A1.a, A1.b, A1.c);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">2</span> <span class="number">4</span> <span class="number">3</span></span><br></pre></td></tr></table></figure><p>我们发现，我们可以用初始化的方式为结构体的成员设置默认值。<br>不过，<code>int d(0);</code>却不能用在结构体中，因为它容易和函数指针或者函数的声明弄混。</p><h3 id="3-2-3-变量声明和定义的关系">3.2.3 变量声明和定义的关系</h3><p>为了允许把程序拆分成多个逻辑部分来编写，C++语言支持separate compilation机制，（分离式编译），该机制允许把程序分离成若干个文件，每个文件可以被独立编译。<br>为了支持separate compilation，C++将declaration（声明）和definition（定义）区分开来。declaration使得名字为程序所知，而definition负责创建与名字关联的实体。</p><p>声明规定变量的类型和名字。<br>定义要申请存储空间，也可能为变量赋一个初始值。</p><p>如果想声明一个变量而非定义它，就在变量名前添加关键字<code>extern</code>，而不是显式地初始化变量。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="keyword">extern</span> <span class="type">int</span> i;<span class="comment">//声明i而未定义i</span></span><br><span class="line"><span class="type">int</span> i = <span class="number">99</span>;<span class="comment">//定义i，并为其赋初始值为99</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">   <span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>, i);</span><br><span class="line">   <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>不过，<strong>变量能被declared多次，但仅能被defined一次</strong>。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="keyword">extern</span> <span class="type">int</span> i;</span><br><span class="line"><span class="keyword">extern</span> <span class="type">int</span> i;</span><br><span class="line"><span class="keyword">extern</span> <span class="type">int</span> i;</span><br><span class="line"><span class="type">int</span> i = <span class="number">99</span>;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">   <span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>, i);</span><br><span class="line">   <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="3-3-复合类型">3.3 复合类型</h2><h3 id="3-3-1-引用">3.3.1 引用</h3><p>C++语言中有几种compound type（复合类型，指基于其他类型定义的类型），其实我们在C语言中已经见识过其中一位了——pointer指针。<br>而C++又多了一位——reference引用。<br>reference，即用符号<code>&amp;</code>为对象起个别名。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> i = <span class="number">25</span>;</span><br><span class="line">    <span class="type">int</span> &amp;val = i;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>, val);</span><br><span class="line">   <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>引用必须初始化，不然不知道引用了谁。</p><p>一般初始化变量时，初始值会拷贝到新建的对象里。然而定义引用时，<strong>程序把引用和它的初始值直接绑定在了一起，而不是将初始值拷贝给引用</strong>。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> a = <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> &amp;c = a;</span><br><span class="line">    c++;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>, a);<span class="comment">//输出为1</span></span><br><span class="line">   <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>也可以嵌套引用，实质就是<code>b</code>、<code>c</code>都为<code>a</code>的引用</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> a = <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> &amp;c = a;</span><br><span class="line">    c++;</span><br><span class="line">    <span class="type">int</span> &amp;b = c;</span><br><span class="line">    b++;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>, a);</span><br><span class="line">   <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当然，我们也可以利用引用来传值：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">add</span><span class="params">(<span class="type">int</span> &amp;x, <span class="type">int</span> &amp;y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    x++;</span><br><span class="line">    y++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> a = <span class="number">0</span>, b = <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">add</span>(a, b);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d %d&quot;</span>, a, b);<span class="comment">//输出：1 1</span></span><br><span class="line">   <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-3-2-指针">3.3.2 指针</h3><p>指针和C语言大差不差<br>依旧是那些</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> i = <span class="number">0</span>;</span><br><span class="line">   <span class="type">int</span> &amp;r = i;<span class="comment">//类型后跟着的&amp;，因此这是声明的一部分，r是一个引用</span></span><br><span class="line">   <span class="type">int</span> *p;<span class="comment">//类型后跟着的*，因此这是声明的一部分，p是一个指针</span></span><br><span class="line">   p = &amp;i;<span class="comment">//取地址符</span></span><br><span class="line">   *p = i;<span class="comment">//解地址符</span></span><br></pre></td></tr></table></figure><p>指针的引用</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> a = <span class="number">98</span>;</span><br><span class="line">    <span class="type">int</span> *p = &amp;a;</span><br><span class="line">    <span class="type">int</span> *&amp;r = p;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>, *r);<span class="comment">//输出：98</span></span><br><span class="line">   <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>而空指针，这里的空指针不是指<code>void *</code>指针，而是指没有指向任何对象的指针。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> *p = <span class="literal">NULL</span>;</span><br><span class="line">   <span class="type">int</span> *p2 = <span class="literal">nullptr</span>; <span class="comment">//C++中推荐使用这种</span></span><br></pre></td></tr></table></figure><p>不过，在新标准下，现在的C++程序最好使用<code>nullptr</code>，同时避免使用<code>NULL</code>。</p><p>还有一些老生常谈的错误，C语言也有C++也容易继续犯：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> *p, p2;<span class="comment">//p是指向int的类型的指针，p2是int类型</span></span><br></pre></td></tr></table></figure><h2 id="3-4-const-限定符">3.4 const 限定符</h2><p><code>const</code>限定符能够定义常量<br>意为只能在<code>const</code>类型的对象上执行不改变其内容的操作。<br><strong>在默认情况下，<code>const</code>对象仅在文件内有效</strong><br>当编译时，编译器会把编译过程中用到该<code>const</code>变量的地方用对应的值替换。<br>为了执行上述操作，编译器必须知道<code>const</code>变量对应的值为多少。<br>如果程序包含多个文件，则每个用了<code>const</code>对象的文件都必须能访问得到它的初始值才行。<br>故，在默认情况下，<code>const</code>对象仅在文件内有效。多个文件中出现同名的<code>const</code>变量，其实等同于在不同文件中分别定义了独立的变量。<br>若我们想在多文件间生效，可以对<code>const</code>变量不管是声明还是定义都添加<code>extern</code>关键字。</p><h3 id="3-4-1-const-引用">3.4.1 const 引用</h3><p>const类型的引用<br>我们从两个例子入手：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> a = <span class="number">90</span>;</span><br><span class="line">    <span class="type">const</span> <span class="type">int</span> &amp;b = a;</span><br><span class="line">    b++;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>, b);</span><br><span class="line">   <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出为</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">error: increment of read-only reference <span class="string">&#x27;b&#x27;</span></span><br></pre></td></tr></table></figure><p>而</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> a = <span class="number">90</span>;</span><br><span class="line">    <span class="type">const</span> <span class="type">int</span> &amp;b = a;</span><br><span class="line">    a++;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>, b);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出为</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">91</span></span><br></pre></td></tr></table></figure><p>可见<code>const</code>类型的引用是无法修改的<br><code>const</code> 引用的目的是,<strong>禁止通过修改引用值来改变被引用的对象</strong>。</p><h3 id="3-4-2-顶层const和底层const">3.4.2 顶层const和底层const</h3><p><code>const</code>指针必须初始化，一旦初始化完成，就意味着它的值（也就是存放在指针中的地址）就不能再改变了。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> val = <span class="number">55</span>;</span><br><span class="line">   <span class="type">int</span> * <span class="type">const</span> p = &amp;val;<span class="comment">//p不能改变指向</span></span><br><span class="line">   <span class="type">const</span> <span class="type">int</span> * <span class="type">const</span> pip = &amp;val;<span class="comment">//pip不能改变指向，*pip值也不能改变</span></span><br></pre></td></tr></table></figure><p>你也发现了，<code>const</code>可以针对指针和指针指向的值：<br><strong>顶层const</strong><br>指针本身是个常量</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> * <span class="type">const</span> p</span><br></pre></td></tr></table></figure><p>这里的理解断句可以是，<code>int *</code>的类型，<code>const</code>修饰<code>p</code></p><p><strong>底层const</strong><br>所指的对象是个常量</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">const</span> <span class="type">int</span> *p</span><br></pre></td></tr></table></figure><p>这里的理解可以是，<code>const int *</code>修饰<code>p</code>，意味着<code>p</code>所指对象是<code>const</code></p><p><strong>更一般的</strong>，顶层const可以表示任意的对象是常量，这一点对任何数据类型都适用；底层const则与指针和引用等复合类型有关，比较特殊的是，指针类型既可以是顶层const也可以是底层const或者二者兼备。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> i = <span class="number">0</span>;</span><br><span class="line"><span class="type">int</span> *<span class="type">const</span> p1 = &amp;i;     <span class="comment">//  不能改变 p1 的值，这是一个顶层</span></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> ci = <span class="number">42</span>;      <span class="comment">//  不能改变 ci 的值，这是一个顶层</span></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> *p2 = &amp;ci;    <span class="comment">//  允许改变 p2 的值，这是一个底层</span></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> *<span class="type">const</span> p3 = p2;   <span class="comment">//  靠右的 const 是顶层 const，靠左的是底层 const</span></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> &amp;r = ci;      <span class="comment">//  所有的引用本身都是顶层 const，因为引用一旦初始化就不能再改为其他对象的引用，这里用于声明引用的 const 都是底层 const</span></span><br></pre></td></tr></table></figure><p>当执行对象的拷贝操作时，常量是顶层const还是底层const的区别明显。其中，顶层const不受什么影响。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">i = ci;     <span class="comment">//  正确：拷贝 ci 的值给 i，ci 是一个顶层 const，对此操作无影响。</span></span><br><span class="line">p2 = p3;    <span class="comment">//  正确：p2 和 p3 指向的对象相同，p3 顶层 const 的部分不影响。</span></span><br></pre></td></tr></table></figure><p>与此相对的，底层const的限制却不能被忽视。当执行对象的拷贝操作时，拷入和拷出的对象必须具有相同的底层const资格，或者两个对象的数据类型必须能够转换，一般来说，<strong>非常量可以转化为常量，反之不行。</strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> *p = p3;    <span class="comment">//  错误：p3 包含底层 const 的定义，而p没有。假设成功，p 就可以改变 p3 指向的对象的值。</span></span><br><span class="line">p2 = p3;            <span class="comment">//  正确：p2 和 p3 都是底层 const</span></span><br><span class="line">p2 = &amp;i;            <span class="comment">//  正确：int* 能够转化为 const int*，这也是形参是底层const的函数形参传递外部非 const 指针的基础。</span></span><br><span class="line"><span class="type">int</span> &amp;r = ci;    <span class="comment">//  错误：普通 int&amp; 不能绑定到 int 常量中。</span></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> &amp;r2 = i;  <span class="comment">//  正确：const int&amp; 可以绑定到一个普通 int 上。</span></span><br></pre></td></tr></table></figure><p>详细参考：<br><a href="https://zhuanlan.zhihu.com/p/161560391">C++干货系列——顶层const和底层const</a></p><h3 id="3-4-3-constexpr">3.4.3 constexpr</h3><p>C++新标准中，允许变量声明为<code>constexpr</code>类型以便编译器来检查变量是否为一个常量表达式。（常量表达式，即值不会改变而且在编译过程就能得到计算结果的表达式）</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> val = <span class="number">55</span>;</span><br><span class="line">   <span class="keyword">constexpr</span> <span class="type">int</span> sum = val + <span class="number">1</span>;<span class="comment">//是变量，报错</span></span><br></pre></td></tr></table></figure><p>改成</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">constexpr</span> <span class="type">int</span> val = <span class="number">55</span>;</span><br><span class="line"><span class="keyword">constexpr</span> <span class="type">int</span> sum = val + <span class="number">1</span>;</span><br></pre></td></tr></table></figure><p><strong>一般来说，如果你认定一个变量是常量表达式，那就把它声明成<code>constexpr</code>类型</strong></p><p>有一点需要明确，在<code>constexpr</code>声明中如果定义了一个指针，限定符<code>constexpr</code>仅对指针有效，与指针所指的对象无关。</p><h2 id="3-5-处理类型">3.5 处理类型</h2><h3 id="3-5-1-类型别名">3.5.1 类型别名</h3><p>C语言有<code>typedef</code>，而C++新标准规定了一种新的方法，使用alias declaration（别名声明）来定义类型的别名：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> INT = <span class="type">int</span>;</span><br><span class="line">   INT a = <span class="number">88</span>;</span><br></pre></td></tr></table></figure><p>alias declaration有一个<strong>易错点</strong>：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="type">char</span> * pstring;</span><br><span class="line">   <span class="type">const</span> pstring a = <span class="literal">nullptr</span>;</span><br></pre></td></tr></table></figure><p>我们会自动把它带入成</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">const</span> <span class="type">char</span> *a = <span class="literal">nullptr</span>;</span><br></pre></td></tr></table></figure><p>理解成一个底层const(所指的对象是个常量)<br>其实不然，<br>这是一个顶层const(指针本身是个常量)<br>刚刚只是我们一厢情愿地把类型别名替换成它本来的样子<br>然而，这是一种错误的理解<br>因为其实声明语句中用到<code>pstring</code>时，其基本数据类型是指针。<br>所以刚刚的<code>const</code>修饰的是一个<code>char *</code>的指针</p><h3 id="3-5-2-auto类型">3.5.2 auto类型</h3><p>编程时需要把表达式赋值给变量，这要求在声明变量的时候清楚地知道表达式的类型。但我们有时候做不到这一点。于是C++新标准引入了<code>auto</code>类型，它能让编译器替我们去分析表达式所属的类型（让编译器通过初始值来推算变量的类型）<br>不过，正是因为这种特性，<code>auto</code>一句话只能有一个基本数据类型，例如这种就不行：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">auto</span> sz = <span class="number">0</span>, pi = <span class="number">3.14</span>;</span><br></pre></td></tr></table></figure><p>不过，编译器判断出来的auto类型有时候和初始值的类型并不完全相同，编译器会适当地改变结果类型使其更符合初始化规则。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;typeinfo&gt;</span></span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> i;</span><br><span class="line">    <span class="type">int</span> &amp;a = i;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%s&quot;</span>, <span class="built_in">typeid</span>(a).<span class="built_in">name</span>());</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>typeid</code> 运算符存在于 C++ 的 <code>&lt;typeinfo&gt;</code> 库中，用于查找运行时提供的变量类型。但是，用于查找变量类型的完整函数是 <code>typeid(x).name()</code>，其中 a 是应该找到其类型的变量。<br>使用的 <code>name()</code> 成员函数返回标识变量类型的字符序列。<br>输出结果为<code>i</code>，意为<code>int</code>，这里表明，<strong>引用作为初始值时，真正参与初始化的其实是引用对象的值。</strong></p><p>而在指针中，</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;typeinfo&gt;</span></span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> i = <span class="number">0</span>;</span><br><span class="line">    <span class="type">const</span> <span class="type">int</span> ci = i, &amp;cr = ci;</span><br><span class="line">    <span class="keyword">auto</span> a = ci;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%s\n&quot;</span>, <span class="built_in">typeid</span>(a).<span class="built_in">name</span>());</span><br><span class="line">    <span class="keyword">auto</span> b = cr;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%s\n&quot;</span>, <span class="built_in">typeid</span>(b).<span class="built_in">name</span>());</span><br><span class="line">    <span class="keyword">auto</span> c = &amp;i;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%s\n&quot;</span>, <span class="built_in">typeid</span>(c).<span class="built_in">name</span>());</span><br><span class="line">    <span class="keyword">auto</span> d = &amp;ci;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%s\n&quot;</span>, <span class="built_in">typeid</span>(d).<span class="built_in">name</span>());</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出是</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">i</span><br><span class="line">i</span><br><span class="line">Pi</span><br><span class="line">PKi</span><br></pre></td></tr></table></figure><p>a是一个整数，它的顶层const特性被忽略<br>b是一个整数，它的顶层const特性也被忽略<br>c是一个整形指针<br>d是一个指向整数常量的指针（底层const特性被保留）</p><p>故：<br>auto一般会忽略顶层const，保留底层const</p><p>而想让auto类型为顶层const，需明确指出</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">const</span> <span class="keyword">auto</span> f = ci;</span><br></pre></td></tr></table></figure><h3 id="3-5-3-decltype类型指示符">3.5.3 decltype类型指示符</h3><p>decltype可以分析表达式并得到它的类型（但并没有计算表达式的值）</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> a = <span class="number">8</span>;</span><br><span class="line">   <span class="keyword">decltype</span>(a) b = <span class="number">5</span>;</span><br></pre></td></tr></table></figure><p>此时的<code>b</code>为<code>int</code>类型了</p><p>当然，函数也行</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">add</span><span class="params">(<span class="type">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">decltype</span>(<span class="built_in">add</span>()) b = <span class="number">5</span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>, b);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>不过，<code>decltype</code>在处理顶层const和引用的方式与<code>auto</code>有些许不同。如果<code>decltype</code>使用的表达式是一个变量，则<code>decltype</code>返回该变量的类型，包括顶层const和引用在内：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">const</span> <span class="type">int</span> ci = <span class="number">0</span>, &amp;cj = ci;</span><br><span class="line">   <span class="keyword">decltype</span>(ci) x = <span class="number">0</span>;<span class="comment">//类型是const int</span></span><br><span class="line">   <span class="keyword">decltype</span>(cj) y = x;<span class="comment">//类型是const int &amp;, y绑定到变量x上</span></span><br></pre></td></tr></table></figure><p>当然，既然是表达式</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> i = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">decltype</span>(i + <span class="number">1</span>) z = <span class="number">0</span>;</span><br></pre></td></tr></table></figure><p>但是这时候就会报错：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> &amp;r = i;</span><br><span class="line"><span class="keyword">decltype</span>(r) z;<span class="comment">//报错</span></span><br></pre></td></tr></table></figure><p>因为此时的<code>decltype</code>得到的类型为引用类型，必须初始化，这个很好理解</p><p>那这种情况呢：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> *p = &amp;i;</span><br><span class="line"><span class="keyword">decltype</span>(*p) z;<span class="comment">//报错</span></span><br></pre></td></tr></table></figure><p>因为，解指针时候我们得到指针所指对象，而且还能给这个对象赋值。因此，<code>decltype</code>结果类型为<code>int &amp;</code>，而不是<code>int</code>，这也是解指针的一个实质，即得到的为所指对象的引用。</p><p>还有一个需要注意的点就是：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> i = <span class="number">42</span>;</span><br><span class="line">   <span class="keyword">decltype</span>(i) x;<span class="comment">//不报错</span></span><br><span class="line">   <span class="keyword">decltype</span>((i)) z;<span class="comment">//报错</span></span><br></pre></td></tr></table></figure><p>因为<code>(i)</code>在decltype看来是<code>int &amp;</code>类型，需要初始化。</p><p>这是一个特性：</p><blockquote><p>decltype((val)) 双层括号时的结果永远是引用，而decltype(val) 单层括号时只要val本身是引用时才是引用。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 跟我一起从C到C++ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> c++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ADC和DAC——跟我一起写STM32(第九期)</title>
      <link href="/2023/01/17/STM32/ADC%E5%92%8CDAC%E2%80%94%E2%80%94%E8%B7%9F%E6%88%91%E4%B8%80%E8%B5%B7%E5%86%99STM32(%E7%AC%AC%E4%B9%9D%E6%9C%9F)/"/>
      <url>/2023/01/17/STM32/ADC%E5%92%8CDAC%E2%80%94%E2%80%94%E8%B7%9F%E6%88%91%E4%B8%80%E8%B5%B7%E5%86%99STM32(%E7%AC%AC%E4%B9%9D%E6%9C%9F)/</url>
      
        <content type="html"><![CDATA[<span id="more"></span><h3 id="文章目录">文章目录</h3><ul><li><a href="#11-adc">11 ADC</a><ul><li><a href="#111-%E8%B5%B0%E8%BF%9Badc">11.1 走进ADC</a></li><li><a href="#112-adc%E9%85%8D%E7%BD%AE">11.2 ADC配置</a><ul><li><a href="#1121-%E6%8E%92%E9%98%9F%E9%97%AE%E9%A2%98">11.2.1 排队问题</a></li><li><a href="#1122-%E8%A7%A6%E5%8F%91%E6%BA%90">11.2.2 触发源</a></li><li><a href="#1123-%E8%BD%AC%E6%8D%A2%E6%97%B6%E9%97%B4">11.2.3 转换时间</a></li><li><a href="#1124-%E6%95%B0%E6%8D%AE%E5%AF%B9%E9%BD%90">11.2.4 数据对齐</a></li><li><a href="#1125-adc%E6%A8%A1%E5%BC%8F">11.2.5 ADC模式</a></li></ul></li><li><a href="#113-adc%E8%BD%AE%E8%AF%A2%E9%87%87%E9%9B%86">11.3 ADC轮询采集</a></li><li><a href="#114-%E7%94%A8%E4%B8%8Adma%E4%BC%A0%E8%BE%93adc">11.4 用上DMA传输ADC</a></li><li><a href="#115-%E5%A4%9A%E9%80%9A%E9%81%93%E9%87%87%E9%9B%86">11.5 多通道采集</a></li><li><a href="#116-%E8%BF%87%E9%87%87%E9%9B%86%E6%B1%82%E5%9D%87%E5%80%BC%E6%8F%90%E9%AB%98%E5%88%86%E8%BE%A8%E7%8E%87">11.6 过采集求均值提高分辨率</a></li><li><a href="#117-%E5%8F%8Cadc%E5%90%8C%E6%AD%A5%E8%BD%AC%E6%8D%A2">11.7 双ADC同步转换</a></li></ul></li><li><a href="#12-dac">12 DAC</a><ul><li><a href="#121-%E8%B5%B0%E8%BF%9Bdac">12.1 走进DAC</a></li><li><a href="#122-dac%E9%85%8D%E7%BD%AE">12.2 DAC配置</a></li><li><a href="#123-dac%E8%BE%93%E5%87%BA%E7%94%B5%E5%8E%8B">12.3 DAC输出电压</a></li><li><a href="#123-dac%E7%9B%B4%E6%8E%A5%E8%BE%93%E5%87%BA%E4%B8%89%E8%A7%92%E6%B3%A2">12.3 DAC直接输出三角波</a></li><li><a href="#124-%E7%94%A8dma%E8%AE%A9dac%E8%BE%93%E5%87%BA%E6%AD%A3%E5%BC%A6%E6%B3%A2">12.4 用DMA让DAC输出正弦波</a></li></ul></li></ul><h1 id="11-adc">11 ADC</h1><p>这里的ADC不是射手（雾），这里的ADC是Analog-to-Digital Converter，翻译一下就是模拟到数字的意思。<br>总所周知，模拟信号是指用连续变化的物理量所表达的信息，如温度、湿度、压力、长度、电流、电压等等，我们通常又把模拟信号称为连续信号，它在一定的时间范围内可以有无限多个不同的取值。而数字信号是指在取值上是离散的、不连续的信号，如在计算机中，数字信号的大小常用有限位的二进制数表示。<br>具体可以参考：<br><a href="https://baike.baidu.com/item/%E6%A8%A1%E6%8B%9F%E4%BF%A1%E5%8F%B7/706796">模拟信号</a><br><a href="https://baike.baidu.com/item/%E6%95%B0%E5%AD%97%E4%BF%A1%E5%8F%B7/915663">数字信号</a></p><p>而ADC和DAC这样的物件，就能构起模拟与数字之间的大桥。</p><h2 id="11-1-走进adc">11.1 走进ADC</h2><p>推荐补课视频：<br><img src="https://img-blog.csdnimg.cn/45917d8af2874d73aae3bb52efefc1f3.png" alt=""></p><p>传感器采集模拟量，通过ADC得到数字量，并交给单片机处理。<br><img src="https://img-blog.csdnimg.cn/36d60d6889dc4d9195aae412c33e7871.png" alt=""></p><p>ADC将会<strong>采样、保持、量化、编码</strong>，把模拟量电压转化为数字量</p><p><img src="https://img-blog.csdnimg.cn/3e35d091652340ff8485a5a4c7559c73.png#pic_center" alt=""></p><p>就比如一个3位ADC，采样的范围就是0到2的3次方，即0~8<br>若它的参考电压为3.3v，GND为0，<br>就等于0-3.3v映射为了0-8的数字。<br>比如数字1就是 （1/8）*3.3V的模拟值</p><p>拿小蜜蜂老师的经典例题为例：<br><img src="https://img-blog.csdnimg.cn/85881300175349e5b9ad30d9e6cf89ab.png" alt=""></p><p>详情参考：<br>b站：<a href="https://www.bilibili.com/video/BV1m7411H7oT?p=8">【小蜜蜂笔记】基于STM32CubeMX的嵌入式开发基础教程——ADC模数转换器基本工作原理</a><br>好文推荐：<a href="https://zhuanlan.zhihu.com/p/462841831">一篇易懂的模数转换器（ADC）学习笔记1</a></p><p>最基本的ADC类型：<br><img src="https://img-blog.csdnimg.cn/ab0e37ac42a448a8baf8d3be59605586.png" alt=""><br>并联比较型：<br><img src="https://img-blog.csdnimg.cn/b643988a2853418ea9b071ec66df947f.png" alt=""><br>这里只是一个3位ADC，用了2的3次方个电阻和比较器。<br>每增加ADC分辨率（分辨率表示ADC能辨别的最小模拟量，用二进制位数表示，比如：8、10、12、16位），都会增加2的次方倍的比较器和电阻。</p><p>逐次逼近型：<br><img src="https://img-blog.csdnimg.cn/819924512a484dd8a792c24011ea72f7.png" alt=""><br>每次比较一位，三次比较下来才能得到3位ADC的数字值，是拿速度换分辨率的方法。</p><p>STM32f103系列有3个ADC（都是逐次逼近型）精度为12位，每个ADC最多有16个外部通道。其中ADC1和ADC2都有16个外部通道，ADC3一般有8个外部通道，各通道的A/D转换可以单次、连续、扫描或间断执行，ADC转换的结果可以左对齐或右对齐储存在16位数据寄存器中。ADC的输入时钟不得超过14MHz，其时钟频率由PCLK2分频产生。<br><img src="https://img-blog.csdnimg.cn/51cc796bd0a0483d9ebd25a8f95d639f.png" alt=""></p><h2 id="11-2-adc配置">11.2 ADC配置</h2><p><img src="https://img-blog.csdnimg.cn/08a5598fc70e45fb82d34c11d9e59c91.png#pic_center" alt=""></p><h3 id="11-2-1-排队问题">11.2.1 排队问题</h3><p>A/D转换被组织为两组：<strong>规则组</strong>（常规转换组）和<strong>注入组</strong>（注入转换组）<br>规则组最多可以有16个转换，注入组最多有4个转换</p><p>顾名思义，规则组按照规矩依次办事，注入组会插队，大体如图：<br><img src="https://img-blog.csdnimg.cn/e26878406d4649039854c92298d729e2.png" alt=""></p><h3 id="11-2-2-触发源">11.2.2 触发源</h3><p>软件触发、定时器触发…<br><img src="https://img-blog.csdnimg.cn/7aff7b1e1de7482cbeccb1dc0935e702.png#pic_center" alt=""></p><p>当然也可以EXTI触发ADC：<br><a href="https://blog.csdn.net/qq_45691873/article/details/120810254">STM32复习笔记(十二) —— ADC(EXTI事件触发)采集电压</a><br><img src="https://img-blog.csdnimg.cn/988141c440134b58af3d811bab78b052.png#pic_center" alt=""></p><h3 id="11-2-3-转换时间">11.2.3 转换时间</h3><p><strong>ADC时钟</strong>：<br><img src="https://img-blog.csdnimg.cn/e1c2cce2e48345e1ba95a7e73c590303.png" alt=""><br>笔者的配置为：<br><img src="https://img-blog.csdnimg.cn/8e42187ed4264d7998f140ce901955c8.png" alt=""></p><p>配置好了时钟，那我们就能计算<strong>ADC的转化时间</strong>了</p><blockquote><p>ADC转换时间： T = 采样时间 + 12.5个周期</p></blockquote><p>采样时间我们可以自行配置：<br><img src="https://img-blog.csdnimg.cn/388f9519fd4143ad89837c42cce2c26c.png#pic_center" alt=""><br>时间越久精度越高</p><h3 id="11-2-4-数据对齐">11.2.4 数据对齐</h3><p>采集数据是存放在寄存器里<br><img src="https://img-blog.csdnimg.cn/2aa29f0a81e34abcbe4a8ef445fa6348.png" alt=""><br>但是寄存器都是32位或者16位，而笔者ADC仅仅12位，这样存放数据时就有讲究了。<br>可以选择存放在高12位或者低12位，即左对齐或者右对齐</p><h3 id="11-2-5-adc模式">11.2.5 ADC模式</h3><p>这个就比较重要了，大体很多人ADC出问题，都是模式没调好。</p><p><strong>转化模式</strong></p><table><thead><tr><th>CONT位</th><th>0</th><th>1</th></tr></thead><tbody><tr><td>转化模式</td><td>单次转化模式</td><td>连续转化模式</td></tr></tbody></table><p><strong>单次转换模式</strong><br>只触发一次转换</p><p><strong>连续转换模式</strong><br>自动触发下一次转换<br><strong>注意：只有规则组才能触发该模式</strong></p><p>可以参考：<br><a href="https://blog.csdn.net/qq_41174547/article/details/124843969">HAL ADC连续转换模式 Continuous Conversion Mode</a></p><p><strong>扫描模式</strong></p><table><thead><tr><th>SCAN位</th><th>0</th><th>1</th></tr></thead><tbody><tr><td>扫描模式</td><td>关</td><td>开</td></tr></tbody></table><p><strong>关闭扫描模式</strong></p><p>ADC只转换选中的第一个通道进行转换</p><p><strong>使用扫描模式</strong><br>ADC会扫描所有选中的所有通道</p><p><strong>间断模式——不连续采样模式</strong><br>这个笔者用的比较少，这里不做介绍，大家可以自行了解。</p><p><strong>不同模式组合的作用</strong></p><p><img src="https://img-blog.csdnimg.cn/94897d49dfeb45cca4858d34b6af1ba0.png" alt=""><br>具体例子：</p><p><img src="https://img-blog.csdnimg.cn/68e68840efca46f5a0a41f7d11d9c1b6.png" alt=""></p><p>总而言之，若开启连续转化，就不用自己再手动再次使能，反之，若没开启，再次想使用时就一定自己手动打开。<br>连续转化的时间就是我们刚刚计算的转化时间。<br>一般，用定时器触发时，就会关闭连续转化。</p><h2 id="11-3-adc轮询采集">11.3 ADC轮询采集</h2><p>配置ADC<br>在前面，我们已经说过了他们这些选项的具体含义，现在我们直接选择：<br><img src="https://img-blog.csdnimg.cn/e58342be395b4040bbde0e6905ac6f3a.png#pic_center" alt=""><br>扫描模式无法关闭，但我们只配置一个通道（若只配置一个通道，也算是关闭了扫描模式了吧）<br><img src="https://img-blog.csdnimg.cn/2968307c6df24ad2ae53cada287ddbcb.png#pic_center" alt=""></p><p>生成工程</p><p>因为我们没有使能连续模式，所以我们每次使用ADC前要开启ADC<br>我们编写开启ADC，并获取ADC值的函数：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">u32 _adc_get_resule_pollfor(<span class="type">void</span>)</span><br><span class="line">&#123;</span><br><span class="line">    HAL_ADC_Start(&amp;hadc1);</span><br><span class="line">    HAL_ADC_PollForConversion(&amp;hadc1, <span class="number">10</span>);<span class="comment">//等待规则通道转换完成</span></span><br><span class="line">    <span class="keyword">return</span> (u16)HAL_ADC_GetValue(&amp;hadc1);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里轮询时间10ms，远远大于我们的采样时间了。</p><p>为了让我们的值更加精确，我们通常要对采样得到的值进行求平均：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">u32 <span class="title function_">adc_get_resule_pollfor</span><span class="params">(u8 times)</span></span><br><span class="line">&#123;</span><br><span class="line">    u32 temp_val = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; times; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        temp_val += _adc_get_resule_pollfor();</span><br><span class="line">        delay_ms(<span class="number">5</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> (temp_val / times);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们用LCD屏幕把它显示出来就是：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* USER CODE BEGIN 2 */</span></span><br><span class="line">   bsp_init();</span><br><span class="line">   painter.size = LCD_FONTSIZE_1206;</span><br><span class="line">   painter.color = BLACK;</span><br><span class="line">   painter.back_color=LGRAY;</span><br><span class="line">   lcd_clear();</span><br><span class="line">   lcd_clear();</span><br><span class="line">lcd_show_string(<span class="number">5</span>, <span class="number">50</span>,(u8*)<span class="string">&quot;ADC1_CH1_VAL:&quot;</span>);</span><br><span class="line">   lcd_show_string(<span class="number">5</span>, <span class="number">62</span>,(u8*)<span class="string">&quot;ADC1_CH1_VOL:0.000V&quot;</span>);</span><br><span class="line"> <span class="comment">/* USER CODE END 2 */</span></span><br><span class="line"></span><br><span class="line"> <span class="comment">/* Infinite loop */</span></span><br><span class="line"> <span class="comment">/* USER CODE BEGIN WHILE */</span></span><br><span class="line">   u32 adcx;</span><br><span class="line">   <span class="type">float</span> temp;</span><br><span class="line">   painter.color=BLUE;</span><br><span class="line">   <span class="keyword">while</span> (<span class="number">1</span>)</span><br><span class="line">   &#123;</span><br><span class="line">       adcx = adc_get_resule_pollfor(<span class="number">10</span>);</span><br><span class="line">       lcd_show_num(<span class="number">83</span>, <span class="number">50</span>, adcx, <span class="number">5</span>);</span><br><span class="line">       temp=(<span class="type">float</span> )adcx * (<span class="number">3.3</span>/<span class="number">4096</span>);</span><br><span class="line">       adcx = temp;</span><br><span class="line">       lcd_show_num(<span class="number">83</span>, <span class="number">62</span> , adcx, <span class="number">1</span>);</span><br><span class="line">       temp -= adcx;</span><br><span class="line">       temp *= <span class="number">1000</span>;</span><br><span class="line">       lcd_show_num(<span class="number">95</span>, <span class="number">62</span>, temp, <span class="number">3</span>);</span><br><span class="line">       delay_ms(<span class="number">100</span>);</span><br><span class="line">   <span class="comment">/* USER CODE END WHILE */</span></span><br></pre></td></tr></table></figure><h2 id="11-4-用上dma传输adc">11.4 用上DMA传输ADC</h2><p>但有朋友就要说了，你这轮询采集ADC不就浪费时间了嘛。<br>于是，我们用上之前说过的数据的搬运工——DMA。<br>配置DMA<br><img src="https://img-blog.csdnimg.cn/6fb428ef93c54dbb9622b78cb05c3052.png#pic_center" alt=""><br>stm32是32位处理器，所以一个word就对应32位，一个half word就对应16位。根据需要传输数据的大小选择对应Data Width即可。<br>例如笔者使用ADC进行数据采集，ADC的精度是12位的，所以Data Width选择half word就够用了。</p><p>Mode选择Normal，所以每次传输完数据得自己手动再次开启DMA传输。</p><p>这里我们使能<strong>连续转化模式</strong><br><img src="https://img-blog.csdnimg.cn/9da27d1483904e92997d1b0a225fa732.png#pic_center" alt=""><br>因为如果不使能连续模式，ADC只转化一次，那我们若打算使用数组存放DMA缓存的话，DMA就一直得不到完成中断<br><img src="https://img-blog.csdnimg.cn/02bf5846714948babf05e13cab421984.png" alt=""></p><p>于是，我们生成工程</p><p>编写DMA中断服务函数</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">u8 adc_dma_sta;</span><br><span class="line"><span class="type">void</span> <span class="title function_">DMA1_Channel1_IRQHandler</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> (DMA1-&gt;ISR &amp; (<span class="number">1</span> &lt;&lt; <span class="number">1</span>))<span class="comment">//通道1传输完成</span></span><br><span class="line">    &#123;</span><br><span class="line">        adc_dma_sta = <span class="number">1</span>;<span class="comment">//标识传输完成</span></span><br><span class="line">        DMA1-&gt;IFCR |= (<span class="number">1</span> &lt;&lt; <span class="number">1</span>);<span class="comment">//清除标志位</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/b59b38d8a1d44f9f8d114af3fb613df7.png#pic_center" alt=""></p><p>给IFCR寄存器对应位写1可清除标志位</p><p><img src="https://img-blog.csdnimg.cn/f30a69c39fc54f90a5cd1f1f9cf79e1f.png#pic_center" alt=""><br>当然，我们自己写了DMA中断服务函数之后就要把HAL库生成的注释掉：<br><img src="https://img-blog.csdnimg.cn/24f24b8b722e4075b9ccc1711e890f41.png#pic_center" alt=""></p><p>这个函数负责设置DMA传输数量，当DMA传输数量为0时，视为停止</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">adc_dma_enable</span><span class="params">(u16 cndtr)</span></span><br><span class="line">&#123;</span><br><span class="line">    ADC1-&gt;CR2 &amp;= ~(<span class="number">1</span> &lt;&lt; <span class="number">0</span>);                 <span class="comment">//__HAL_ADC_DISABLE(&amp;hadc1);</span></span><br><span class="line">    DMA1_Channel1-&gt;CCR &amp;= ~(<span class="number">1</span> &lt;&lt; <span class="number">0</span>);        <span class="comment">//__HAL_DMA_DISABLE(&amp;hdma_adc1);</span></span><br><span class="line">    <span class="keyword">while</span> (DMA1_Channel1-&gt;CCR &amp; (<span class="number">1</span> &lt;&lt; <span class="number">0</span>));  </span><br><span class="line">    <span class="comment">// while (__HAL_DMA_GET_FLAG(&amp;hdma_adc1, __HAL_DMA_GET_TC_FLAG_INDEX(&amp;hdma_adc1)));</span></span><br><span class="line">    DMA1_Channel1-&gt;CNDTR = cndtr;<span class="comment">//设置DMA传输数量</span></span><br><span class="line">    DMA1_Channel1-&gt;CCR |= (<span class="number">1</span> &lt;&lt; <span class="number">0</span>);         <span class="comment">//__HAL_DMA_ENABLE(&amp;hdma_adc1);</span></span><br><span class="line">    ADC1-&gt;CR2 |= (<span class="number">1</span> &lt;&lt; <span class="number">0</span>);                  <span class="comment">//__HAL_ADC_ENABLE(&amp;hadc1);</span></span><br><span class="line">    ADC1-&gt;CR2 |= (<span class="number">1</span> &lt;&lt; <span class="number">22</span>);                 <span class="comment">//HAL_ADC_Start(&amp;hadc1)</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>ADC的CR2寄存器控制开关、和使能规则组通道转化<br><img src="https://img-blog.csdnimg.cn/c1d29735a2ad47bf9701958908c3bcfc.png#pic_center" alt=""><br><img src="https://img-blog.csdnimg.cn/97ba4b43fbac4453b60a2b2580aeb9cf.png#pic_center" alt=""><br>DMA的CCR控制开关<br><img src="https://img-blog.csdnimg.cn/83a23c3589774e2eb39a320c0209367c.png#pic_center" alt=""><br><img src="https://img-blog.csdnimg.cn/ed110d3cfdfe40938a17db0d37b335c6.png#pic_center" alt=""><br>CNDTR控制DMA数据量<br><img src="https://img-blog.csdnimg.cn/4cb19fe3bbfd475cb38b03e23eed7d39.png#pic_center" alt=""></p><p>接着我们编写一个给DMA目标地址赋值的函数</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">u32 mar;</span><br><span class="line">u32 <span class="title function_">adc_dam_address</span><span class="params">(u32 _mar)</span></span><br><span class="line">&#123;</span><br><span class="line">    mar = _mar;</span><br><span class="line">    <span class="keyword">return</span> mar;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>并使能DMA</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">HAL_DMA_Start_IT(&amp;hdma_adc1, (u32)&amp;ADC1-&gt;DR, mar,<span class="number">0</span>);</span><br><span class="line">HAL_ADC_Start_DMA(&amp;hadc1, &amp;mar, <span class="number">0</span>);</span><br></pre></td></tr></table></figure><p>当然使能前，也可以校准一下</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">HAL_ADCEx_Calibration_Start(&amp;hadc1);</span><br></pre></td></tr></table></figure><p>于是，我们的代码就有了</p><p>生成目标地址数组</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> AVERAGE_TIMES 10</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ADC_BUF_SIZE  AVERAGE_TIMES</span></span><br><span class="line">u16 adc_buf[ADC_BUF_SIZE];</span><br></pre></td></tr></table></figure><p>接着传入目标地址</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">adc_dam_address((u32)&amp;adc_buf);</span><br></pre></td></tr></table></figure><p>使能它</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">HAL_ADCEx_Calibration_Start(&amp;hadc1);</span><br><span class="line">HAL_DMA_Start_IT(&amp;hdma_adc1, (u32)&amp;ADC1-&gt;DR, mar,<span class="number">0</span>);</span><br><span class="line">HAL_ADC_Start_DMA(&amp;hadc1, &amp;mar, <span class="number">0</span>);</span><br></pre></td></tr></table></figure><p>在判断DMA传输完成后显示出来</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* USER CODE BEGIN WHILE */</span></span><br><span class="line">    u32 adcx;</span><br><span class="line">    <span class="type">float</span> temp;</span><br><span class="line">    painter.color=BLUE;</span><br><span class="line">    adc_dma_enable(ADC_BUF_SIZE);</span><br><span class="line">    <span class="keyword">while</span> (<span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (adc_dma_sta)</span><br><span class="line">        &#123;</span><br><span class="line">            adcx = adc_get_resule_pollfor(<span class="number">10</span>);</span><br><span class="line">            lcd_show_num(<span class="number">83</span>, <span class="number">50</span>, adcx, <span class="number">5</span>);</span><br><span class="line">            temp=(<span class="type">float</span> )adcx * (<span class="number">3.3</span>/<span class="number">4096</span>);</span><br><span class="line">            adcx = temp;</span><br><span class="line">            lcd_show_num(<span class="number">83</span>, <span class="number">62</span> , adcx, <span class="number">1</span>);</span><br><span class="line">            temp -= adcx;</span><br><span class="line">            temp *= <span class="number">1000</span>;</span><br><span class="line">            lcd_show_num(<span class="number">95</span>, <span class="number">62</span>, temp, <span class="number">3</span>);</span><br><span class="line"></span><br><span class="line">            adc_dma_sta = <span class="number">0</span>;</span><br><span class="line">            adc_dma_enable(ADC_BUF_SIZE);</span><br><span class="line">        &#125;</span><br><span class="line">        delay_ms(<span class="number">10</span>);</span><br><span class="line">    <span class="comment">/* USER CODE END WHILE */</span></span><br></pre></td></tr></table></figure><h2 id="11-5-多通道采集">11.5 多通道采集</h2><p>前面说过有扫描模式，那我们整个8通道ADC扫描来玩玩。<br><img src="https://img-blog.csdnimg.cn/c4cac122ac2c40219fdffd25e39dd16b.png#pic_center" alt=""><br>这里设置为<strong>连续模式</strong><br>配置每个通道<br><img src="https://img-blog.csdnimg.cn/cc671fdaf7a840ef8a59ee3d53cfd8db.png#pic_center" alt=""><br>规划每个通道的内存大小<br>这里笔者的配置为8个通道，每个通道读50次（用于取平均值），一次一共400的DMA传输大小<br>其中数据排列的顺序是123456781234567812345678…一个有400个数据。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> ADC_N_CHANNEL (8)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ADC_BUF_SIZE (50 * ADC_N_CHANNEL)</span></span><br><span class="line">u16 adc_buf[ADC_BUF_SIZE];</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* USER CODE BEGIN 2 */</span></span><br><span class="line">    bsp_init();</span><br><span class="line">    painter.size = LCD_FONTSIZE_1206;</span><br><span class="line">    painter.color = BLACK;</span><br><span class="line">    painter.back_color=LGRAY;</span><br><span class="line">    lcd_clear();</span><br><span class="line">    lcd_clear();</span><br><span class="line">    lcd_show_string(<span class="number">5</span>, <span class="number">50</span>,(u8*)<span class="string">&quot;ADC1_CH1_VAL:&quot;</span>);</span><br><span class="line">    lcd_show_string(<span class="number">5</span>, <span class="number">62</span>,(u8*)<span class="string">&quot;ADC1_CH1_VOL:0.000V&quot;</span>);</span><br><span class="line">    lcd_show_string(<span class="number">5</span>, <span class="number">80</span>,(u8*)<span class="string">&quot;ADC1_CH2_VAL:&quot;</span>);</span><br><span class="line">    lcd_show_string(<span class="number">5</span>, <span class="number">92</span>,(u8*)<span class="string">&quot;ADC1_CH2_VOL:0.000V&quot;</span>);</span><br><span class="line">    lcd_show_string(<span class="number">5</span>, <span class="number">110</span>,(u8*)<span class="string">&quot;ADC1_CH3_VAL:&quot;</span>);</span><br><span class="line">    lcd_show_string(<span class="number">5</span>, <span class="number">122</span>,(u8*)<span class="string">&quot;ADC1_CH3_VOL:0.000V&quot;</span>);</span><br><span class="line">    lcd_show_string(<span class="number">5</span>, <span class="number">140</span>,(u8*)<span class="string">&quot;ADC1_CH4_VAL:&quot;</span>);</span><br><span class="line">    lcd_show_string(<span class="number">5</span>, <span class="number">152</span>,(u8*)<span class="string">&quot;ADC1_CH4_VOL:0.000V&quot;</span>);</span><br><span class="line">    lcd_show_string(<span class="number">5</span>, <span class="number">170</span>,(u8*)<span class="string">&quot;ADC1_CH5_VAL:&quot;</span>);</span><br><span class="line">    lcd_show_string(<span class="number">5</span>, <span class="number">182</span>,(u8*)<span class="string">&quot;ADC1_CH5_VOL:0.000V&quot;</span>);</span><br><span class="line">    lcd_show_string(<span class="number">5</span>, <span class="number">200</span>,(u8*)<span class="string">&quot;ADC1_CH6_VAL:&quot;</span>);</span><br><span class="line">    lcd_show_string(<span class="number">5</span>, <span class="number">212</span>,(u8*)<span class="string">&quot;ADC1_CH6_VOL:0.000V&quot;</span>);</span><br><span class="line">    lcd_show_string(<span class="number">5</span>, <span class="number">230</span>,(u8*)<span class="string">&quot;ADC1_CH7_VAL:&quot;</span>);</span><br><span class="line">    lcd_show_string(<span class="number">5</span>, <span class="number">242</span>,(u8*)<span class="string">&quot;ADC1_CH7_VOL:0.000V&quot;</span>);</span><br><span class="line">    lcd_show_string(<span class="number">5</span>, <span class="number">260</span>,(u8*)<span class="string">&quot;ADC1_CH8_VAL:&quot;</span>);</span><br><span class="line">    lcd_show_string(<span class="number">5</span>, <span class="number">272</span>,(u8*)<span class="string">&quot;ADC1_CH8_VOL:0.000V&quot;</span>);</span><br><span class="line">  <span class="comment">/* USER CODE END 2 */</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">/* Infinite loop */</span></span><br><span class="line">  <span class="comment">/* USER CODE BEGIN WHILE */</span></span><br><span class="line">    u16 adcx;</span><br><span class="line">    <span class="type">float</span> temp;</span><br><span class="line">    u32 sum;</span><br><span class="line">    painter.color=BLUE;</span><br><span class="line">    u32 colour[]=&#123;BLUE,GREEN,RED,MAGENTA,LBBLUE,BROWN,YELLOW,GRAY&#125;;</span><br><span class="line">    adc_dma_enable(ADC_BUF_SIZE);</span><br><span class="line">    <span class="keyword">while</span> (<span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(adc_dma_sta == <span class="number">1</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">0</span>; j &lt; ADC_N_CHANNEL; j++)</span><br><span class="line">            &#123;</span><br><span class="line">                sum = <span class="number">0</span>;</span><br><span class="line">                <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; ADC_BUF_SIZE / ADC_N_CHANNEL; i++)<span class="comment">/* 每个通道采集了50次数据,进行50次累加 */</span></span><br><span class="line">                &#123;</span><br><span class="line">                    sum += adc_buf[(i * ADC_N_CHANNEL) + j];<span class="comment">/* 相同通道的转换数据累加 */</span></span><br><span class="line">                &#125;</span><br><span class="line">                adcx = sum / (ADC_BUF_SIZE / ADC_N_CHANNEL);</span><br><span class="line">                lcd_show_num(<span class="number">83</span>, <span class="number">50</span>+(j*<span class="number">30</span>), adcx, <span class="number">5</span>,.color=colour[j]);</span><br><span class="line">                temp=(<span class="type">float</span> )adcx * (<span class="number">3.3</span>/<span class="number">4096</span>);</span><br><span class="line">                adcx = temp;</span><br><span class="line">                lcd_show_num(<span class="number">83</span>, <span class="number">62</span> + (j*<span class="number">30</span>), adcx, <span class="number">1</span>,.color=colour[j]);</span><br><span class="line">                temp -= adcx;</span><br><span class="line">                temp *= <span class="number">1000</span>;</span><br><span class="line">                lcd_show_num(<span class="number">95</span>, <span class="number">62</span> + (j*<span class="number">30</span>), temp, <span class="number">3</span>,.color=colour[j]);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            adc_dma_sta = <span class="number">0</span>;</span><br><span class="line">            adc_dma_enable(ADC_BUF_SIZE);</span><br><span class="line">        &#125;</span><br><span class="line">        delay_ms(<span class="number">100</span>);</span><br><span class="line">    <span class="comment">/* USER CODE END WHILE */</span></span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/8b245cc2d2f542de998fbe49faf11ec8.jpeg#pic_center" alt=""></p><h2 id="11-6-过采集求均值提高分辨率">11.6 过采集求均值提高分辨率</h2><p>如果采样频率高于信号最高频率的两倍，这种采样被称为过采样。（奈奎斯特采样定理-香农采样定理）<br>即尽可能快地采样数据，比如之前是1s采1次，现在做成100ms采1次，并把缓存10次的数据求平均。</p><p>而我们就能利用过采样和求均值来提高分辨率位数。</p><p>根据要增加的分辨率位数计算过采样频率方程：<br><img src="https://img-blog.csdnimg.cn/ec616a2b4b2a4902a911350ba8f4a725.png" alt=""><br>fos 是过采样频率，w是希望增加的分辨率位数，fs 是初始采样频率要求</p><p><a href="https://max.book118.com/html/2018/0506/165038217.shtm">方程推导过程</a></p><p>方法就是：<br>过采样数据累加并移位（这一步叫求均值，但不是求总数平均值的意思）</p><p>举个例子：12位分辨率的ADC提高4位分辨率，采样频率就要提高256倍<br>即需要256次采集才能得到一次16位分辨率的数据<br>然后将这256次采集结果求和，求和的结果再右移4位，就得到提高分辨率后的结果<br><strong>注意：提高N 位分辨率，需要 右移N位</strong></p><p>按照这个原理，我们改造之前的DMA单通道实验：</p><p>定义DMA目标地址数组</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> ADC_OVERSAMPLE_N 4<span class="comment">//过采样位数</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> N_POWER 65536       <span class="comment">//分辨率 2^(12+ADC_OVERSAMPLE_N)</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> AVERAGE_TIMES 10<span class="comment">//平均次数</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ADC_OVERSAMPLE_TIMES 256<span class="comment">//过采样次数</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ADC_BUF_SIZE  AVERAGE_TIMES * ADC_OVERSAMPLE_TIMES</span></span><br><span class="line">u16 adc_buf[ADC_BUF_SIZE];</span><br></pre></td></tr></table></figure><p>编写核心代码：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* USER CODE BEGIN WHILE */</span></span><br><span class="line">    u32 adcx;</span><br><span class="line">    <span class="type">float</span> temp;</span><br><span class="line">    u32 sum;</span><br><span class="line">    painter.color=BLUE;</span><br><span class="line">    <span class="keyword">while</span> (<span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(adc_dma_sta == <span class="number">1</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            sum = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; ADC_BUF_SIZE; i++)</span><br><span class="line">            &#123;</span><br><span class="line">                sum += adc_buf[i];<span class="comment">//将256次过采样再进行10次平均值</span></span><br><span class="line">            &#125;</span><br><span class="line">            adcx = sum / (AVERAGE_TIMES);</span><br><span class="line">            adcx &gt;&gt;= ADC_OVERSAMPLE_N;<span class="comment">//得到16位ADC数据</span></span><br><span class="line">            lcd_show_num(<span class="number">83</span>, <span class="number">50</span>, adcx, <span class="number">5</span>);</span><br><span class="line">            temp=(<span class="type">float</span> )adcx * (<span class="number">3.3</span>/N_POWER);</span><br><span class="line">            adcx = temp;</span><br><span class="line">            lcd_show_num(<span class="number">83</span>, <span class="number">62</span> , adcx, <span class="number">1</span>);</span><br><span class="line">            temp -= adcx;</span><br><span class="line">            temp *= <span class="number">1000</span>;</span><br><span class="line">            lcd_show_num(<span class="number">95</span>, <span class="number">62</span>, temp, <span class="number">3</span>);</span><br><span class="line"></span><br><span class="line">            adc_dma_sta = <span class="number">0</span>;</span><br><span class="line">            adc_dma_enable(ADC_BUF_SIZE);</span><br><span class="line">        &#125;</span><br><span class="line">        delay_ms(<span class="number">100</span>);</span><br><span class="line">    <span class="comment">/* USER CODE END WHILE */</span></span><br></pre></td></tr></table></figure><p>可以看见，我们的采样值已经到达了16位的分辨率了。<br><img src="https://img-blog.csdnimg.cn/864f0cd83a7d4fd286e691a9228f3050.jpeg" alt=""></p><h2 id="11-7-双adc同步转换">11.7 双ADC同步转换</h2><p>双 ADC 的机制就是使用两个 ADC 同时采样一个或者多个通道。双重ADC 模式较独立模式一个最大的优势就是提高了采样率，弥补了单个 ADC 采样不够快的缺点。<br><img src="https://img-blog.csdnimg.cn/81c3a1f7d6d64b7d96402234d39eb22a.png#pic_center" alt=""><br>这里也说了昂，需要使能DMA模式。</p><p><img src="https://img-blog.csdnimg.cn/20685b56e6ac4c5f8dfcddc4833a4583.png#pic_center" alt=""><br><img src="https://img-blog.csdnimg.cn/a516acfa0c39491484f542286f5512a9.png#pic_center" alt=""><br>详情可以参考：<br><a href="https://blog.csdn.net/qq_42033458/article/details/113068640">STM32之双ADC详解</a></p><p>例如：我们使用ADC1、ADC2同步采集，让ADC1采集内部参考电压、ADC2采集外部模拟电压。<br>这里我们选择：<br>Dual regular simultaneous mode only （规则同步转换模式）<br><img src="https://img-blog.csdnimg.cn/81a0c2c949fc45a4abf7038e9eaddfa6.png#pic_center" alt=""><br>我们选择用定时器触发ADC<br>配置好TIM3，并触发事件设置为Update Event，也就是把UEV事件信号作为TRGO信号。这样ADC在TIM3的TRGO信号每个上升沿启动一次ADC转换。<br><img src="https://img-blog.csdnimg.cn/d72dd82fe74e4792966f4f53ddbcc67a.png#pic_center" alt=""><br>接着配置通道：<br><img src="https://img-blog.csdnimg.cn/2e2cf77f5e3142cfac769f1e74613500.png#pic_center" alt=""><br>ADC2的通道和ADC1保持一致，避免不同步：<br><img src="https://img-blog.csdnimg.cn/30e375afd3e44b86a54c95ac9cdc29fc.png#pic_center" alt=""><br>因为共用ADC通道，这里DMA要更改为32位数据宽度：<br><img src="https://img-blog.csdnimg.cn/a4e17050129a4718a1a5ba50285e32b4.png#pic_center" alt=""></p><p>生成工程：</p><p>因为没有开启连续模式，我们的DMA缓存数组大小为1</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> ADC_BUF_SIZE  1</span></span><br><span class="line">u32 adc_buf[ADC_BUF_SIZE];</span><br></pre></td></tr></table></figure><p>先打开ADC2，使能ADC1同步模式，打开定时器：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">HAL_ADC_Start(&amp;hadc2);</span><br><span class="line">HAL_ADCEx_MultiModeStart_DMA(&amp;hadc1, adc_buf, ADC_BUF_SIZE);</span><br><span class="line">HAL_TIM_Base_Start(&amp;htim3);</span><br></pre></td></tr></table></figure><p>这里笔者偷个懒，直接显示结果（求均值占时间比较大，应该采用之前的方法，在main函数里进行）</p><p>编写回调函数（DMA传输完成进入中断服务函数进而会调用ADC传输完成函数）：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">HAL_ADC_ConvCpltCallback</span><span class="params">(ADC_HandleTypeDef *hadc)</span></span><br><span class="line">&#123;</span><br><span class="line">    u32 volt;</span><br><span class="line">    u32 value = adc_buf[<span class="number">0</span>];</span><br><span class="line">    u32 adc1_value = value &amp; <span class="number">0x0000FFFF</span>;<span class="comment">//低16位是ADC1</span></span><br><span class="line">    volt = <span class="number">3300</span> *adc1_value;</span><br><span class="line">    volt &gt;&gt;= <span class="number">12</span> ;<span class="comment">//除以2^12</span></span><br><span class="line">    lcd_show_num(<span class="number">100</span>,<span class="number">50</span>,volt,<span class="number">4</span>);</span><br><span class="line">    u32 adc2_value = value &amp; <span class="number">0xFFFF0000</span>;<span class="comment">//高16位是ADC2</span></span><br><span class="line">    volt = <span class="number">3300</span> *adc2_value;</span><br><span class="line">    volt &gt;&gt;= <span class="number">12</span> ;<span class="comment">//除以2^12</span></span><br><span class="line">    lcd_show_num(<span class="number">100</span>,<span class="number">62</span>,volt,<span class="number">4</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="12-dac">12 DAC</h1><p>之前说过ADC和DAC是模拟电路与数字电路之间的桥梁<br>那么，有了ADC（Analog-to-Digital Converter），那就有DAC，Digital-to-Analog Converter</p><h2 id="12-1-走进dac">12.1 走进DAC</h2><p>DAC能将数字量转化为模拟量，从而和ADC构成系统：<br><img src="https://img-blog.csdnimg.cn/6c17d63884334927afa8b2f264d5bdb6.png" alt=""><br>基本参数依旧是那些东西：<br>分辨率、参考电压、供电电压、输出通道啥的：<br><img src="https://img-blog.csdnimg.cn/e9ee4718c82d4780bf197def79d9222c.png" alt=""></p><h2 id="12-2-dac配置">12.2 DAC配置</h2><p><img src="https://img-blog.csdnimg.cn/f4bff68c9f21419fb286ad7394773268.png#pic_center" alt=""><br><strong>数据格式</strong><br>DAC数据格式：支持8/12位模式<br><img src="https://img-blog.csdnimg.cn/af8cb54418554345b5144d0c129bb964.png" alt=""><br>后面笔者将用单通道12位右对齐进行演示</p><p>单通道独立输出时用的是：DAC_DHR8Rx、DAC_DHR12Rx、DAC_DHR12Lx</p><p><img src="https://img-blog.csdnimg.cn/653b37b97edd4ce9b5eafb7a0d434835.png" alt=""><br>双通道同时输出时，会启用共同寄存器：DAC_DHR8RD、DAC_DHR12RD、DAC_DHR12LD</p><p><img src="https://img-blog.csdnimg.cn/382c4e363e3f411cabb9fa04c4823bb4.png" alt=""></p><p><strong>触发源</strong><br>三种触发转换的方式：自动触发、软件触发、外部事件触发<br><img src="https://img-blog.csdnimg.cn/a77ee6236aa849de9e2d0bde4d0a9d52.png#pic_center" alt=""><br><img src="https://img-blog.csdnimg.cn/d5a6551d312e4f1aad3cb456f706079b.png#pic_center" alt=""></p><p><strong>噪声波和三角波</strong><br>DAC内部使用线性反馈移位寄存器，可以生成变振幅的伪噪声，每次发生触发时，经过3个APB1时钟周期后，LFSR生成一个随机数并移入DOR。<br>注意，生成噪声波和三角波，必须使用外部触发。</p><h2 id="12-3-dac输出电压">12.3 DAC输出电压</h2><p><img src="https://img-blog.csdnimg.cn/63b4e0de83bc426e8a03eb92b052fe96.png#pic_center" alt=""></p><p>OutPut Buffer：设置是否使用输出缓冲器。使用的话，可以降低输出阻抗，提高输出负载能力，默认Enable。<br>Trigger：外部触发信号源。本次不使用外部触发，设置为None。</p><p>软件触发不等于None：<br>如果是None, 那么不需要其他任何的触发源，直接<code>HAL_DAC_SetValue()</code>设置DAC的值,就可以设定输出电压的大小。如果使用了软件触发，那么，每次在使用<code>HAL_DAC_SetValue()</code>修改输出电压后，还需要调用使能,目的是使能软件触发。由于：软件触发是硬件在一个APB1时钟周期后自动关断的，于是，每次修改输出电压的值后，都要调用软件使能的方法，才能生效。</p><p>可以参考：<br><a href="https://shequ.stmicroelectronics.cn/thread-619723-1-1.html">DAC 使用软件触发，无电压输出</a><br><a href="https://www.cnblogs.com/cjyc/p/6656853.html">STM32_DAC之软件触发（Trigger）</a></p><p>我们生成工程：</p><p>编写电压设置函数：</p><p>选择通道，对齐方式</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//vol:0-3300</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">dac_set_voltage</span><span class="params">(u16 vol)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">double</span> temp = vol;</span><br><span class="line">    temp /= <span class="number">1000</span>;</span><br><span class="line">    temp = temp * <span class="number">4096</span> / <span class="number">3.3</span>;</span><br><span class="line">    <span class="keyword">if</span>(temp &gt;= <span class="number">4096</span>) temp = <span class="number">4095</span>;</span><br><span class="line">    HAL_DAC_SetValue(&amp;hdac, DAC_CHANNEL_1, DAC_ALIGN_12B_R, temp);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>接着拿之前写的ADC测一下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* USER CODE BEGIN WHILE */</span></span><br><span class="line">dac_set_voltage(<span class="number">1500</span>);</span><br><span class="line">    u32 adcx;</span><br><span class="line">    <span class="type">float</span> temp;</span><br><span class="line">    u32 sum;</span><br><span class="line">    painter.color=BLUE;</span><br><span class="line">    <span class="keyword">while</span> (<span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(adc_dma_sta == <span class="number">1</span> )</span><br><span class="line">        &#123;</span><br><span class="line">            sum = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; ADC_BUF_SIZE; i++)</span><br><span class="line">            &#123;</span><br><span class="line">                sum += adc_buf[i];</span><br><span class="line">            &#125;</span><br><span class="line">            adcx = sum / (AVERAGE_TIMES);</span><br><span class="line">            lcd_show_num(<span class="number">83</span>, <span class="number">50</span>, adcx, <span class="number">5</span>);</span><br><span class="line">            temp=(<span class="type">float</span> )adcx * (<span class="number">3.3</span>/<span class="number">4096</span>);</span><br><span class="line">            adcx = temp;</span><br><span class="line">            lcd_show_num(<span class="number">83</span>, <span class="number">62</span> , adcx, <span class="number">1</span>);</span><br><span class="line">            temp -= adcx;</span><br><span class="line">            temp *= <span class="number">1000</span>;</span><br><span class="line">            lcd_show_num(<span class="number">95</span>, <span class="number">62</span>, temp, <span class="number">3</span>);</span><br><span class="line">            adc_dma_sta = <span class="number">0</span>;</span><br><span class="line">            adc_dma_enable(ADC_BUF_SIZE);</span><br><span class="line">        &#125;</span><br><span class="line">        delay_ms(<span class="number">100</span>);</span><br><span class="line"><span class="comment">/* USER CODE END WHILE */</span></span><br></pre></td></tr></table></figure><p>就可以自行查看结果了。</p><h2 id="12-3-dac直接输出三角波">12.3 DAC直接输出三角波</h2><p>输出三角波<br><img src="https://img-blog.csdnimg.cn/26e1c684c1ae4746a886141a0f8687b4.png#pic_center" alt=""><br>不满足取值范围，波形不完整</p><p>编写对应代码：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//maxval:    幅值：0 &lt; maxval &lt; 4096, (maxval + 1) &gt;= samples/2</span></span><br><span class="line"><span class="comment">//dt:        delay_us 小于5us后不精确</span></span><br><span class="line"><span class="comment">//samples:   采样点sample个</span></span><br><span class="line"><span class="comment">//n:         输出波形的次数(0~65535)</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">dac_triangular_wave</span><span class="params">(u16 maxval, u16 dt, u16 samples, u16 n)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">float</span> incval;</span><br><span class="line">    <span class="type">float</span> curval;</span><br><span class="line">    <span class="keyword">if</span>(samples &gt; ((maxval + <span class="number">1</span>) * <span class="number">2</span>))    <span class="keyword">return</span>;</span><br><span class="line">    incval = (maxval + <span class="number">1</span>) / (samples / <span class="number">2</span>);</span><br><span class="line">    <span class="keyword">for</span>(u16 j = <span class="number">0</span>; j &lt; n; j++)</span><br><span class="line">    &#123;</span><br><span class="line">        curval = <span class="number">0</span>;</span><br><span class="line">        HAL_DAC_SetValue(&amp;DAC_HANDLE, channel, DAC_ALIGN_12B_R, curval);</span><br><span class="line">        <span class="keyword">for</span>(u16 i = <span class="number">0</span>; i &lt; (samples/<span class="number">2</span>); i++)    <span class="comment">//上升波</span></span><br><span class="line">        &#123;</span><br><span class="line">            curval += incval;</span><br><span class="line">            HAL_DAC_SetValue(&amp;DAC_HANDLE, channel, DAC_ALIGN_12B_R, curval);</span><br><span class="line">            delay_us(dt);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(u16 i = <span class="number">0</span>; i &lt; (samples/<span class="number">2</span>); i++)    <span class="comment">//下降波</span></span><br><span class="line">        &#123;</span><br><span class="line">            curval -= incval;</span><br><span class="line">            HAL_DAC_SetValue(&amp;DAC_HANDLE, channel, DAC_ALIGN_12B_R, curval);</span><br><span class="line">            delay_us(dt);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们在while里调用它：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* USER CODE BEGIN WHILE */</span></span><br><span class="line">    <span class="keyword">while</span> (<span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        dac_triangular_wave(<span class="number">4095</span>, <span class="number">5</span>, <span class="number">200</span>, <span class="number">100</span>);</span><br><span class="line">    <span class="comment">/* USER CODE END WHILE */</span></span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/6eeb8c63b72b4334b9b7f9e04036a864.jpeg" alt=""></p><h2 id="12-4-用dma让dac输出正弦波">12.4 用DMA让DAC输出正弦波</h2><p>差不多的就是那些伎俩，这次用DMA把一个正弦波数组传给DAC，并让DAC输出这个正弦波。</p><p>选择DAC2：<br><img src="https://img-blog.csdnimg.cn/f93f66669439498abf5f751496cc321c.png#pic_center" alt=""><br>选择TIM7作为DAC2的触发源，并配置TIM7<br><img src="https://img-blog.csdnimg.cn/2b570e90d20e4c3c8e5254c1bd6ea0f3.png#pic_center" alt=""><br>接着使能DMA<br><img src="https://img-blog.csdnimg.cn/f125754bbf01470989dad3fa8af7e8d4.png#pic_center" alt=""><br>生成工程：</p><p>编写为我们生成正弦波数组的函数：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> PAI 3.1415926</span></span><br><span class="line"><span class="comment">//生成正弦波数组</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">dac_creat_sin_buf</span><span class="params">(u16 *buf, u16 maxval, u16 samples)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">float</span> outdata = <span class="number">0</span>;</span><br><span class="line">    <span class="type">float</span> inc = (<span class="number">2</span> * PAI) / samples;</span><br><span class="line">    <span class="keyword">if</span>(maxval &lt;= (samples / <span class="number">2</span>)) <span class="keyword">return</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; samples; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//正弦函数解析式：y= Asin(wx + k) + b</span></span><br><span class="line">        outdata = maxval * <span class="built_in">sin</span>(inc * i) + maxval;</span><br><span class="line">        <span class="keyword">if</span> (outdata &gt; <span class="number">4095</span>)</span><br><span class="line">            outdata = <span class="number">4095</span>;</span><br><span class="line">        buf[i] = outdata;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>关于DMA的源地址设置函数：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> DMA_DAC hdma_dac_ch2</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> DAC_HANDLE hdac</span></span><br><span class="line"><span class="keyword">extern</span> DMA_HandleTypeDef DMA_DAC;</span><br><span class="line"><span class="type">void</span> <span class="title function_">dac_init_dma</span><span class="params">(u32 _channel, u32 _mar)</span></span><br><span class="line">&#123;</span><br><span class="line">    mar = _mar;</span><br><span class="line">    channel = _channel;</span><br><span class="line">    <span class="keyword">if</span>(channel == DAC_CHANNEL_1)</span><br><span class="line">        HAL_DMA_Start(&amp;DMA_DAC, mar, (u32)&amp;DAC_HANDLE.Instance-&gt;DHR12R1, <span class="number">0</span>);</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(channel == DAC_CHANNEL_2)</span><br><span class="line">        HAL_DMA_Start(&amp;DMA_DAC, mar, (u32)&amp;DAC_HANDLE.Instance-&gt;DHR12R2, <span class="number">0</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>DMA使能函数：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> TIM_DAC htim7</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">dac_dma_enable</span><span class="params">(u16 cndtr, u16 arr, u16 psc)</span></span><br><span class="line">&#123;</span><br><span class="line">    TIM_DAC.Instance-&gt;PSC= psc;</span><br><span class="line">    TIM_DAC.Instance-&gt;ARR= arr;</span><br><span class="line">    HAL_TIM_Base_Start(&amp;TIM_DAC);</span><br><span class="line">    HAL_DAC_Stop_DMA(&amp;DAC_HANDLE, channel);</span><br><span class="line">    HAL_DAC_Start_DMA(&amp;DAC_HANDLE, channel, (u32 *)mar, cndtr, DAC_ALIGN_12B_R);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>通道设置函数：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">dac_set_channel</span><span class="params">(u32 _channel)</span></span><br><span class="line">&#123;</span><br><span class="line">    channel = _channel;</span><br><span class="line">    HAL_DAC_Start(&amp;DAC_HANDLE, channel);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在主函数中开启这一切：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">u16 buf[<span class="number">4096</span>];</span><br><span class="line">dac_creat_sin_buf(buf, <span class="number">2048</span>, <span class="number">100</span>);<span class="comment">//生成正弦数组</span></span><br><span class="line">dac_init_dma(DAC_CHANNEL_2, (u32)&amp;buf);<span class="comment">//把数组给dma</span></span><br><span class="line">dac_dma_enable(<span class="number">100</span>, <span class="number">10</span><span class="number">-1</span>, <span class="number">24</span><span class="number">-1</span>);</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/4e7aef93b1de41bb9996dc609cdd80a8.jpeg#pic_center" alt=""></p><p>文末，把之前用到的一部分常用的函数整理成模块,方便我们调用，当然，大家也可以自行封装更多的函数作为自己的模块。</p><p>ADC:</p><p>adclib.h</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// Created by Whisky on 2023/1/13.</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">ifndef</span> HELLOWORLD_ADCLIB_H</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> HELLOWORLD_ADCLIB_H</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;main.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ADC_HANDLE hadc1</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> DMA_ADC    hdma_adc1</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">extern</span> u8 adc_dma_sta;</span><br><span class="line"></span><br><span class="line">u32 <span class="title function_">adc_get_resule_pollfor</span><span class="params">(u8 times)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">adc_dma_enable</span><span class="params">(u16 cndtr)</span>;</span><br><span class="line">u32 <span class="title function_">adc_init_dma</span><span class="params">(u32 _mar)</span>;</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span> <span class="comment">//HELLOWORLD_ADCLIB_H</span></span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>adclib.c</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// Created by Whisky on 2023/1/13.</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;adclib.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;adc.h&quot;</span></span></span><br><span class="line"></span><br><span class="line">u8 adc_dma_sta;</span><br><span class="line"></span><br><span class="line"><span class="keyword">extern</span> DMA_HandleTypeDef DMA_ADC;</span><br><span class="line"></span><br><span class="line">u32 <span class="title function_">adc_init_dma</span><span class="params">(u32 mar)</span></span><br><span class="line">&#123;</span><br><span class="line">    HAL_ADCEx_Calibration_Start(&amp;ADC_HANDLE);</span><br><span class="line">    HAL_DMA_Start_IT(&amp;DMA_ADC, (u32)&amp;ADC_HANDLE.Instance-&gt;DR, mar,<span class="number">0</span>);</span><br><span class="line">    HAL_ADC_Start_DMA(&amp;ADC_HANDLE, &amp;mar, <span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">u32 _adc_get_resule_pollfor(<span class="type">void</span>)</span><br><span class="line">&#123;</span><br><span class="line">    HAL_ADC_Start(&amp;ADC_HANDLE);</span><br><span class="line">    HAL_ADC_PollForConversion(&amp;ADC_HANDLE, <span class="number">10</span>);</span><br><span class="line">    <span class="keyword">return</span> (u16)HAL_ADC_GetValue(&amp;ADC_HANDLE);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">u32 <span class="title function_">adc_get_resule_pollfor</span><span class="params">(u8 times)</span></span><br><span class="line">&#123;</span><br><span class="line">    u32 temp_val = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; times; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        temp_val += _adc_get_resule_pollfor();</span><br><span class="line">        delay_ms(<span class="number">5</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> (temp_val / times);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">DMA1_Channel1_IRQHandler</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> (DMA1-&gt;ISR &amp; (<span class="number">1</span> &lt;&lt; <span class="number">1</span>))</span><br><span class="line">    &#123;</span><br><span class="line">        adc_dma_sta = <span class="number">1</span>;</span><br><span class="line">        DMA1-&gt;IFCR |= (<span class="number">1</span> &lt;&lt; <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">adc_dma_enable</span><span class="params">(u16 cndtr)</span></span><br><span class="line">&#123;</span><br><span class="line">    ADC_HANDLE.Instance-&gt;CR2 &amp;= ~(<span class="number">1</span> &lt;&lt; <span class="number">0</span>);                 <span class="comment">//__HAL_ADC_DISABLE(&amp;ADC_HANDLE);</span></span><br><span class="line">    DMA_ADC.Instance-&gt;CCR &amp;= ~(<span class="number">1</span> &lt;&lt; <span class="number">0</span>);        <span class="comment">//__HAL_DMA_DISABLE(&amp;DMA_ADC);</span></span><br><span class="line">    <span class="keyword">while</span> (DMA_ADC.Instance-&gt;CCR &amp; (<span class="number">1</span> &lt;&lt; <span class="number">0</span>));  <span class="comment">// while (__HAL_DMA_GET_FLAG(&amp;DMA_ADC, __HAL_DMA_GET_TC_FLAG_INDEX(&amp;DMA_ADC)));</span></span><br><span class="line">    DMA_ADC.Instance-&gt;CNDTR = cndtr;</span><br><span class="line">    DMA_ADC.Instance-&gt;CCR |= (<span class="number">1</span> &lt;&lt; <span class="number">0</span>);         <span class="comment">//__HAL_DMA_ENABLE(&amp;DMA_ADC);</span></span><br><span class="line">    ADC_HANDLE.Instance-&gt;CR2 |= (<span class="number">1</span> &lt;&lt; <span class="number">0</span>);                  <span class="comment">//__HAL_ADC_ENABLE(&amp;ADC_HANDLE);</span></span><br><span class="line">    ADC_HANDLE.Instance-&gt;CR2 |= (<span class="number">1</span> &lt;&lt; <span class="number">22</span>);                 <span class="comment">//HAL_ADC_Start(&amp;ADC_HANDLE)</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>DAC:</p><p>daclib.h</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// Created by Whisky on 2023/1/13.</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">ifndef</span> HELLOWORLD_DACLIB_H</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> HELLOWORLD_DACLIB_H</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;main.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> DMA_DAC hdma_dac_ch2</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> DAC_HANDLE hdac</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> TIM_DAC htim7</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> PAI 3.1415926</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">dac_init_dma</span><span class="params">(u32 _channel, u32 _mar)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">dac_set_voltage</span><span class="params">(u16 vol)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">dac_init_dma</span><span class="params">(u32 _channel, u32 _mar)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">dac_triangular_wave</span><span class="params">(u16 maxval, u16 dt, u16 samples, u16 n)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">dac_creat_sin_buf</span><span class="params">(u16 *buf, u16 maxval, u16 samples)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">dac_dma_enable</span><span class="params">(u16 cndtr, u16 arr, u16 psc)</span>;</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span> <span class="comment">//HELLOWORLD_DACLIB_H</span></span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>daclib.c</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// Created by Whisky on 2023/1/13.</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;daclib.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;dac.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;tim.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;math.h&quot;</span></span></span><br><span class="line"></span><br><span class="line">u32 channel ;</span><br><span class="line">u32 mar;</span><br><span class="line"></span><br><span class="line"><span class="keyword">extern</span> DMA_HandleTypeDef DMA_DAC;</span><br><span class="line"><span class="type">void</span> <span class="title function_">dac_set_channel</span><span class="params">(u32 _channel)</span></span><br><span class="line">&#123;</span><br><span class="line">    channel = _channel;</span><br><span class="line">    HAL_DAC_Start(&amp;DAC_HANDLE, channel);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">dac_init_dma</span><span class="params">(u32 _channel, u32 _mar)</span></span><br><span class="line">&#123;</span><br><span class="line">    mar = _mar;</span><br><span class="line">    channel = _channel;</span><br><span class="line">    <span class="keyword">if</span>(channel == DAC_CHANNEL_1)</span><br><span class="line">        HAL_DMA_Start(&amp;DMA_DAC, mar, (u32)&amp;DAC_HANDLE.Instance-&gt;DHR12R1, <span class="number">0</span>);</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(channel == DAC_CHANNEL_2)</span><br><span class="line">        HAL_DMA_Start(&amp;DMA_DAC, mar, (u32)&amp;DAC_HANDLE.Instance-&gt;DHR12R2, <span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//vol:0-3300</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">dac_set_voltage</span><span class="params">(u16 vol)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">double</span> temp = vol;</span><br><span class="line">    temp /= <span class="number">1000</span>;</span><br><span class="line">    temp = temp * <span class="number">4096</span> / <span class="number">3.3</span>;</span><br><span class="line">    <span class="keyword">if</span>(temp &gt;= <span class="number">4096</span>) temp = <span class="number">4095</span>;</span><br><span class="line">    HAL_DAC_SetValue(&amp;DAC_HANDLE, channel, DAC_ALIGN_12B_R, temp);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//maxval:    幅值：0 &lt; maxval &lt; 4096, (maxval + 1) &gt;= samples/2</span></span><br><span class="line"><span class="comment">//dt:        delay_us 小于5us后不精确</span></span><br><span class="line"><span class="comment">//samples:   采样点sample个</span></span><br><span class="line"><span class="comment">//n:         输出波形的次数(0~65535)</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">dac_triangular_wave</span><span class="params">(u16 maxval, u16 dt, u16 samples, u16 n)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">float</span> incval;</span><br><span class="line">    <span class="type">float</span> curval;</span><br><span class="line">    <span class="keyword">if</span>(samples &gt; ((maxval + <span class="number">1</span>) * <span class="number">2</span>))    <span class="keyword">return</span>;</span><br><span class="line">    incval = (maxval + <span class="number">1</span>) / (samples / <span class="number">2</span>);</span><br><span class="line">    <span class="keyword">for</span>(u16 j = <span class="number">0</span>; j &lt; n; j++)</span><br><span class="line">    &#123;</span><br><span class="line">        curval = <span class="number">0</span>;</span><br><span class="line">        HAL_DAC_SetValue(&amp;DAC_HANDLE, channel, DAC_ALIGN_12B_R, curval);</span><br><span class="line">        <span class="keyword">for</span>(u16 i = <span class="number">0</span>; i &lt; (samples/<span class="number">2</span>); i++)    <span class="comment">//上升波</span></span><br><span class="line">        &#123;</span><br><span class="line">            curval += incval;</span><br><span class="line">            HAL_DAC_SetValue(&amp;DAC_HANDLE, channel, DAC_ALIGN_12B_R, curval);</span><br><span class="line">            delay_us(dt);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(u16 i = <span class="number">0</span>; i &lt; (samples/<span class="number">2</span>); i++)    <span class="comment">//下降波</span></span><br><span class="line">        &#123;</span><br><span class="line">            curval -= incval;</span><br><span class="line">            HAL_DAC_SetValue(&amp;DAC_HANDLE, channel, DAC_ALIGN_12B_R, curval);</span><br><span class="line">            delay_us(dt);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//生成正弦波数组</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">dac_creat_sin_buf</span><span class="params">(u16 *buf, u16 maxval, u16 samples)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">float</span> outdata = <span class="number">0</span>;</span><br><span class="line">    <span class="type">float</span> inc = (<span class="number">2</span> * PAI) / samples;</span><br><span class="line">    <span class="keyword">if</span>(maxval &lt;= (samples / <span class="number">2</span>)) <span class="keyword">return</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; samples; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//正弦函数解析式：y= Asin(wx + k) + b</span></span><br><span class="line">        outdata = maxval * <span class="built_in">sin</span>(inc * i) + maxval;</span><br><span class="line">        <span class="keyword">if</span> (outdata &gt; <span class="number">4095</span>)</span><br><span class="line">            outdata = <span class="number">4095</span>;</span><br><span class="line">        buf[i] = outdata;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">dac_dma_enable</span><span class="params">(u16 cndtr, u16 arr, u16 psc)</span></span><br><span class="line">&#123;</span><br><span class="line">    TIM_DAC.Instance-&gt;PSC= psc;</span><br><span class="line">    TIM_DAC.Instance-&gt;ARR= arr;</span><br><span class="line">    HAL_TIM_Base_Start(&amp;TIM_DAC);</span><br><span class="line">    HAL_DAC_Stop_DMA(&amp;DAC_HANDLE, channel);</span><br><span class="line">    HAL_DAC_Start_DMA(&amp;DAC_HANDLE, channel, (u32 *)mar, cndtr, DAC_ALIGN_12B_R);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 跟我一起写STM32 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> stm32 </tag>
            
            <tag> 嵌入式 </tag>
            
            <tag> c语言 </tag>
            
            <tag> 单片机 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>“1，2，3，定时器”——跟我一起写STM32(第八期)</title>
      <link href="/2023/01/15/STM32/%E2%80%9C1%EF%BC%8C2%EF%BC%8C3%EF%BC%8C%E5%AE%9A%E6%97%B6%E5%99%A8%E2%80%9D%E2%80%94%E2%80%94%E8%B7%9F%E6%88%91%E4%B8%80%E8%B5%B7%E5%86%99STM32(%E7%AC%AC%E5%85%AB%E6%9C%9F)/"/>
      <url>/2023/01/15/STM32/%E2%80%9C1%EF%BC%8C2%EF%BC%8C3%EF%BC%8C%E5%AE%9A%E6%97%B6%E5%99%A8%E2%80%9D%E2%80%94%E2%80%94%E8%B7%9F%E6%88%91%E4%B8%80%E8%B5%B7%E5%86%99STM32(%E7%AC%AC%E5%85%AB%E6%9C%9F)/</url>
      
        <content type="html"><![CDATA[<span id="more"></span><h3 id="文章目录">文章目录</h3><ul><li><a href="#10-123%E5%AE%9A%E6%97%B6%E5%99%A8">10 “1，2，3，定时器”</a><ul><li><a href="#101-%E5%9F%BA%E7%A1%80%E5%AE%9A%E6%97%B6%E5%99%A8">10.1 基础定时器</a></li><li><a href="#102-%E9%80%9A%E7%94%A8%E5%AE%9A%E6%97%B6%E5%99%A8">10.2 通用定时器</a><ul><li><a href="#1021-%E7%89%88%E6%9C%AC%E6%96%B0%E5%A2%9E">10.2.1 版本新增</a></li><li><a href="#1022-pwm%E8%BE%93%E5%87%BA">10.2.2 PWM输出</a></li><li><a href="#1023-%E8%BE%93%E5%85%A5%E6%8D%95%E8%8E%B7">10.2.3 输入捕获</a></li><li><a href="#1024-%E8%BE%93%E5%87%BA%E6%AF%94%E8%BE%83">10.2.4 输出比较</a></li><li><a href="#1025-%E8%84%89%E5%86%B2%E8%AE%A1%E6%95%B0">10.2.5 脉冲计数</a></li><li><a href="#1026-%E8%BE%93%E5%85%A5pwm">10.2.6 输入PWM</a></li></ul></li><li><a href="#103-%E9%AB%98%E7%BA%A7%E5%AE%9A%E6%97%B6%E5%99%A8">10.3 高级定时器</a><ul><li><a href="#1031-%E7%89%88%E6%9C%AC%E6%96%B0%E5%A2%9E">10.3.1 版本新增</a></li><li><a href="#1032-%E9%87%8D%E5%A4%8D%E8%AE%A1%E6%95%B0%E5%99%A8">10.3.2 重复计数器</a></li><li><a href="#1033-%E4%BA%92%E8%A1%A5%E8%BE%93%E5%87%BA%E6%AD%BB%E5%8C%BA%E6%8E%A7%E5%88%B6%E5%88%B9%E8%BD%A6%E6%96%AD%E8%B7%AF">10.3.3 互补输出+死区控制+刹车断路</a><ul><li><a href="#10331-%E4%BA%92%E8%A1%A5%E8%BE%93%E5%87%BA%E5%92%8C%E6%AD%BB%E5%8C%BA%E6%8E%A7%E5%88%B6">10.3.3.1 互补输出和死区控制</a></li><li><a href="#10332-%E6%AD%BB%E5%8C%BA%E6%97%B6%E9%97%B4%E8%AE%A1%E7%AE%97">10.3.3.2 死区时间计算</a></li><li><a href="#10333-%E5%88%B9%E8%BD%A6%E6%96%AD%E8%B7%AF">10.3.3.3 刹车断路</a></li><li><a href="#10333-cube%E7%9A%84%E5%BF%AB%E9%80%9F%E9%85%8D%E7%BD%AE">10.3.3.3 Cube的快速配置</a></li></ul></li></ul></li></ul></li></ul><h1 id="10-1-2-3-定时器">10 “1，2，3，定时器”</h1><p>我们要周期地做一件事情，或者想要精确地定时，就要用到它——定时器。<br>STM32的定时器分为三种——基础定时器、通用定时器、高级定时器。<br>它们如同修仙等级一般，也是依次加强。<br>按照笔者的STM32型号(STM32F103ZET6)就有两个基本定时器(TIM6、TIM7)，和两个高级定时器(TIM1、TIM8)，其他的就是通用定时器。<br>这里对定时器的讲解非常地浅显，定时器博大精深，大家可以自行查阅资料。</p><h2 id="10-1-基础定时器">10.1 基础定时器</h2><p>基础定时器，顾名思义，它很基础。<br>定时器的最基础的核心就是计数器。<br><img src="https://img-blog.csdnimg.cn/1543c5d8480a4aef975c57ae17f401a1.png" alt=""><br>这些定时器挂在APB1或者APB2总线上<br><img src="https://img-blog.csdnimg.cn/4b4a940e420e44c2ac8dbc43ae901f34.png#pic_center" alt=""><br>CLK就从这里而来，接着它会遇上PSC预分频器，让它不要太快，方便我们计数定时。<br>接着我们CNT计数器就开始从0开始加加加，达到ARR自动重装载值时，就是算溢出，时间到了，完成了一次定时。</p><p>TIM6/TIM7是16位计数器，这里的16位的意思就是：CNT寄存器是16位(0-65535)，不过它的PSC预分频器也是16位(取值1-65536对应寄存器值是0-65535)。<br>在更新事件(计数器溢出)时，会产生中断/DMA等。<br>就像我们刚刚说的那样：(基础定时器只有递增计数模式)<br>达到ARR就溢出(这里对溢出之后的处理是清0)<br><img src="https://img-blog.csdnimg.cn/2c430a3058cd4144adb2d8b1dfe28ff3.png" alt=""><br>知道了这些，我们就可以开始配置我们的定时器了<br>这里以TIM6为例：<br><img src="https://img-blog.csdnimg.cn/869e39bdafba49459b42ba73ba9e6865.png#pic_center" alt=""><br>这里选择Prescaler分频和Counter Period周期其实就是配置我们之前说的PSC寄存器和ARR寄存器。<br>但是由于寄存器从0开始计数，所以公式为：<br><img src="https://img-blog.csdnimg.cn/be6221f4f4d74527bed3cc33f7a7d3f6.png" alt=""></p><ul><li>𝑇out是定时器溢出时间</li><li>𝐹𝑡是定时器的时钟源频率</li><li>𝐴𝑅𝑅是自动重装载寄存器的值</li><li>𝑃𝑆𝐶是预分频器寄存器的值</li></ul><p>其实也很好理解，如笔者上图的配置，定时器时钟源是72MHZ，则意为72000000次为1s，经过7200的分频，10000次为1s，而周期是5000溢出一次，就是溢出一次的时间为5000/10000=0.5s<br>(平时在配置的时候记得不要超过16位极限：65535)</p><p>接着选择Tigger Event Selection触发输出信号源选择，就是选择定时器溢出后产生什么信号：</p><ol><li>Reset：定时器复位</li><li>Enable：定时器使能</li><li>Update Event：更新事件（一般用于ADC、DAC等）<br>这里我们并没有用定时器去触发什么外设，所以我们选择复位信号。</li></ol><p>auto-reload preload 这个是是否采用自动重装载寄存器的预装载功能。这是定时器寄存器的一种特性：影子寄存器。我们操作某些寄存器时，它不会立即生效。是因为它拥有一个影子寄存器，实际发生作用的是影子寄存器，而我们写入寄存器的值要等到新的事件或者下一次触发才会写入影子寄存器。这个预装载设置就是把寄存器直接写入影子寄存器。一般不是要动态修改ARR的值，这个设置对定时器工作没什么影响。</p><p>接着我们使能中断：<br><img src="https://img-blog.csdnimg.cn/7451826a61fd46cea894a76102b73c9f.png#pic_center" alt=""><br>在stm32f1xx_it.c找到<code>TIM6_IRQHandler(void)</code>中的<code>HAL_TIM_IRQHandler(&amp;htim6);</code><br>进入它的定义，找到<code>HAL_TIM_PeriodElapsedCallback</code>，这是一个定时溢出的中断回调函数<br>我们把它在一个地方重写就行了。<br>这里笔者是在main.c：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">HAL_TIM_PeriodElapsedCallback</span><span class="params">(TIM_HandleTypeDef *htim)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span>(htim-&gt;Instance==TIM6)</span><br><span class="line">        led1 = !led1;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>对了，这里关于灯的驱动为了方便，使用了位带操作，可以参考<a href="https://blog.csdn.net/DreamTrue520/article/details/128635570?spm=1001.2014.3001.5502">第三期</a>。</p><p>当然，一旦我们启动定时器(<strong>是需要手动启动的</strong>)<br>LED1就开始0.5s闪起来了</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">HAL_TIM_Base_Start_IT(&amp;htim6);</span><br></pre></td></tr></table></figure><p>Amazing，这也太简单了吧<br>当你想要修改它的计数周期的时候，你也可以直接操作寄存器</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">TIM6-&gt;ARR = <span class="number">100</span><span class="number">-1</span>;</span><br><span class="line">TIM6-&gt;PSC = <span class="number">7200</span><span class="number">-1</span>;</span><br><span class="line">HAL_TIM_Base_Start_IT(&amp;htim6);</span><br></pre></td></tr></table></figure><p>不过，直接操作寄存器是没有HAL库保护的，这可能出现一些底层的驱动错误，这需要注意(怎么这么晚才说！！！)</p><h2 id="10-2-通用定时器">10.2 通用定时器</h2><h3 id="10-2-1-版本新增">10.2.1 版本新增</h3><p>一代版本一代神，通用定时器版本新增：<br>通用定时器相比基础定时器，先是计数模式上多了两种选择：<br><img src="https://img-blog.csdnimg.cn/339945105c1a424eab953cf281daa6f9.png" alt=""><br>功能上也获得了增强：</p><ul><li>具有多路独立通道，可用于输入捕获/输出比较。</li><li>可以自定义计数器时钟源。</li><li>使用外部信号控制定时器且可实现多个定时器互连的同步电路</li><li>支持编码器和霍尔传感器电路等</li><li>…</li></ul><p>可以实现PWM输出、输入捕获、输出比较、脉冲计数等。</p><h3 id="10-2-2-pwm输出">10.2.2 PWM输出</h3><p>通用定时器输出PWM的实质就是<br><img src="https://img-blog.csdnimg.cn/388e126fcc7d4d048537757b5c0da964.png" alt=""><br>假设：递增计数模式<br>ARR：自动重装载寄存器的值<br>CCRx：捕获/比较寄存器x的值</p><p>当CNT &lt; CCRx，IO输出0<br>当CNT &gt;= CCRx，IO输出1</p><p>这样就可以完成一次PWM输出</p><p>我们选择TIM3作为实验的主角<br><img src="https://img-blog.csdnimg.cn/5b2de81e531c4023a53e5c379e0231e3.png#pic_center" alt=""><br>让小灯作为TIM_CH2的复用，这让我们可以PWM实现呼吸灯的效果<br>接着配置它：<br><img src="https://img-blog.csdnimg.cn/e62380f841a9462598ebc610a7913f8b.png#pic_center" alt=""><br>和基础定时器一样配置基础的部分<br>接着选择PWM模式<br><img src="https://img-blog.csdnimg.cn/c7466ced7afc4e08a0b59565235072ad.png#pic_center" alt=""><br>Pulse就是配置上图中CCRx的值，这个数除以ARR得到即为PWM占空比。<br>CH Polarity是配置有效电平的极性，这里选择低电平。<br>生成工程</p><p>开启定时器</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">HAL_TIM_PWM_Start(&amp;htim3, TIM_CHANNEL_2);</span><br></pre></td></tr></table></figure><p>编写呼吸灯代码：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* USER CODE BEGIN WHILE */</span></span><br><span class="line"><span class="type">uint16_t</span> ledrpwmval = <span class="number">0</span>;</span><br><span class="line">   <span class="type">uint8_t</span> dir = <span class="number">1</span>;</span><br><span class="line">   <span class="keyword">while</span> (<span class="number">1</span>)</span><br><span class="line">   &#123;</span><br><span class="line">       delay_ms(<span class="number">10</span>);</span><br><span class="line">       </span><br><span class="line">       <span class="keyword">if</span> (dir)ledrpwmval++;               <span class="comment">/* dir==1 ledrpwmval递增 */</span></span><br><span class="line">       <span class="keyword">else</span> ledrpwmval--;                  <span class="comment">/* dir==0 ledrpwmval递减 */</span></span><br><span class="line"></span><br><span class="line">       <span class="keyword">if</span> (ledrpwmval &gt; <span class="number">300</span>)dir = <span class="number">0</span>;       <span class="comment">/* ledrpwmval到达300后，方向为递减 */</span></span><br><span class="line">       <span class="keyword">if</span> (ledrpwmval == <span class="number">0</span>)dir = <span class="number">1</span>;        <span class="comment">/* ledrpwmval递减到0后，方向改为递增 */</span></span><br><span class="line"></span><br><span class="line">       <span class="comment">/* 修改比较值控制占空比 */</span></span><br><span class="line">       __HAL_TIM_SET_COMPARE(&amp;htim3, TIM_CHANNEL_2, ledrpwmval);</span><br><span class="line">   <span class="comment">/* USER CODE END WHILE */</span></span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/96820c973a394dc89ca30f3806ece232.jpeg" alt=""></p><h3 id="10-2-3-输入捕获">10.2.3 输入捕获</h3><p>通用定时器输入捕获的原理就是<br><img src="https://img-blog.csdnimg.cn/016e8eacab4f433188777c4f536a1d0e.png" alt=""><br>捕获到相应触发信号，就产生事件，记录计数值。<br>以捕获测量高电平脉宽为例<br>假设：递增计数模式<br>ARR：自动重装载寄存器的值<br>CCRx1：t1时间点CCRx的值<br>CCRx2：t2时间点CCRx的值<br>我们也可以通过这些值来计算高电平的脉宽。<br>T = N * (ARR+1) + CCRx2</p><p>用代码呈现就是：<br><img src="https://img-blog.csdnimg.cn/db95782273eb4e26a10ae9c67bc000c5.png#pic_center" alt=""><br>我们选择上升沿捕获<br>Input Filter是设置滤波，类似按键消抖。<br><img src="https://img-blog.csdnimg.cn/a2b141ec70f64fb882b9ea2770494c28.png#pic_center" alt=""></p><p>按实际情况配置GPIO上下拉（mode也选不了）<br><img src="https://img-blog.csdnimg.cn/4da2ebd1600a458488725076229244dc.png#pic_center" alt=""><br><img src="https://img-blog.csdnimg.cn/06b4c2cb24bb44388ce2c6bb4f85d5f4.png#pic_center" alt=""></p><p>生成工程</p><p>编写计数溢出中断回调函数和捕获中断回调函数：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*cap_sta:</span></span><br><span class="line"><span class="comment"> * [7]  :0,没有成功的捕获;1,成功捕获到一次.</span></span><br><span class="line"><span class="comment"> * [6]  :0,还没捕获到上升沿;1,已经捕获到上升沿.</span></span><br><span class="line"><span class="comment"> * [5:0]:捕获上升沿后溢出的次数,最多溢出63次,所以最长捕获值 = 63*65536 + 65535 = 4194303</span></span><br><span class="line"><span class="comment"> *       注意:为了通用,我们默认ARR和CCRy都是16位寄存器,对于32位的定时器(如:TIM5),也只按16位使用</span></span><br><span class="line"><span class="comment"> *       按1us的计数频率,最长溢出时间为:4194303 us, 约4.19秒</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> *      (说明一下：正常32位定时器来说,1us计数器加1,溢出时间:4294秒)</span></span><br><span class="line"><span class="comment"> * */</span></span><br><span class="line">u8 cap_sta = <span class="number">0</span>;    <span class="comment">/* 输入捕获状态 */</span></span><br><span class="line">u16 cap_val = <span class="number">0</span>;   <span class="comment">/* 输入捕获值 */</span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">HAL_TIM_PeriodElapsedCallback</span><span class="params">(TIM_HandleTypeDef *htim)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span>(htim-&gt;Instance==TIM5)</span><br><span class="line">        <span class="keyword">if</span> ((cap_sta &amp; <span class="number">0x80</span>) == <span class="number">0</span>)<span class="comment">//没有完成完整事件</span></span><br><span class="line">            <span class="keyword">if</span>(cap_sta &amp; <span class="number">0x40</span>)<span class="comment">//捕获到了上升沿</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span>((cap_sta &amp; <span class="number">0x3F</span>) == <span class="number">0x3F</span>)<span class="comment">//捕获次数超过了最大限度</span></span><br><span class="line">                &#123;</span><br><span class="line">                    TIM_RESET_CAPTUREPOLARITY(htim, TIM_CHANNEL_1); <span class="comment">/* 设置极性前，一定要先清除原来的设置！！ */</span></span><br><span class="line">                    TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_1, TIM_ICPOLARITY_RISING);<span class="comment">//捕捉极性设置为上升沿</span></span><br><span class="line">                    cap_sta |= <span class="number">0X80</span>;          <span class="comment">/* 直接标记成功捕获了一次 */</span></span><br><span class="line">                    cap_val = <span class="number">0XFFFF</span>;         <span class="comment">/* 时间设置为最大 */</span></span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span></span><br><span class="line">                &#123;</span><br><span class="line">                    cap_sta++;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">HAL_TIM_IC_CaptureCallback</span><span class="params">(TIM_HandleTypeDef *htim)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> (htim-&gt;Instance == TIM5)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>((cap_sta &amp; <span class="number">0x80</span>) == <span class="number">0</span>)   <span class="comment">//没有完成完整事件</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>((cap_sta &amp; <span class="number">0x40</span>) == <span class="number">0</span>)    <span class="comment">//第一次遇上上升沿</span></span><br><span class="line">            &#123;</span><br><span class="line">                cap_sta = <span class="number">0</span>;</span><br><span class="line">                cap_val = <span class="number">0</span>;</span><br><span class="line">                cap_sta |= <span class="number">0x40</span>; <span class="comment">//标记捕获到了上升沿</span></span><br><span class="line">                __HAL_TIM_DISABLE(htim);<span class="comment">//关闭定时器</span></span><br><span class="line">                __HAL_TIM_SET_COUNTER(htim, <span class="number">0</span>);<span class="comment">//计数器清0，重新有效记时间</span></span><br><span class="line">                TIM_RESET_CAPTUREPOLARITY(htim, TIM_CHANNEL_1); <span class="comment">/* 设置极性前，一定要先清除原来的设置！！ */</span></span><br><span class="line">                TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_1, TIM_ICPOLARITY_FALLING);<span class="comment">//捕捉极性设置为下降沿</span></span><br><span class="line">                __HAL_TIM_ENABLE(htim);<span class="comment">//开启定时器</span></span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">else</span>    <span class="comment">//第二次捕捉，判断为是下降沿</span></span><br><span class="line">            &#123;</span><br><span class="line">                cap_sta |= <span class="number">0x80</span>;    <span class="comment">//标记完成完整事件(即上升沿加上下降沿)</span></span><br><span class="line">                cap_val = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);<span class="comment">//记录这个时候的值</span></span><br><span class="line">                TIM_RESET_CAPTUREPOLARITY(htim, TIM_CHANNEL_1); <span class="comment">/* 设置极性前，一定要先清除原来的设置！！ */</span></span><br><span class="line">                TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_1, TIM_ICPOLARITY_RISING);<span class="comment">//捕捉极性设置为上升沿</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里没有申请多个变量来表示状态，而是把四个状态用<code>cap_sta</code>的6，7位表示，再用剩下的6位去记录ARR溢出次数。<br>这是单片机编程中很常见的节约内存的写法，掌握这种位的操作来节约变量不仅能节约单片机本就不多的空间，也能极大程度地锻炼我们的位运算能力，从而更好地操作寄存器。</p><p>我们不仅要使能IC中断(捕获中断)，也要使能溢出中断来记录溢出次数。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">HAL_TIM_IC_Start_IT(&amp;htim5, TIM_CHANNEL_1);</span><br><span class="line">__HAL_TIM_ENABLE_IT(&amp;htim5, TIM_IT_UPDATE);</span><br></pre></td></tr></table></figure><p>将得到的时间用串口打印出来</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* USER CODE BEGIN WHILE */</span></span><br><span class="line"> u32 temp;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (<span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(cap_sta &amp; <span class="number">0x80</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            temp = cap_sta &amp; <span class="number">0x3F</span>;</span><br><span class="line">            temp *= <span class="number">65535</span>;</span><br><span class="line">            temp +=cap_val;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;HIGH: %ld us&quot;</span>,temp);</span><br><span class="line">            cap_sta = <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">/* USER CODE END WHILE */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样就能记录一次高电平从上升沿到下降沿的时间了。</p><h3 id="10-2-4-输出比较">10.2.4 输出比较</h3><p>输出比较的实质也很简单：<br>就是一旦CNT等于CCR的值，CH输出的电平就反转一次（有很多选项，反转只是其中一种）。<br><img src="https://img-blog.csdnimg.cn/3c387d7e7e39457c9c8844aa8f483c36.jpeg#pic_center" alt=""><br>有朋友发现了，这也是一个更大的PWM。<br>是的，这个PWM的周期或者频率由ARR决定，但占空比固定50%，相位由CCR决定。</p><p><a href="https://baike.baidu.com/item/%E7%9B%B8%E4%BD%8D/2391710">相位是什么</a></p><p>上代码吧：<br><img src="https://img-blog.csdnimg.cn/80a7bfaaa03448a1bb5d5046a9a44cf0.png#pic_center" alt=""><br>Mode：输出比较模式，有冻结、有效电平、翻转等等，这里选择Toggle on match，就是在计数器等于CCR时，实现CH1输出翻转。<br>Pulse：也就是CCR的值<br>其他的在PWM实验中都是一致的(其实PWM也算是输出比较的一种吧)。<br>生成工程</p><p>使能定时器</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">HAL_TIM_Base_Start(&amp;htim4);<span class="comment">//使能TIM4</span></span><br><span class="line">HAL_TIM_OC_Start(&amp;htim4, TIM_CHANNEL_1);<span class="comment">//使能输出比较</span></span><br></pre></td></tr></table></figure><p>这样就vans，确实有点点简单。(用Cube工具生成代码的话)</p><p>当然也可以修改相位</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">__HAL_TIM_SET_COMPARE(&amp;htim8, TIM_CHANNEL_1, <span class="number">250</span>);</span><br></pre></td></tr></table></figure><p>但它不会立即生效，因为我们没有图像化配置时没有使能预加载功能。<br>不过我们可以用代码打开它，这样修改相位就能立刻写入影子寄存器，立刻生效了。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">__HAL_TIM_ENABLE_OCxPRELOAD(&amp;htim4, TIM_CHANNEL_1);</span><br></pre></td></tr></table></figure><h3 id="10-2-5-脉冲计数">10.2.5 脉冲计数</h3><p>细心的朋友可能又已经发现，当我们从基础定时器切换为通用定时器时，我们的配置框也多了一些选项：<br><img src="https://img-blog.csdnimg.cn/36fedac9c3da4763b5c04d0a961761a9.png#pic_center" alt=""><br><strong>Slave Mode从模式选择</strong>：</p><p><img src="https://img-blog.csdnimg.cn/9ecff5de87054d6397677776e53eb0f8.png#pic_center" alt=""><br>总共有5中，Disable、外部时钟模式1，复位模式，门级驱动模式，触发模式<br><img src="https://img-blog.csdnimg.cn/ca849725b9f24127a7403091b0c4cc2c.png#pic_center" alt=""><br>详情可以参考：<br><a href="https://blog.csdn.net/sxcrdxw/article/details/84946368">STM32Cube学习一 TIME定时器SlaveMode设置讲解</a></p><p>我们使用外部时钟模式1，来记录上升沿的次数。</p><p><img src="https://img-blog.csdnimg.cn/e5aa4730c215425492fb8a3e4fe68893.png" alt=""><br><strong>Trigger Source</strong>：<br><img src="https://img-blog.csdnimg.cn/2497ad8abc58404e899da23f2ed2cfc8.png" alt=""><br>ITRx和定时器的级联(级联：多个定时器相连)有关，我们暂时先不管它。<br>我们选择外部时钟模式1，就主要看TI1F_ED和TI1FP1、TI2FP2<br>TI1F_ED来自边沿检测器，它会被上升沿和下降沿都触发一次<br>而TI1FP1、TI2FP2只能记录上升沿或者下降沿。</p><p>这里我们选择TI1FP1捕捉单边沿。</p><p>详情可以参考：<br><a href="https://blog.csdn.net/shileiwu0505/article/details/124136792">【STM32技巧】（1）STM32定时器8种触发源之ITR0~ITR3说明</a>(关于级联的)<br><a href="https://blog.csdn.net/maknul/article/details/102155337">理解通用定时器</a></p><p><strong>Clock Source</strong>：<br>计数器时钟源：<br>Disable，就是用内部时钟，来自APB提供的时钟<br>外部时钟模式1：外部输入引脚(TIx)，来自定时器通道1或者通道2引脚的信号<br>外部时钟模式2：外部输入引脚(ETR)，可以复用为TIMx_ETR的IO引脚（芯片数据手册可以查复用）<br>内部触发输入(ITRx),用于定时器级联</p><p>这里我们选择了外部时钟模式，这里就无法配置了。</p><p>我们配置Cube工程：<br><img src="https://img-blog.csdnimg.cn/1233989130634771a67212fb71b3ab1c.png#pic_center" alt=""><br>配置通道GPIO<br><img src="https://img-blog.csdnimg.cn/3470f0cf2d3a4840a7357887bb70f3b0.png#pic_center" alt=""><br>生成工程</p><p>启动定时器：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">HAL_TIM_IC_Start(&amp;htim2, TIM_CHANNEL_1);</span><br></pre></td></tr></table></figure><p>编写计数代码：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* USER CODE BEGIN WHILE */</span></span><br><span class="line">    u16 curcnt;</span><br><span class="line">    u16 oldcnt = <span class="number">0</span>;</span><br><span class="line">    HAL_TIM_IC_Start(&amp;htim2, TIM_CHANNEL_1);</span><br><span class="line">    <span class="keyword">while</span> (<span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        curcnt = __HAL_TIM_GET_COUNTER(&amp;htim2);</span><br><span class="line">        <span class="keyword">if</span>(oldcnt != curcnt)</span><br><span class="line">        &#123;</span><br><span class="line">            oldcnt = curcnt;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;CNT:%d\r\n&quot;</span>,oldcnt);</span><br><span class="line">        &#125;</span><br><span class="line"><span class="comment">/* USER CODE END WHILE */</span></span><br></pre></td></tr></table></figure><h3 id="10-2-6-输入pwm">10.2.6 输入PWM</h3><p>虽说我们可以使用输入捕获来测量输入的PWM，但HAL库为了我们的方便，加了一些常用的函数和配置。<br>就比如测量输入PWM。<br>我们先用之前学的小知识，生成一个PWM<br><img src="https://img-blog.csdnimg.cn/d27c222e7d9c43b6961dbe9aebe463bc.png" alt=""><br>接着我们再拿一个定时器来测量它。<br>选择Combined Channel 中的PWM输入：<br><img src="https://img-blog.csdnimg.cn/a3b8a845fc6f4926beb0bb2756f5bce4.png" alt=""><br>配置好时基。<br>剩下的基本上无法更改。<br>可以看出这里CH1为捕获上升沿，CH2为捕获下降沿。（也是更改不了）</p><p>生成工程</p><p>先放波</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">HAL_TIM_PWM_Start(&amp;htim4, TIM_CHANNEL_1);</span><br></pre></td></tr></table></figure><p>接着我们来测波<br>这里我们仅使能CH1，在一次中断中完成测量。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">HAL_TIM_IC_Start_IT(&amp;htim3, TIM_CHANNEL_1);</span><br><span class="line">HAL_TIM_IC_Start(&amp;htim3, TIM_CHANNEL_2);</span><br></pre></td></tr></table></figure><p>编写中断捕获回调函数</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">u8 cap_sta = <span class="number">0</span>;     <span class="comment">/*1表示OK，0表示没完*/</span></span><br><span class="line">u8 cap_hval = <span class="number">0</span>;    <span class="comment">/* 高电平脉宽 */</span></span><br><span class="line">u8 cap_cval = <span class="number">0</span>;    <span class="comment">/* 周期 */</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">HAL_TIM_IC_CaptureCallback</span><span class="params">(TIM_HandleTypeDef *htim)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span>(htim-&gt;Instance == TIM3)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(cap_sta == <span class="number">0</span>)</span><br><span class="line">            <span class="keyword">if</span>(htim-&gt;Channel == HAL_TIM_ACTIVE_CHANNEL_1)</span><br><span class="line">            &#123;</span><br><span class="line">                cap_hval = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_2) + <span class="number">1</span> + <span class="number">1</span>;</span><br><span class="line">                <span class="comment">//第一个+1，是因为从模式RESET每次清0从0来开始，第二个+1是纠正系数</span></span><br><span class="line">                cap_cval = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1) + <span class="number">1</span> + <span class="number">1</span>;</span><br><span class="line">                cap_sta = <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>原理就是因为从模式设置为RESET，所以每次从0开始。<br>第一次捕获到上升沿开始，捕获值为0.<br>第二次捕获到下降沿，捕获值为<code>u8 cap_hval</code> ，这个过程为高电平<br>第三次捕获到上升沿，捕获值为<code>u8 cap_cval</code> ，即整个周期</p><p>我们将结果显示出来</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* USER CODE BEGIN WHILE */</span></span><br><span class="line">    <span class="keyword">while</span> (<span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (cap_sta)</span><br><span class="line">        &#123;</span><br><span class="line">            lcd_show_num(<span class="number">0</span>,<span class="number">0</span>,cap_hval,<span class="number">7</span>);</span><br><span class="line">            lcd_show_num(<span class="number">0</span>,<span class="number">20</span>,cap_cval,<span class="number">7</span>);</span><br><span class="line"></span><br><span class="line">            __HAL_TIM_DISABLE_IT(&amp;htim3, TIM_DMA_CC1);</span><br><span class="line">            cap_sta = <span class="number">0</span>;</span><br><span class="line">            cap_cval = <span class="number">0</span>;</span><br><span class="line">            cap_hval = <span class="number">0</span>;</span><br><span class="line">            __HAL_TIM_ENABLE_IT(&amp;htim3, TIM_DMA_CC1);</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="comment">/* USER CODE END WHILE */</span></span><br></pre></td></tr></table></figure><p>这里贴心地关闭了中断，是为了防止在初始化同时被中断，导致初始化失败就开始下一次捕获。</p><p>使用HAL库的宏关闭中断也有很多限制，这里我们学习正点原子的做法，使用汇编函数，进行全局中断使能或关闭。<br>我们在sys.c里添加汇编函数：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> __attribute__((noinline)) INTX_DISABLE(<span class="type">void</span>)</span><br><span class="line">&#123;</span><br><span class="line">    __asm__(<span class="string">&quot;cpsid i \t\n&quot;</span></span><br><span class="line">            <span class="string">&quot;bx lr&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> __attribute__((noinline)) INTX_ENABLE(<span class="type">void</span>)</span><br><span class="line">&#123;</span><br><span class="line">    __asm__(<span class="string">&quot;cpsie i \t\n&quot;</span></span><br><span class="line">            <span class="string">&quot;bx lr&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>sys.h添加声明</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">INTX_DISABLE</span><span class="params">(<span class="type">void</span>)</span>;<span class="comment">//关闭所有中断</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">INTX_ENABLE</span><span class="params">(<span class="type">void</span>)</span>;<span class="comment">//开启所有中断</span></span><br></pre></td></tr></table></figure><p>于是，刚刚的初始化可以改为：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">INTX_DISABLE();</span><br><span class="line">cap_sta = <span class="number">0</span>;</span><br><span class="line">cap_cval = <span class="number">0</span>;</span><br><span class="line">cap_hval = <span class="number">0</span>;</span><br><span class="line">INTX_ENABLE();</span><br></pre></td></tr></table></figure><p>这样，我们就完成了一次测量PWM波的周期和高电平脉宽的实验。</p><h2 id="10-3-高级定时器">10.3 高级定时器</h2><h3 id="10-3-1-版本新增">10.3.1 版本新增</h3><p>一代版本一代神，高级定时器版本新增：</p><ul><li>完美继承基础定时器和通用定时器特性</li><li>重复计数器</li><li>死区时间带可编程的互补输出</li><li>断路输入，用于将定时器的输出信号置于用户可选的安全配置中</li></ul><p><strong>重复计数器</strong><br><img src="https://img-blog.csdnimg.cn/0364a9b8e7b744829d4735d8c58ff5d6.png" alt=""><br>不再是计数溢出即产生UEV事件了，而是提前设置好REP寄存器，每次计数溢出就是给REP寄存器减1，直到REP寄存器为0，再产生UVE事件，再中断什么的了。</p><p><strong>互补输出</strong><br><img src="https://img-blog.csdnimg.cn/f9080290217149559a1a0d3ba60b2240.png" alt=""><br>可以看见TIMx_CHx（x：1-3）除了上个版本的输出通道，还得到了互补输出TIMx_CHxN通道（但通道4没有互补通道）<br>DTG寄存器用于设置死区时间</p><p><strong>断路功能</strong></p><p>又叫刹车功能，顾名思义，可以实现出现一些情况及时刹车。<br><img src="https://img-blog.csdnimg.cn/62b7bae3d5e045ec9c0dc55c540ff003.png" alt=""></p><h3 id="10-3-2-重复计数器">10.3.2 重复计数器</h3><p>刚刚说过，计数器每次上溢或下溢都能使重复计数器减1，减到0时，再发生一次溢出就会产生更新事件。<br>也就是说<br><strong>如果设置RCR(重复计数器)为N，更新事件将在N+1次溢出时发生</strong></p><p>例如，我们编写输出指定个数的PWM<br>这里的RCR就是指定个数-1，不过笔者打算后面在程序中动态修改它，故这里先选择0。<br><img src="https://img-blog.csdnimg.cn/96803826b72e4de1b08cc92f4900d8f3.png#pic_center" alt=""><br><img src="https://img-blog.csdnimg.cn/dfd7abb4aa5040b6aa1771cbe6453320.png#pic_center" alt=""><br>使能更新事件中断<br><img src="https://img-blog.csdnimg.cn/fd37728755b247c48c17d80f32577b77.png#pic_center" alt=""></p><p>生成工程</p><p>这里我们要用更新事件中断，所以使能它。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"> HAL_TIM_PWM_Start(&amp;htim8, TIM_CHANNEL_1);</span><br><span class="line">__HAL_TIM_ENABLE_IT(&amp;htim8,TIM_IT_UPDATE);</span><br></pre></td></tr></table></figure><p>编写溢出中断回调函数(这里的溢出中断事件要等RCR为0了才中断)</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">static</span> u8 n = <span class="number">0</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">HAL_TIM_PeriodElapsedCallback</span><span class="params">(TIM_HandleTypeDef *htim)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> (htim-&gt;Instance == TIM8)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(n)</span><br><span class="line">        &#123;</span><br><span class="line">            TIM8-&gt;RCR = n - <span class="number">1</span>;</span><br><span class="line">            HAL_TIM_GenerateEvent(htim, TIM_EVENTSOURCE_UPDATE);<span class="comment">//软件产生事件，目的是写入影子寄存器</span></span><br><span class="line">            __HAL_TIM_ENABLE(htim);</span><br><span class="line">            n = <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            TIM8-&gt;CR1 &amp;= ~(<span class="number">1</span> &lt;&lt; <span class="number">0</span>);<span class="comment">//不使用HAL库官方宏</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里不用HAL库官方宏的原因是<code>__HAL_TIM_DISABLE(htim);</code>不能直接关闭定时器，比较麻烦(其实比较安全，这里也算笔者偷懒了)</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">  * @brief  Disable the TIM peripheral.</span></span><br><span class="line"><span class="comment">  * @param  __HANDLE__ TIM handle</span></span><br><span class="line"><span class="comment">  * @retval None</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __HAL_TIM_DISABLE(__HANDLE__) \</span></span><br><span class="line"><span class="meta">  do &#123; \</span></span><br><span class="line"><span class="meta">    <span class="keyword">if</span> (((__HANDLE__)-&gt;Instance-&gt;CCER &amp; TIM_CCER_CCxE_MASK) == 0UL) \</span></span><br><span class="line"><span class="meta">    &#123; \</span></span><br><span class="line"><span class="meta">      <span class="keyword">if</span>(((__HANDLE__)-&gt;Instance-&gt;CCER &amp; TIM_CCER_CCxNE_MASK) == 0UL) \</span></span><br><span class="line"><span class="meta">      &#123; \</span></span><br><span class="line"><span class="meta">        (__HANDLE__)-&gt;Instance-&gt;CR1 &amp;= ~(TIM_CR1_CEN); \</span></span><br><span class="line"><span class="meta">      &#125; \</span></span><br><span class="line"><span class="meta">    &#125; \</span></span><br><span class="line"><span class="meta">  &#125; while(0)</span></span><br></pre></td></tr></table></figure><p>可以看出，HAL库官方宏要判断关闭通道和互补通道才能执行关闭语句。<br>附上提到的寄存器的手册：<br><img src="https://img-blog.csdnimg.cn/3350146d34464f21a0a7fe62f1681d1a.png#pic_center" alt=""><br><img src="https://img-blog.csdnimg.cn/432ca6a92fbe4d798ff813632b338128.png#pic_center" alt=""></p><p>接着我们编写设置RCR值的函数</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">tim_set_pwm_n</span><span class="params">(u8 _n)</span></span><br><span class="line">&#123;</span><br><span class="line">    n = _n;</span><br><span class="line">    HAL_TIM_GenerateEvent(&amp;htim8, TIM_EVENTSOURCE_UPDATE);<span class="comment">//软件产生事件，目的是写入影子寄存器</span></span><br><span class="line">    __HAL_TIM_ENABLE(&amp;htim8);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里用软件产生事件，目的是快速进入下一轮事件，快速写入影子寄存器，立马生效。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tim_set_pwm_n(<span class="number">5</span>);</span><br></pre></td></tr></table></figure><p>就能让相应的5次PWM出现了。</p><h3 id="10-3-3-互补输出-死区控制-刹车断路">10.3.3 互补输出+死区控制+刹车断路</h3><h4 id="10-3-3-1-互补输出和死区控制">10.3.3.1 互补输出和死区控制</h4><p>从图片上理解一下互补输出和死区<br><img src="https://img-blog.csdnimg.cn/f1f45c58a0d143bca15a7b30a4fab693.jpeg#pic_center" alt=""><br>PWM1和PWM2就是互补输出<br>虚线区域就是死区时间</p><p>互补输出和死区控制一般应用在H桥，用于控制电机正反转<br><img src="https://img-blog.csdnimg.cn/cd259a643a4444afbc80b0e7f5533477.png" alt=""><br>导通两个OC1，正转<br>导通两个OC1N，反转<br>(不能交叉导通,会断路)<br><strong>但由于元器件是有延迟特性，所以需要加上死区时间控制</strong></p><h4 id="10-3-3-2-死区时间计算">10.3.3.2 死区时间计算</h4><p><a href="https://www.cnblogs.com/unclemac/p/12783344.html">STM32 TIM高级定时器死区时间的计算</a></p><p>主要就是：</p><ol><li><p>确定t𝐷𝑇𝑆的值<br><img src="https://img-blog.csdnimg.cn/0baf09798ffb4a8ebcc2a868146092e8.png" alt=""><br><img src="https://img-blog.csdnimg.cn/0b431346d64b4e83a45e1615e2439440.png" alt=""></p></li><li><p>判断DTG[7:5]，选择计算公式<br><img src="https://img-blog.csdnimg.cn/7f95d19725a6412ca469d1f33a5938dc.png" alt=""></p></li><li><p>代入选择的公式计算</p></li></ol><p>举个栗子（F1为例）：DTG[7:0]=250，tDST选择4分频：<br>250，即二进制：1111 1010，选第四条<br>Tdts = 1/tDST = 1/(72000000/4)<br>DT = (32+26)*16*(Tdts) = (32+26)*16*(55.56) ns=51.55968us</p><h4 id="10-3-3-3-刹车断路">10.3.3.3 刹车断路</h4><p>使能刹车功能：将TIMx_BDTR的BKE位置1，刹车输入信号极性由BKP位设置<br><img src="https://img-blog.csdnimg.cn/97513abbe225491e94f1d0be645d8905.png" alt=""><br>使能刹车功能后：由TIMx_BDTR的MOE、OSSI、OSSR位，<br>TIMx_CR2的OISx、OISxN位，TIMx_CCER的CCxE、CCxNE位控制OCx和OCxN输出状态<br><strong>无论何时，OCx和OCxN输出都不能同时处在有效电平</strong></p><ol><li>MOE位被清零，OCx和OCxN为无效、空闲或复位状态(OSSI位选择)</li><li>OCx和OCxN的状态：由相关控制位状态决定，<br>当使用互补输出时：根据情况自动控制输出电平，参考参考手册使用刹车(断路)功能小节</li><li>BIF位置1，如果使能了BIE位，还会产生刹车中断；如果使能了TDE位，会产生DMA请求</li><li>如果AOE位置 1，在下一个 更新事件UEV时，MOE位被自动置 1</li></ol><p><img src="https://img-blog.csdnimg.cn/8c36981d3d0144dfb0f757793af3285a.png#pic_center" alt=""><br><img src="https://img-blog.csdnimg.cn/13309fa60f87447a884d2a50fdb16e92.png#pic_center" alt=""></p><h4 id="10-3-3-3-cube的快速配置">10.3.3.3 Cube的快速配置</h4><p>基本上STM32Cube都能为我们生成大半个江山，所以重点就到了配置STM32Cube上了。<br><img src="https://img-blog.csdnimg.cn/e96b19c54a15450c8eb8e13f49a84731.png#pic_center" alt=""><br><img src="https://img-blog.csdnimg.cn/ae2b63ba827f4d2f9469b12d15efebfa.png#pic_center" alt=""><br>CKD=4，不同于PSC=4（这个语句 不是对频率进行分频，分频是对于PSC的控制。这个只是选择后面tim涉及到的滤波器的时钟信号。比如1的话，就认为滤波器的时钟等于定时器时钟）<br>具体应用：<br><a href="https://blog.csdn.net/yuyan7045/article/details/121289037">STM32 时钟分割TIM_ClockDivision配置及使用详细说明</a><br>接着使能BRK刹车断路<br>设置极性为高电平<br>Automatic Output State：刹车结束后自动恢复输出<br>设置死区时间为100<br>（选择公式一：DT=5556ns=5.556us）<br><img src="https://img-blog.csdnimg.cn/c9eea10cfdfe4fd8941d60508fbcd5a7.png#pic_center" alt=""><br>通道有效电平为高电平<br>设置两个输出的空闲状态（刹车后的状态）：四个都为低电平，这样H桥就不导通了。</p><p>不过，我们之前把刹车引脚极性设置为高电平，为了让它不默认刹车断路，我们还要配置GPIO<br><img src="https://img-blog.csdnimg.cn/8620babcde314f46b2c1d176e49f3db7.png#pic_center" alt=""><br>将刹车引脚PA6设置为下拉</p><p>生成工程</p><p>同时使能互补输出：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">HAL_TIM_PWM_Start(&amp;htim1, TIM_CHANNEL_1);</span><br><span class="line">HAL_TIMEx_PWMN_Start(&amp;htim1,TIM_CHANNEL_1);</span><br></pre></td></tr></table></figure><p>看一下效果：<br><img src="https://img-blog.csdnimg.cn/b289137f7786479c8a920e7da17cb8f9.jpeg" alt=""><br><img src="https://img-blog.csdnimg.cn/21a00ad6b1d54c7284ee32d7f3f003c6.jpeg" alt=""><br>至此，我们便完成了对高级定时器互补输出+死区控制+刹车断路的粗浅认识了。</p>]]></content>
      
      
      <categories>
          
          <category> 跟我一起写STM32 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> stm32 </tag>
            
            <tag> 嵌入式 </tag>
            
            <tag> c语言 </tag>
            
            <tag> 单片机 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LCD(含FSMC)——跟我一起写STM32(第七期)</title>
      <link href="/2023/01/12/STM32/LCD(%E5%90%ABFSMC)%E2%80%94%E2%80%94%E8%B7%9F%E6%88%91%E4%B8%80%E8%B5%B7%E5%86%99STM32(%E7%AC%AC%E4%B8%83%E6%9C%9F)/"/>
      <url>/2023/01/12/STM32/LCD(%E5%90%ABFSMC)%E2%80%94%E2%80%94%E8%B7%9F%E6%88%91%E4%B8%80%E8%B5%B7%E5%86%99STM32(%E7%AC%AC%E4%B8%83%E6%9C%9F)/</url>
      
        <content type="html"><![CDATA[<span id="more"></span><h3 id="文章目录">文章目录</h3><ul><li><a href="#9-%E7%82%B9%E4%BA%AE%E7%AC%AC%E4%B8%80%E5%9D%97%E5%BD%A9%E5%B1%8F">9 点亮第一块彩屏</a><ul><li><a href="#91-%E8%AE%A4%E8%AF%86tftlcd">9.1 认识TFTLCD</a></li><li><a href="#92-8080%E6%97%B6%E5%BA%8F">9.2 8080时序</a></li><li><a href="#93-lcd%E9%A9%B1%E5%8A%A8">9.3 LCD驱动</a></li><li><a href="#94-%E7%94%A8fsmc%E7%88%86%E6%94%B98080%E6%97%B6%E5%BA%8F">9.4 用FSMC爆改8080时序</a></li><li><a href="#95-%E6%96%B0%E7%89%88lcd%E9%A9%B1%E5%8A%A8">9.5 新版LCD驱动</a></li></ul></li></ul><h1 id="9-点亮第一块彩屏">9 点亮第一块彩屏</h1><h2 id="9-1-认识tftlcd">9.1 认识TFTLCD</h2><p>这是市面上显示器优缺点：<br><img src="https://img-blog.csdnimg.cn/279de8355c394aebbf111a4fde7de3b2.png" alt=""><br>这就引出了我们今天的主角(点阵和断码就先不理他们)——LCD。<br>TFT-LCD 即薄膜晶体管液晶显示器。<br>它：</p><ul><li>低成本</li><li>高解析</li><li>高对比度</li><li>响应速度快</li></ul><p>是您的不二选择。</p><p>详情请咨询：<br><a href="https://zhuanlan.zhihu.com/p/133306648">LCD原理</a></p><p>这个就是笔者使用的LCD屏幕：<br><img src="https://img-blog.csdnimg.cn/75a6e42cde2f496abbe011e0bfc561f8.png#pic_center" alt=""></p><p><strong>三基色原理</strong><br>笔者这块LCD屏的颜色是RGB565——意思就是Red有2的5次方=32种，Green有2的6次方=64种，Blue有2的5次方=32种<br>无法通过其他颜色混合得到的颜色，称之为：基本色<br>通过三基色(也叫三原色)混合，可以得到自然界中绝大部分颜色！</p><p>电脑一般用32位来表示一个颜色（ARGB888）：(A表示透明度)<br><img src="https://img-blog.csdnimg.cn/d1bf8ece15144c9aa619ed9ac8115c72.png" alt=""></p><p>单片机一般用16/24位表示一个颜色（RGB565/RGB888）</p><p>RGB565:<br><img src="https://img-blog.csdnimg.cn/54db5517e692468b810be118dce48756.png" alt=""><br>RGB888：</p><p><img src="https://img-blog.csdnimg.cn/3a419c7813a84553a74b9c3a2faf624c.png" alt=""><br>那我们驱动LCD其实很驱动OLED(<a href="https://blog.csdn.net/DreamTrue520/article/details/128643297">第六期</a>)差不多，就是把写0写1改成写一个个RGB寄存器，往里面写颜色。<br><strong>驱动LCD的一般过程：</strong><br><img src="https://img-blog.csdnimg.cn/6cf3dd33119245c9a3521c7e8b510ba9.png#pic_center" alt=""></p><h2 id="9-2-8080时序">9.2 8080时序</h2><p>它使用的是8080 的并行接口。8080 并行接口的发明者是 INTEL，该总线也被广泛应用于各类液晶显示器。<br>时序使用的是8080时序：<br><a href="https://blog.csdn.net/qq_45542360/article/details/104541425">LCD屏8080时序</a></p><p><strong>8080时序读写过程</strong><br>先将读写的数据类型<strong>RS设置为高（数据）/低（命令）</strong>，然后拉低<strong>片选</strong>，选中对应的设备、然后将<strong>读数据还是写数据RD/WR</strong>拉低。</p><p>读数据：在RD的上升沿、读取数据线上的数据。<br>写数据：在WR的下降沿、使数据写入设备中。<br><img src="https://img-blog.csdnimg.cn/220b405d874748d3bac3cf5ec4b80c3d.png" alt=""></p><p>8080写时序：<br>数据（RS=1）/命令（RS=0）在WR的上升沿，写入LCD驱动IC，RD保持高电平<br><img src="https://img-blog.csdnimg.cn/2aec94629f084a289c9c44c45d3e3a9d.png" alt=""></p><p>8080读时序<br>数据（RS=1）/命令（RS=0）在RD的上升沿，读取到MCU，WR保持高电平<br><img src="https://img-blog.csdnimg.cn/b6ffcbdf035743ad9fd2a678f517b503.png" alt=""></p><p>8080 写数据</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> _lcd_wr_data (<span class="type">uint16_t</span> data)</span><br><span class="line">&#123;</span><br><span class="line">    LCD_RS(<span class="number">1</span>);          <span class="comment">/* 操作数据 */</span></span><br><span class="line">    LCD_CS(<span class="number">0</span>);          <span class="comment">/* 选中 */</span></span><br><span class="line">    LCD_DATA_OUT(data);     <span class="comment">/* 数据 */</span></span><br><span class="line">    LCD_WR(<span class="number">0</span>);          <span class="comment">/* WR低电平 */</span></span><br><span class="line">    LCD_WR(<span class="number">1</span>);          <span class="comment">/* WR高电平 */</span></span><br><span class="line">    LCD_CS(<span class="number">1</span>);          <span class="comment">/* 释放片选 */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>8080 读数据</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">uint16_t</span>  <span class="title function_">lcd_rd_data</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">uint16_t</span> ram;  <span class="comment">/* 定义变量 */</span></span><br><span class="line"> LCD_RS(<span class="number">1</span>);              <span class="comment">/* 操作数据 */</span></span><br><span class="line">    LCD_CS(<span class="number">0</span>);<span class="comment">/* 选中 */</span></span><br><span class="line">   LCD_RD(<span class="number">0</span>);<span class="comment">/* RD低电平 */</span></span><br><span class="line">   ram = LCD_DATA_IN;    <span class="comment">/* 读取数据 */</span></span><br><span class="line">    LCD_RD(<span class="number">1</span>);<span class="comment">/* RD高电平 */</span></span><br><span class="line">    LCD_CS(<span class="number">1</span>);<span class="comment">/* 释放片选 */</span></span><br><span class="line"><span class="keyword">return</span> ram；<span class="comment">/* 返回读数 */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="9-3-lcd驱动">9.3 LCD驱动</h2><p>常用LCD的命令：<br><img src="https://img-blog.csdnimg.cn/2298f707171047068ba1978b8a03eac1.png" alt=""><br>好多都是我们的老朋友了(<a href="https://blog.csdn.net/DreamTrue520/article/details/128643297">第六期OLED实验</a>)，在编写驱动的流程也是差不多，往对应显存写入数据即可。<br>附上代码：<br>lcd.h</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// Created by Whisky on 2023/1/6.</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">ifndef</span> HELLOWORLD_LCD_H</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> HELLOWORLD_LCD_H</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;main.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* 引脚定义 */</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> LCD_BL_GPIO_PORT                GPIOB</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> LCD_BL_GPIO_PIN                 GPIO_PIN_0</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> LCD_BL_GPIO_CLK_ENABLE()        do&#123; __HAL_RCC_GPIOB_CLK_ENABLE(); &#125;while(0)</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> LCD_WR_GPIO_PORT                GPIOD</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> LCD_WR_GPIO_PIN                 GPIO_PIN_5</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> LCD_WR_GPIO_CLK_ENABLE()        do&#123; __HAL_RCC_GPIOD_CLK_ENABLE(); &#125;while(0)</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> LCD_RD_GPIO_PORT                GPIOD</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> LCD_RD_GPIO_PIN                 GPIO_PIN_4</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> LCD_RD_GPIO_CLK_ENABLE()        do&#123; __HAL_RCC_GPIOD_CLK_ENABLE(); &#125;while(0)</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> LCD_CS_GPIO_PORT                GPIOG</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> LCD_CS_GPIO_PIN                 GPIO_PIN_12</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> LCD_CS_GPIO_CLK_ENABLE()        do&#123; __HAL_RCC_GPIOG_CLK_ENABLE(); &#125;while(0)</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> LCD_RS_GPIO_PORT                GPIOG</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> LCD_RS_GPIO_PIN                 GPIO_PIN_0</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> LCD_RS_GPIO_CLK_ENABLE()        do&#123; __HAL_RCC_GPIOG_CLK_ENABLE(); &#125;while(0)</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> LCD_BL(x)       LCD_BL_GPIO_PORT-&gt;BSRR = LCD_BL_GPIO_PIN &lt;&lt; (16 * (!x))</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> LCD_WR(x)       LCD_WR_GPIO_PORT-&gt;BSRR = LCD_WR_GPIO_PIN &lt;&lt; (16 * (!x))</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> LCD_RD(x)       LCD_RD_GPIO_PORT-&gt;BSRR = LCD_RD_GPIO_PIN &lt;&lt; (16 * (!x))</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> LCD_CS(x)       LCD_CS_GPIO_PORT-&gt;BSRR = LCD_CS_GPIO_PIN &lt;&lt; (16 * (!x))</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> LCD_RS(x)       LCD_RS_GPIO_PORT-&gt;BSRR = LCD_RS_GPIO_PIN &lt;&lt; (16 * (!x))</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> D0_Pin GPIO_PIN_14</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> D0_GPIO_Port GPIOD</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> D0_len 14</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> D1_Pin GPIO_PIN_15</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> D1_GPIO_Port GPIOD</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> D1_len 15</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> D2_Pin GPIO_PIN_0</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> D2_GPIO_Port GPIOD</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> D2_len 0</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> D3_Pin GPIO_PIN_1</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> D3_GPIO_Port GPIOD</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> D3_len 1</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> D4_Pin GPIO_PIN_7</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> D4_GPIO_Port GPIOE</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> D4_len 7</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> D5_Pin GPIO_PIN_8</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> D5_GPIO_Port GPIOE</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> D5_len 8</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> D6_Pin GPIO_PIN_9</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> D6_GPIO_Port GPIOE</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> D6_len 9</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> D7_Pin GPIO_PIN_10</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> D7_GPIO_Port GPIOE</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> D7_len 10</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> D8_Pin GPIO_PIN_11</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> D8_GPIO_Port GPIOE</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> D8_len 11</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> D9_Pin GPIO_PIN_12</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> D9_GPIO_Port GPIOE</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> D9_len 12</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> D10_Pin GPIO_PIN_13</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> D10_GPIO_Port GPIOE</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> D10_len 13</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> D11_Pin GPIO_PIN_14</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> D11_GPIO_Port GPIOE</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> D11_len 14</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> D12_Pin GPIO_PIN_15</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> D12_GPIO_Port GPIOE</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> D12_len 15</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> D13_Pin GPIO_PIN_8</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> D13_GPIO_Port GPIOD</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> D13_len 8</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> D14_Pin GPIO_PIN_9</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> D14_GPIO_Port GPIOD</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> D14_len 9</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> D15_Pin GPIO_PIN_10</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> D15_GPIO_Port GPIOD</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> D15_len 10</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> GPIO_CLK_Enable() &#123;__HAL_RCC_GPIOE_CLK_ENABLE();__HAL_RCC_GPIOD_CLK_ENABLE();&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> D0 ((D0_GPIO_Port-&gt;IDR &amp; D0_Pin)&gt;&gt;D0_len)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> D1 ((D1_GPIO_Port-&gt;IDR &amp; D1_Pin)&gt;&gt;D1_len)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> D2 ((D2_GPIO_Port-&gt;IDR &amp; D2_Pin)&gt;&gt;D2_len)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> D3 ((D3_GPIO_Port-&gt;IDR &amp; D3_Pin)&gt;&gt;D3_len)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> D4 ((D4_GPIO_Port-&gt;IDR &amp; D4_Pin)&gt;&gt;D4_len)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> D5 ((D5_GPIO_Port-&gt;IDR &amp; D5_Pin)&gt;&gt;D5_len)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> D6 ((D6_GPIO_Port-&gt;IDR &amp; D6_Pin)&gt;&gt;D6_len)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> D7 ((D7_GPIO_Port-&gt;IDR &amp; D7_Pin)&gt;&gt;D7_len)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> D8 ((D8_GPIO_Port-&gt;IDR &amp; D8_Pin)&gt;&gt;D8_len)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> D9 ((D9_GPIO_Port-&gt;IDR &amp; D9_Pin)&gt;&gt;D9_len)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> D10 ((D10_GPIO_Port-&gt;IDR &amp; D10_Pin)&gt;&gt;D10_len)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> D11 ((D11_GPIO_Port-&gt;IDR &amp; D11_Pin)&gt;&gt;D11_len)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> D12 ((D12_GPIO_Port-&gt;IDR &amp; D12_Pin)&gt;&gt;D12_len)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> D13 ((D13_GPIO_Port-&gt;IDR &amp; D13_Pin)&gt;&gt;D13_len)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> D14 ((D14_GPIO_Port-&gt;IDR &amp; D14_Pin)&gt;&gt;D14_len)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> D15 ((D15_GPIO_Port-&gt;IDR &amp; D15_Pin)&gt;&gt;D15_len)</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> _D0 (D0_GPIO_Port-&gt;ODR)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> _D1 (D1_GPIO_Port-&gt;ODR)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> _D2 (D2_GPIO_Port-&gt;ODR)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> _D3 (D3_GPIO_Port-&gt;ODR)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> _D4 (D4_GPIO_Port-&gt;ODR)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> _D5 (D5_GPIO_Port-&gt;ODR)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> _D6 (D6_GPIO_Port-&gt;ODR)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> _D7 (D7_GPIO_Port-&gt;ODR)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> _D8 (D8_GPIO_Port-&gt;ODR)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> _D9 (D9_GPIO_Port-&gt;ODR)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> _D10 (D10_GPIO_Port-&gt;ODR)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> _D11 (D11_GPIO_Port-&gt;ODR)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> _D12 (D12_GPIO_Port-&gt;ODR)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> _D13 (D13_GPIO_Port-&gt;ODR)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> _D14 (D14_GPIO_Port-&gt;ODR)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> _D15 (D15_GPIO_Port-&gt;ODR)</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> LCD_DATA_IN ( (D0) |(D1 &lt;&lt; 1) | (D2 &lt;&lt; 2) | (D3 &lt;&lt; 3) | (D4 &lt;&lt; 4) | (D5 &lt;&lt; 5) | (D6 &lt;&lt; 6) | \</span></span><br><span class="line"><span class="meta">                        (D7 &lt;&lt; 7) |(D8 &lt;&lt; 8) | (D9 &lt;&lt; 9) | (D10 &lt;&lt; 10) | (D11 &lt;&lt; 11) | (D12 &lt;&lt; 12) | \</span></span><br><span class="line"><span class="meta">                         (D13 &lt;&lt; 13) | (D14 &lt;&lt; 14) | (D15 &lt;&lt; 15) )</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> get_bit(x, Pin, bit, len, o) &#123;(x &amp; Pin) &gt;&gt; bit;<span class="keyword">if</span>((((x &amp; Pin) &gt;&gt; bit) &amp; 0x01) == 1) o |= (1 &lt;&lt; len);  <span class="keyword">else</span> o &amp;= ~(1 &lt;&lt; len);&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> LCD_DATA_OUT(x) &#123;       \</span></span><br><span class="line"><span class="meta">                            get_bit(x, GPIO_PIN_0, 0, D0_len, _D0) \</span></span><br><span class="line"><span class="meta">                            get_bit(x, GPIO_PIN_1, 1, D1_len, _D1) \</span></span><br><span class="line"><span class="meta">                            get_bit(x, GPIO_PIN_2, 2, D2_len, _D2) \</span></span><br><span class="line"><span class="meta">                            get_bit(x, GPIO_PIN_3, 3, D3_len, _D3) \</span></span><br><span class="line"><span class="meta">                            get_bit(x, GPIO_PIN_4, 4, D4_len, _D4) \</span></span><br><span class="line"><span class="meta">                            get_bit(x, GPIO_PIN_5, 5, D5_len, _D5) \</span></span><br><span class="line"><span class="meta">                            get_bit(x, GPIO_PIN_6, 6, D6_len, _D6) \</span></span><br><span class="line"><span class="meta">                            get_bit(x, GPIO_PIN_7, 7, D7_len, _D7) \</span></span><br><span class="line"><span class="meta">                            get_bit(x, GPIO_PIN_8, 8, D8_len, _D8) \</span></span><br><span class="line"><span class="meta">                            get_bit(x, GPIO_PIN_9, 9, D9_len, _D9) \</span></span><br><span class="line"><span class="meta">                            get_bit(x, GPIO_PIN_10, 10, D10_len, _D10) \</span></span><br><span class="line"><span class="meta">                            get_bit(x, GPIO_PIN_11, 11, D11_len, _D11) \</span></span><br><span class="line"><span class="meta">                            get_bit(x, GPIO_PIN_12, 12, D12_len, _D12) \</span></span><br><span class="line"><span class="meta">                            get_bit(x, GPIO_PIN_13, 13, D13_len, _D13) \</span></span><br><span class="line"><span class="meta">                            get_bit(x, GPIO_PIN_14, 14, D14_len, _D14) \</span></span><br><span class="line"><span class="meta">                            get_bit(x, GPIO_PIN_15, 15, D15_len, _D15) \</span></span><br><span class="line"><span class="meta">                        &#125;</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> LCD_FONTSIZE_1206 12</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> LCD_FONTSIZE_1608 16</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> LCD_FONTSIZE_2412 24</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> LCD_FONTSIZE_3216 32</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="type">uint16_t</span> width;</span><br><span class="line">    <span class="type">uint16_t</span> height;</span><br><span class="line">    <span class="type">uint16_t</span> id;</span><br><span class="line">    <span class="type">uint8_t</span> dir;        <span class="comment">/* 方向   0-竖屏 1-横屏*/</span></span><br><span class="line">    <span class="type">uint16_t</span> wramcmd;   <span class="comment">/* gram指令 w */</span></span><br><span class="line">    <span class="type">uint16_t</span> rramcmd;   <span class="comment">/* gram指令 r */</span></span><br><span class="line">    <span class="type">uint16_t</span> setxcmd;   <span class="comment">/* 设置x坐标 */</span></span><br><span class="line">    <span class="type">uint16_t</span> setycmd;   <span class="comment">/* 设置y坐标 */</span></span><br><span class="line">&#125; _lcd_dev;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> WHITE           0xFFFF      <span class="comment">/* 白色 */</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> BLACK           0x0000      <span class="comment">/* 黑色 */</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> RED             0xF800      <span class="comment">/* 红色 */</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> GREEN           0x07E0      <span class="comment">/* 绿色 */</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> BLUE            0x001F      <span class="comment">/* 蓝色 */</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MAGENTA         0XF81F      <span class="comment">/* 品红色/紫红色 = BLUE + RED */</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> YELLOW          0XFFE0      <span class="comment">/* 黄色 = GREEN + RED */</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> CYAN            0X07FF      <span class="comment">/* 青色 = GREEN + BLUE */</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> BROWN           0XBC40      <span class="comment">/* 棕色 */</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> BRRED           0XFC07      <span class="comment">/* 棕红色 */</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> GRAY            0X8430      <span class="comment">/* 灰色 */</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> DARKBLUE        0X01CF      <span class="comment">/* 深蓝色 */</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> LIGHTBLUE       0X7D7C      <span class="comment">/* 浅蓝色 */</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> GRAYBLUE        0X5458      <span class="comment">/* 灰蓝色 */</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> LIGHTGREEN      0X841F      <span class="comment">/* 浅绿色 */</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> LGRAY           0XC618      <span class="comment">/* 浅灰色(PANNEL),窗体背景色 */</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> LGRAYBLUE       0XA651      <span class="comment">/* 浅灰蓝色(中间层颜色) */</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> LBBLUE          0X2B12      <span class="comment">/* 浅棕蓝色(选择条目的反色) */</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line">    <span class="type">uint16_t</span> color;</span><br><span class="line">    <span class="type">uint8_t</span> size;</span><br><span class="line">    <span class="type">uint8_t</span> mode;</span><br><span class="line">&#125; f_args;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">lcd_init</span><span class="params">(<span class="type">void</span>)</span>;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> lcd_clear(...)                  _lcd_clear((f_args)&#123;__VA_ARGS__&#125;)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> lcd_show_char(x, y, chr,...)    _lcd_show_char(x, y, chr, (f_args)&#123;__VA_ARGS__&#125;)</span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> _lcd_clear(f_args in);</span><br><span class="line"><span class="type">void</span> _lcd_show_char(<span class="type">uint16_t</span> x, <span class="type">uint16_t</span> y, <span class="type">char</span> chr, f_args in);</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> _lcd_wr_data (<span class="type">uint16_t</span> data);</span><br><span class="line"><span class="type">void</span> _lcd_wr_regno(<span class="type">uint16_t</span> reg);</span><br><span class="line"><span class="type">void</span> _lcd_ex_ili9341_reginit(<span class="type">void</span>);</span><br><span class="line"><span class="type">void</span> _lcd_ex_st7789_reginit(<span class="type">void</span>);</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span> <span class="comment">//HELLOWORLD_LCD_H</span></span></span><br></pre></td></tr></table></figure><p>这里的<code>LCD_DATA_IN</code>是读这些引脚的电平，之后合并成一个16位数据。<br><code>LCD_DATA_OUT(x)</code>同理，就是把<code>x</code>写给这16个引脚<br>这里笔者的方法非常的笨拙，见谅。(其实比较好的方法是把这些引脚归为一个<code>GPIOx</code>里面，直接对<code>GPIOx_PIN_ALL</code>进行操作)</p><p>然后编写的驱动上使用了默认函数来方便调用。实现原理可以参考(<a href="https://blog.csdn.net/DreamTrue520/article/details/128643297">第六期</a>)<br>lcd.c</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// Created by Whisky on 2023/1/6.</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;lcd.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;retarget.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;lcdfont.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">uint32_t</span> g_point_color = RED;</span><br><span class="line"><span class="type">uint32_t</span> g_back_color = WHITE;</span><br><span class="line"></span><br><span class="line">_lcd_dev lcddev;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 8080 写数据 */</span></span><br><span class="line"><span class="type">void</span> _lcd_wr_data (<span class="type">uint16_t</span> data)</span><br><span class="line">&#123;</span><br><span class="line">    LCD_RS(<span class="number">1</span>);          <span class="comment">/* 操作数据 */</span></span><br><span class="line">    LCD_CS(<span class="number">0</span>);          <span class="comment">/* 选中 */</span></span><br><span class="line">    LCD_DATA_OUT(data);     <span class="comment">/* 数据 */</span></span><br><span class="line">    LCD_WR(<span class="number">0</span>);          <span class="comment">/* WR低电平 */</span></span><br><span class="line">    LCD_WR(<span class="number">1</span>);          <span class="comment">/* WR高电平 */</span></span><br><span class="line">    LCD_CS(<span class="number">1</span>);          <span class="comment">/* 释放片选 */</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 8080 写命令 */</span></span><br><span class="line"><span class="type">void</span> _lcd_wr_regno(<span class="type">uint16_t</span> reg)</span><br><span class="line">&#123;</span><br><span class="line">    LCD_RS(<span class="number">0</span>);          <span class="comment">/* RS=0,表示写寄存器 */</span></span><br><span class="line">    LCD_CS(<span class="number">0</span>);          <span class="comment">/* 选中 */</span></span><br><span class="line">    LCD_DATA_OUT(reg);    <span class="comment">/* 命令 */</span></span><br><span class="line">    LCD_WR(<span class="number">0</span>);          <span class="comment">/* WR低电平 */</span></span><br><span class="line">    LCD_WR(<span class="number">1</span>);          <span class="comment">/* WR高电平 */</span></span><br><span class="line">    LCD_CS(<span class="number">1</span>);          <span class="comment">/* 释放片选 */</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 往寄存器写值 */</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">lcd_write_reg</span><span class="params">(<span class="type">uint16_t</span> reg, <span class="type">uint16_t</span> data)</span></span><br><span class="line">&#123;</span><br><span class="line">    _lcd_wr_regno(reg);    <span class="comment">/* 写入要写的寄存器序号 */</span></span><br><span class="line">    _lcd_wr_data(data);      <span class="comment">/* 写入数据 */</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">static</span> <span class="type">void</span> <span class="title function_">lcd_opt_delay</span><span class="params">(<span class="type">uint32_t</span> i)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">while</span>(i--);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* LCD读数据 */</span></span><br><span class="line"><span class="type">uint16_t</span> <span class="title function_">lcd_rd_data</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">volatile</span> <span class="type">uint16_t</span> ram;  <span class="comment">/* 防止被优化 */</span></span><br><span class="line"></span><br><span class="line">    GPIO_InitTypeDef GPIO_InitStruct;</span><br><span class="line">    <span class="comment">/* LCD_DATA 引脚模式设置, 上拉输入, 准备接收数据 */</span></span><br><span class="line">    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;</span><br><span class="line">    GPIO_InitStruct.Pull = GPIO_PULLUP;</span><br><span class="line">    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;</span><br><span class="line">    GPIO_InitStruct.Pin = D0_Pin;</span><br><span class="line">    HAL_GPIO_Init(D0_GPIO_Port, &amp;GPIO_InitStruct);</span><br><span class="line">    GPIO_InitStruct.Pin = D1_Pin;</span><br><span class="line">    HAL_GPIO_Init(D1_GPIO_Port, &amp;GPIO_InitStruct);</span><br><span class="line">    GPIO_InitStruct.Pin = D2_Pin;</span><br><span class="line">    HAL_GPIO_Init(D2_GPIO_Port, &amp;GPIO_InitStruct);;</span><br><span class="line">    GPIO_InitStruct.Pin = D3_Pin;</span><br><span class="line">    HAL_GPIO_Init(D3_GPIO_Port, &amp;GPIO_InitStruct);</span><br><span class="line">    GPIO_InitStruct.Pin = D4_Pin;</span><br><span class="line">    HAL_GPIO_Init(D4_GPIO_Port, &amp;GPIO_InitStruct);</span><br><span class="line">    GPIO_InitStruct.Pin = D5_Pin;</span><br><span class="line">    HAL_GPIO_Init(D5_GPIO_Port, &amp;GPIO_InitStruct);</span><br><span class="line">    GPIO_InitStruct.Pin = D6_Pin;</span><br><span class="line">    HAL_GPIO_Init(D6_GPIO_Port, &amp;GPIO_InitStruct);</span><br><span class="line">    GPIO_InitStruct.Pin = D7_Pin;</span><br><span class="line">    HAL_GPIO_Init(D7_GPIO_Port, &amp;GPIO_InitStruct);</span><br><span class="line">    GPIO_InitStruct.Pin = D8_Pin;</span><br><span class="line">    HAL_GPIO_Init(D8_GPIO_Port, &amp;GPIO_InitStruct);</span><br><span class="line">    GPIO_InitStruct.Pin = D9_Pin;</span><br><span class="line">    HAL_GPIO_Init(D9_GPIO_Port, &amp;GPIO_InitStruct);</span><br><span class="line">    GPIO_InitStruct.Pin = D10_Pin;</span><br><span class="line">    HAL_GPIO_Init(D10_GPIO_Port, &amp;GPIO_InitStruct);</span><br><span class="line">    GPIO_InitStruct.Pin = D11_Pin;</span><br><span class="line">    HAL_GPIO_Init(D11_GPIO_Port, &amp;GPIO_InitStruct);</span><br><span class="line">    GPIO_InitStruct.Pin = D12_Pin;</span><br><span class="line">    HAL_GPIO_Init(D12_GPIO_Port, &amp;GPIO_InitStruct);</span><br><span class="line">    GPIO_InitStruct.Pin = D13_Pin;</span><br><span class="line">    HAL_GPIO_Init(D13_GPIO_Port, &amp;GPIO_InitStruct);</span><br><span class="line">    GPIO_InitStruct.Pin = D14_Pin;</span><br><span class="line">    HAL_GPIO_Init(D14_GPIO_Port, &amp;GPIO_InitStruct);</span><br><span class="line">    GPIO_InitStruct.Pin = D15_Pin;</span><br><span class="line">    HAL_GPIO_Init(D15_GPIO_Port, &amp;GPIO_InitStruct);</span><br><span class="line"></span><br><span class="line">    LCD_RS(<span class="number">1</span>);              <span class="comment">/* RS=1,表示操作数据 */</span></span><br><span class="line">    LCD_CS(<span class="number">0</span>);</span><br><span class="line">    LCD_RD(<span class="number">0</span>);</span><br><span class="line">    lcd_opt_delay(<span class="number">2</span>);</span><br><span class="line">    ram = LCD_DATA_IN;      <span class="comment">/* 读取数据 */</span></span><br><span class="line">    LCD_RD(<span class="number">1</span>);</span><br><span class="line">    LCD_CS(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* LCD_DATA 引脚模式设置, 推挽输出, 恢复输出状态 */</span></span><br><span class="line">    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;</span><br><span class="line">    GPIO_InitStruct.Pull = GPIO_PULLUP;</span><br><span class="line">    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;</span><br><span class="line">    GPIO_InitStruct.Pin = D0_Pin;</span><br><span class="line">    HAL_GPIO_Init(D0_GPIO_Port, &amp;GPIO_InitStruct);</span><br><span class="line">    GPIO_InitStruct.Pin = D1_Pin;</span><br><span class="line">    HAL_GPIO_Init(D1_GPIO_Port, &amp;GPIO_InitStruct);</span><br><span class="line">    GPIO_InitStruct.Pin = D2_Pin;</span><br><span class="line">    HAL_GPIO_Init(D2_GPIO_Port, &amp;GPIO_InitStruct);</span><br><span class="line">    GPIO_InitStruct.Pin = D3_Pin;</span><br><span class="line">    HAL_GPIO_Init(D3_GPIO_Port, &amp;GPIO_InitStruct);</span><br><span class="line">    GPIO_InitStruct.Pin = D4_Pin;</span><br><span class="line">    HAL_GPIO_Init(D4_GPIO_Port, &amp;GPIO_InitStruct);</span><br><span class="line">    GPIO_InitStruct.Pin = D5_Pin;</span><br><span class="line">    HAL_GPIO_Init(D5_GPIO_Port, &amp;GPIO_InitStruct);</span><br><span class="line">    GPIO_InitStruct.Pin = D6_Pin;</span><br><span class="line">    HAL_GPIO_Init(D6_GPIO_Port, &amp;GPIO_InitStruct);</span><br><span class="line">    GPIO_InitStruct.Pin = D7_Pin;</span><br><span class="line">    HAL_GPIO_Init(D7_GPIO_Port, &amp;GPIO_InitStruct);</span><br><span class="line">    GPIO_InitStruct.Pin = D8_Pin;</span><br><span class="line">    HAL_GPIO_Init(D8_GPIO_Port, &amp;GPIO_InitStruct);</span><br><span class="line">    GPIO_InitStruct.Pin = D9_Pin;</span><br><span class="line">    HAL_GPIO_Init(D9_GPIO_Port, &amp;GPIO_InitStruct);</span><br><span class="line">    GPIO_InitStruct.Pin = D10_Pin;</span><br><span class="line">    HAL_GPIO_Init(D10_GPIO_Port, &amp;GPIO_InitStruct);</span><br><span class="line">    GPIO_InitStruct.Pin = D11_Pin;</span><br><span class="line">    HAL_GPIO_Init(D11_GPIO_Port, &amp;GPIO_InitStruct);</span><br><span class="line">    GPIO_InitStruct.Pin = D12_Pin;</span><br><span class="line">    HAL_GPIO_Init(D12_GPIO_Port, &amp;GPIO_InitStruct);</span><br><span class="line">    GPIO_InitStruct.Pin = D13_Pin;</span><br><span class="line">    HAL_GPIO_Init(D13_GPIO_Port, &amp;GPIO_InitStruct);</span><br><span class="line">    GPIO_InitStruct.Pin = D14_Pin;</span><br><span class="line">    HAL_GPIO_Init(D14_GPIO_Port, &amp;GPIO_InitStruct);</span><br><span class="line">    GPIO_InitStruct.Pin = D15_Pin;</span><br><span class="line">    HAL_GPIO_Init(D15_GPIO_Port, &amp;GPIO_InitStruct);</span><br><span class="line">    <span class="keyword">return</span> ram;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 准备写GRAM */</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">lcd_write_ram_prepare</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    _lcd_wr_regno(lcddev.wramcmd);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 准备读GRAM */</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">lcd_read_ram_prepare</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    _lcd_wr_regno(lcddev.rramcmd);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 设置坐标 */</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">lcd_set_cursor</span><span class="params">(<span class="type">uint16_t</span> x, <span class="type">uint16_t</span> y)</span></span><br><span class="line">&#123;</span><br><span class="line">    _lcd_wr_regno(lcddev.setxcmd);</span><br><span class="line">    _lcd_wr_data(x &gt;&gt; <span class="number">8</span>);</span><br><span class="line">    _lcd_wr_data(x &amp; <span class="number">0xFF</span>);</span><br><span class="line">    _lcd_wr_regno(lcddev.setycmd);</span><br><span class="line">    _lcd_wr_data(y &gt;&gt; <span class="number">8</span>);</span><br><span class="line">    _lcd_wr_data(y &amp; <span class="number">0xFF</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">lcd_draw_point</span><span class="params">(<span class="type">uint16_t</span> x, <span class="type">uint16_t</span> y, <span class="type">uint16_t</span> color)</span></span><br><span class="line">&#123;</span><br><span class="line">    lcd_set_cursor(x, y);</span><br><span class="line">    lcd_write_ram_prepare();</span><br><span class="line">    _lcd_wr_data(color);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">uint16_t</span> <span class="title function_">lcd_read_point</span><span class="params">(<span class="type">uint16_t</span> x, <span class="type">uint16_t</span> y)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">uint16_t</span> R = <span class="number">0</span>, G = <span class="number">0</span>, B = <span class="number">0</span>;</span><br><span class="line">    lcd_set_cursor(x, y);</span><br><span class="line">    lcd_read_ram_prepare();</span><br><span class="line">   <span class="comment">// _lcd_wr_regno(0x2E);</span></span><br><span class="line">    R = lcd_rd_data();  <span class="comment">//dummy</span></span><br><span class="line">    R = lcd_rd_data();</span><br><span class="line">    B = lcd_rd_data();</span><br><span class="line">    G = R &amp; <span class="number">0xFF</span>;</span><br><span class="line">    <span class="keyword">return</span> (((R &gt;&gt; <span class="number">11</span>) &lt;&lt; <span class="number">11</span>) | ((G &gt;&gt; <span class="number">2</span>) &lt;&lt; <span class="number">5</span>) | (B &gt;&gt; <span class="number">11</span>));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">lcd_init</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    GPIO_InitTypeDef GPIO_InitStruct = &#123;<span class="number">0</span>&#125;;</span><br><span class="line">    GPIO_CLK_Enable();</span><br><span class="line">    LCD_BL_GPIO_CLK_ENABLE();</span><br><span class="line">    LCD_CS_GPIO_CLK_ENABLE();</span><br><span class="line">    LCD_WR_GPIO_CLK_ENABLE();</span><br><span class="line">    LCD_RD_GPIO_CLK_ENABLE();</span><br><span class="line">    LCD_RS_GPIO_CLK_ENABLE();</span><br><span class="line"></span><br><span class="line">    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;</span><br><span class="line">    GPIO_InitStruct.Pull = GPIO_NOPULL;</span><br><span class="line">    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;</span><br><span class="line"></span><br><span class="line">    GPIO_InitStruct.Pin = D0_Pin;</span><br><span class="line">    HAL_GPIO_Init(D0_GPIO_Port, &amp;GPIO_InitStruct);</span><br><span class="line">    GPIO_InitStruct.Pin = D1_Pin;</span><br><span class="line">    HAL_GPIO_Init(D1_GPIO_Port, &amp;GPIO_InitStruct);</span><br><span class="line">    GPIO_InitStruct.Pin = D2_Pin;</span><br><span class="line">    HAL_GPIO_Init(D2_GPIO_Port, &amp;GPIO_InitStruct);</span><br><span class="line">    GPIO_InitStruct.Pin = D3_Pin;</span><br><span class="line">    HAL_GPIO_Init(D3_GPIO_Port, &amp;GPIO_InitStruct);</span><br><span class="line">    GPIO_InitStruct.Pin = D4_Pin;</span><br><span class="line">    HAL_GPIO_Init(D4_GPIO_Port, &amp;GPIO_InitStruct);</span><br><span class="line">    GPIO_InitStruct.Pin = D5_Pin;</span><br><span class="line">    HAL_GPIO_Init(D5_GPIO_Port, &amp;GPIO_InitStruct);</span><br><span class="line">    GPIO_InitStruct.Pin = D6_Pin;</span><br><span class="line">    HAL_GPIO_Init(D6_GPIO_Port, &amp;GPIO_InitStruct);</span><br><span class="line">    GPIO_InitStruct.Pin = D7_Pin;</span><br><span class="line">    HAL_GPIO_Init(D7_GPIO_Port, &amp;GPIO_InitStruct);</span><br><span class="line">    GPIO_InitStruct.Pin = D8_Pin;</span><br><span class="line">    HAL_GPIO_Init(D8_GPIO_Port, &amp;GPIO_InitStruct);</span><br><span class="line">    GPIO_InitStruct.Pin = D9_Pin;</span><br><span class="line">    HAL_GPIO_Init(D9_GPIO_Port, &amp;GPIO_InitStruct);</span><br><span class="line">    GPIO_InitStruct.Pin = D10_Pin;</span><br><span class="line">    HAL_GPIO_Init(D10_GPIO_Port, &amp;GPIO_InitStruct);</span><br><span class="line">    GPIO_InitStruct.Pin = D11_Pin;</span><br><span class="line">    HAL_GPIO_Init(D11_GPIO_Port, &amp;GPIO_InitStruct);</span><br><span class="line">    GPIO_InitStruct.Pin = D12_Pin;</span><br><span class="line">    HAL_GPIO_Init(D12_GPIO_Port, &amp;GPIO_InitStruct);</span><br><span class="line">    GPIO_InitStruct.Pin = D13_Pin;</span><br><span class="line">    HAL_GPIO_Init(D13_GPIO_Port, &amp;GPIO_InitStruct);</span><br><span class="line">    GPIO_InitStruct.Pin = D14_Pin;</span><br><span class="line">    HAL_GPIO_Init(D14_GPIO_Port, &amp;GPIO_InitStruct);</span><br><span class="line">    GPIO_InitStruct.Pin = D15_Pin;</span><br><span class="line">    HAL_GPIO_Init(D15_GPIO_Port, &amp;GPIO_InitStruct);</span><br><span class="line"></span><br><span class="line">    GPIO_InitStruct.Pin = LCD_BL_GPIO_PIN;</span><br><span class="line">    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;</span><br><span class="line">    GPIO_InitStruct.Pull = GPIO_PULLUP;</span><br><span class="line">    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;</span><br><span class="line">    HAL_GPIO_Init(LCD_BL_GPIO_PORT, &amp;GPIO_InitStruct);</span><br><span class="line"></span><br><span class="line">    GPIO_InitStruct.Pin = LCD_CS_GPIO_PIN;</span><br><span class="line">    HAL_GPIO_Init(LCD_CS_GPIO_PORT, &amp;GPIO_InitStruct);</span><br><span class="line"></span><br><span class="line">    GPIO_InitStruct.Pin = LCD_WR_GPIO_PIN;</span><br><span class="line">    HAL_GPIO_Init(LCD_WR_GPIO_PORT, &amp;GPIO_InitStruct);</span><br><span class="line"></span><br><span class="line">    GPIO_InitStruct.Pin = LCD_RD_GPIO_PIN;</span><br><span class="line">    HAL_GPIO_Init(LCD_RD_GPIO_PORT, &amp;GPIO_InitStruct);</span><br><span class="line"></span><br><span class="line">    GPIO_InitStruct.Pin = LCD_RS_GPIO_PIN;</span><br><span class="line">    HAL_GPIO_Init(LCD_RS_GPIO_PORT, &amp;GPIO_InitStruct);</span><br><span class="line"></span><br><span class="line">    LCD_WR(<span class="number">1</span>);                  <span class="comment">/* WR 默认拉高 */</span></span><br><span class="line">    LCD_RD(<span class="number">1</span>);                  <span class="comment">/* RD 默认拉高 */</span></span><br><span class="line">    LCD_CS(<span class="number">1</span>);                  <span class="comment">/* CS 默认拉高 */</span></span><br><span class="line">    LCD_RS(<span class="number">1</span>);                  <span class="comment">/* RS 默认拉高 */</span></span><br><span class="line">    LCD_DATA_OUT(<span class="number">0xffff</span>);       <span class="comment">/* D0-15 默认拉高 */</span></span><br><span class="line"></span><br><span class="line">    _lcd_wr_regno(<span class="number">0xD3</span>);</span><br><span class="line">    lcddev.id = lcd_rd_data();  <span class="comment">/* dummy */</span></span><br><span class="line">    lcddev.id = lcd_rd_data();  <span class="comment">/* 00 */</span></span><br><span class="line">    lcddev.id = lcd_rd_data();  <span class="comment">/* 93 */</span></span><br><span class="line">    lcddev.id &lt;&lt;= <span class="number">8</span>;</span><br><span class="line">    lcddev.id |= lcd_rd_data();  <span class="comment">/* 41 */</span></span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;id:%#x \r\n&quot;</span>, lcddev.id);</span><br><span class="line">    <span class="comment">/* 完成初始化数组序列 */</span></span><br><span class="line">    <span class="keyword">if</span> (lcddev.id == <span class="number">0x9341</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        _lcd_ex_ili9341_reginit();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">        _lcd_ex_st7789_reginit();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 初始化LCD结构体 */</span></span><br><span class="line">    lcddev.width = <span class="number">240</span>;</span><br><span class="line">    lcddev.height = <span class="number">320</span>;</span><br><span class="line">    lcddev.setxcmd = <span class="number">0x2A</span>;</span><br><span class="line">    lcddev.setycmd = <span class="number">0x2B</span>;</span><br><span class="line">    lcddev.wramcmd = <span class="number">0x2C</span>;</span><br><span class="line">    lcddev.rramcmd = <span class="number">0x2E</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 设置终末位置 */</span></span><br><span class="line">    _lcd_wr_regno(lcddev.setxcmd);</span><br><span class="line">    _lcd_wr_data(<span class="number">0</span>);</span><br><span class="line">    _lcd_wr_data(<span class="number">0</span>);</span><br><span class="line">    _lcd_wr_data((lcddev.width - <span class="number">1</span>) &gt;&gt; <span class="number">8</span>);</span><br><span class="line">    _lcd_wr_data((lcddev.width - <span class="number">1</span>) &amp; <span class="number">0XFF</span>);</span><br><span class="line">    _lcd_wr_regno(lcddev.setycmd);</span><br><span class="line">    _lcd_wr_data(<span class="number">0</span>);</span><br><span class="line">    _lcd_wr_data(<span class="number">0</span>);</span><br><span class="line">    _lcd_wr_data((lcddev.height - <span class="number">1</span>) &gt;&gt; <span class="number">8</span>);</span><br><span class="line">    _lcd_wr_data((lcddev.height - <span class="number">1</span>) &amp; <span class="number">0XFF</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 设置扫描方向 */</span></span><br><span class="line">    lcd_write_reg(<span class="number">0x36</span>, <span class="number">1</span> &lt;&lt; <span class="number">3</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 点亮背光 */</span></span><br><span class="line">    LCD_BL(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">    lcd_clear();</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> _lcd_clear(f_args in)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">uint16_t</span> color = in.color?in.color:g_back_color;</span><br><span class="line">    <span class="type">uint32_t</span> index = <span class="number">0</span>;</span><br><span class="line">    <span class="type">uint32_t</span> totalpoint = lcddev.width;</span><br><span class="line"></span><br><span class="line">    totalpoint *= lcddev.height;                <span class="comment">/* 得到总点数 */</span></span><br><span class="line">    lcd_set_cursor(<span class="number">0</span>, <span class="number">0</span>);                   <span class="comment">/* 设置光标位置 */</span></span><br><span class="line">    lcd_write_ram_prepare();                    <span class="comment">/* 开始写入GRAM */</span></span><br><span class="line"></span><br><span class="line">    LCD_RS(<span class="number">1</span>);                               <span class="comment">/* RS=1,表示写数据 */</span></span><br><span class="line">    LCD_CS(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (index = <span class="number">0</span>; index &lt; totalpoint; index++)</span><br><span class="line">    &#123;</span><br><span class="line">        LCD_DATA_OUT(color);                <span class="comment">/* 写入要写的数据 */</span></span><br><span class="line">        LCD_WR(<span class="number">0</span>);</span><br><span class="line">        LCD_WR(<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    LCD_CS(<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> _lcd_show_char(<span class="type">uint16_t</span> x, <span class="type">uint16_t</span> y, <span class="type">char</span> chr, f_args in)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">/* 设置默认参数 */</span></span><br><span class="line">    <span class="type">uint8_t</span> size = in.size ? in.size : LCD_FONTSIZE_1608;</span><br><span class="line">    <span class="type">uint8_t</span> mode = in.mode ? in.mode : <span class="number">1</span>;</span><br><span class="line">    <span class="type">uint16_t</span> color = in.color ? in.color : g_point_color;</span><br><span class="line"></span><br><span class="line">    <span class="type">uint8_t</span> *pfont = <span class="literal">NULL</span>;</span><br><span class="line">    <span class="type">uint8_t</span> chr_cnt = (size/<span class="number">8</span>+((size%<span class="number">8</span>)?<span class="number">1</span>:<span class="number">0</span>))*(size/<span class="number">2</span>) ;  <span class="comment">/* 总字节数 */</span></span><br><span class="line">    <span class="type">uint16_t</span> y0 = y;</span><br><span class="line">    chr = chr - <span class="string">&#x27; &#x27;</span>;    <span class="comment">//字库是从&#x27; &#x27;开始存的</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">switch</span>(size)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">case</span> LCD_FONTSIZE_1206:</span><br><span class="line">            pfont = (<span class="type">uint8_t</span> *)asc2_1206[chr];  <span class="comment">/* 调用1206字体 */</span></span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">case</span> LCD_FONTSIZE_1608:</span><br><span class="line">            pfont = (<span class="type">uint8_t</span> *)asc2_1608[chr];  <span class="comment">/* 调用1608字体 */</span></span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">case</span> LCD_FONTSIZE_2412:</span><br><span class="line">            pfont = (<span class="type">uint8_t</span> *)asc2_2412[chr];  <span class="comment">/* 调用2412字体 */</span></span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">case</span> LCD_FONTSIZE_3216:</span><br><span class="line">            pfont = (<span class="type">uint8_t</span> *)asc2_3216[chr];  <span class="comment">/* 调用3216字体 */</span></span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">default</span>:</span><br><span class="line">            <span class="keyword">return</span> ;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">uint8_t</span> t = <span class="number">0</span>; t &lt; chr_cnt; t++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">uint8_t</span> temp = pfont[t];</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">uint8_t</span> t1 = <span class="number">0</span>; t1 &lt; <span class="number">8</span>; t1++)   <span class="comment">//处理8位数据</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(temp &amp; <span class="number">0x80</span>)&#123;                <span class="comment">//首位有效</span></span><br><span class="line">                lcd_draw_point(x, y , color);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(mode == <span class="number">0</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                lcd_draw_point(x, y , g_back_color);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            temp &lt;&lt;= <span class="number">1</span>;</span><br><span class="line">            y++;</span><br><span class="line">            <span class="keyword">if</span>((y - y0) == size)</span><br><span class="line">            &#123;</span><br><span class="line">                y = y0;</span><br><span class="line">                x++;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>lcd_ex.c (用于存放厂家推荐设置配置的初始化命令)</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;lcd.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @brief       ST7789 寄存器初始化代码</span></span><br><span class="line"><span class="comment"> * @param       无</span></span><br><span class="line"><span class="comment"> * @retval      无</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="type">void</span> _lcd_ex_st7789_reginit(<span class="type">void</span>)</span><br><span class="line">&#123;</span><br><span class="line">    _lcd_wr_regno(<span class="number">0x11</span>);</span><br><span class="line"></span><br><span class="line">    delay_ms(<span class="number">120</span>);</span><br><span class="line"></span><br><span class="line">    _lcd_wr_regno(<span class="number">0x36</span>);</span><br><span class="line">    _lcd_wr_data(<span class="number">0x00</span>);</span><br><span class="line"></span><br><span class="line">    _lcd_wr_regno(<span class="number">0x3A</span>);</span><br><span class="line">    _lcd_wr_data(<span class="number">0X05</span>);</span><br><span class="line"></span><br><span class="line">    _lcd_wr_regno(<span class="number">0xB2</span>);</span><br><span class="line">    _lcd_wr_data(<span class="number">0x0C</span>);</span><br><span class="line">    _lcd_wr_data(<span class="number">0x0C</span>);</span><br><span class="line">    _lcd_wr_data(<span class="number">0x00</span>);</span><br><span class="line">    _lcd_wr_data(<span class="number">0x33</span>);</span><br><span class="line">    _lcd_wr_data(<span class="number">0x33</span>);</span><br><span class="line"></span><br><span class="line">    _lcd_wr_regno(<span class="number">0xB7</span>);</span><br><span class="line">    _lcd_wr_data(<span class="number">0x35</span>);</span><br><span class="line"></span><br><span class="line">    _lcd_wr_regno(<span class="number">0xBB</span>); <span class="comment">/* vcom */</span></span><br><span class="line">    _lcd_wr_data(<span class="number">0x32</span>);  <span class="comment">/* 30 */</span></span><br><span class="line"></span><br><span class="line">    _lcd_wr_regno(<span class="number">0xC0</span>);</span><br><span class="line">    _lcd_wr_data(<span class="number">0x0C</span>);</span><br><span class="line"></span><br><span class="line">    _lcd_wr_regno(<span class="number">0xC2</span>);</span><br><span class="line">    _lcd_wr_data(<span class="number">0x01</span>);</span><br><span class="line"></span><br><span class="line">    _lcd_wr_regno(<span class="number">0xC3</span>); <span class="comment">/* vrh */</span></span><br><span class="line">    _lcd_wr_data(<span class="number">0x10</span>);  <span class="comment">/* 17 0D */</span></span><br><span class="line"></span><br><span class="line">    _lcd_wr_regno(<span class="number">0xC4</span>); <span class="comment">/* vdv */</span></span><br><span class="line">    _lcd_wr_data(<span class="number">0x20</span>);  <span class="comment">/* 20 */</span></span><br><span class="line"></span><br><span class="line">    _lcd_wr_regno(<span class="number">0xC6</span>);</span><br><span class="line">    _lcd_wr_data(<span class="number">0x0f</span>);</span><br><span class="line"></span><br><span class="line">    _lcd_wr_regno(<span class="number">0xD0</span>);</span><br><span class="line">    _lcd_wr_data(<span class="number">0xA4</span>);</span><br><span class="line">    _lcd_wr_data(<span class="number">0xA1</span>);</span><br><span class="line"></span><br><span class="line">    _lcd_wr_regno(<span class="number">0xE0</span>); <span class="comment">/* Set Gamma  */</span></span><br><span class="line">    _lcd_wr_data(<span class="number">0xd0</span>);</span><br><span class="line">    _lcd_wr_data(<span class="number">0x00</span>);</span><br><span class="line">    _lcd_wr_data(<span class="number">0x02</span>);</span><br><span class="line">    _lcd_wr_data(<span class="number">0x07</span>);</span><br><span class="line">    _lcd_wr_data(<span class="number">0x0a</span>);</span><br><span class="line">    _lcd_wr_data(<span class="number">0x28</span>);</span><br><span class="line">    _lcd_wr_data(<span class="number">0x32</span>);</span><br><span class="line">    _lcd_wr_data(<span class="number">0X44</span>);</span><br><span class="line">    _lcd_wr_data(<span class="number">0x42</span>);</span><br><span class="line">    _lcd_wr_data(<span class="number">0x06</span>);</span><br><span class="line">    _lcd_wr_data(<span class="number">0x0e</span>);</span><br><span class="line">    _lcd_wr_data(<span class="number">0x12</span>);</span><br><span class="line">    _lcd_wr_data(<span class="number">0x14</span>);</span><br><span class="line">    _lcd_wr_data(<span class="number">0x17</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    _lcd_wr_regno(<span class="number">0XE1</span>);  <span class="comment">/* Set Gamma */</span></span><br><span class="line">    _lcd_wr_data(<span class="number">0xd0</span>);</span><br><span class="line">    _lcd_wr_data(<span class="number">0x00</span>);</span><br><span class="line">    _lcd_wr_data(<span class="number">0x02</span>);</span><br><span class="line">    _lcd_wr_data(<span class="number">0x07</span>);</span><br><span class="line">    _lcd_wr_data(<span class="number">0x0a</span>);</span><br><span class="line">    _lcd_wr_data(<span class="number">0x28</span>);</span><br><span class="line">    _lcd_wr_data(<span class="number">0x31</span>);</span><br><span class="line">    _lcd_wr_data(<span class="number">0x54</span>);</span><br><span class="line">    _lcd_wr_data(<span class="number">0x47</span>);</span><br><span class="line">    _lcd_wr_data(<span class="number">0x0e</span>);</span><br><span class="line">    _lcd_wr_data(<span class="number">0x1c</span>);</span><br><span class="line">    _lcd_wr_data(<span class="number">0x17</span>);</span><br><span class="line">    _lcd_wr_data(<span class="number">0x1b</span>);</span><br><span class="line">    _lcd_wr_data(<span class="number">0x1e</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    _lcd_wr_regno(<span class="number">0x2A</span>);</span><br><span class="line">    _lcd_wr_data(<span class="number">0x00</span>);</span><br><span class="line">    _lcd_wr_data(<span class="number">0x00</span>);</span><br><span class="line">    _lcd_wr_data(<span class="number">0x00</span>);</span><br><span class="line">    _lcd_wr_data(<span class="number">0xef</span>);</span><br><span class="line"></span><br><span class="line">    _lcd_wr_regno(<span class="number">0x2B</span>);</span><br><span class="line">    _lcd_wr_data(<span class="number">0x00</span>);</span><br><span class="line">    _lcd_wr_data(<span class="number">0x00</span>);</span><br><span class="line">    _lcd_wr_data(<span class="number">0x01</span>);</span><br><span class="line">    _lcd_wr_data(<span class="number">0x3f</span>);</span><br><span class="line"></span><br><span class="line">    _lcd_wr_regno(<span class="number">0x29</span>); <span class="comment">/* display on */</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @brief       ILI9341寄存器初始化代码</span></span><br><span class="line"><span class="comment"> * @param       无</span></span><br><span class="line"><span class="comment"> * @retval      无</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="type">void</span> _lcd_ex_ili9341_reginit(<span class="type">void</span>)</span><br><span class="line">&#123;</span><br><span class="line">    _lcd_wr_regno(<span class="number">0xCF</span>);</span><br><span class="line">    _lcd_wr_data(<span class="number">0x00</span>);</span><br><span class="line">    _lcd_wr_data(<span class="number">0xC1</span>);</span><br><span class="line">    _lcd_wr_data(<span class="number">0X30</span>);</span><br><span class="line">    _lcd_wr_regno(<span class="number">0xED</span>);</span><br><span class="line">    _lcd_wr_data(<span class="number">0x64</span>);</span><br><span class="line">    _lcd_wr_data(<span class="number">0x03</span>);</span><br><span class="line">    _lcd_wr_data(<span class="number">0X12</span>);</span><br><span class="line">    _lcd_wr_data(<span class="number">0X81</span>);</span><br><span class="line">    _lcd_wr_regno(<span class="number">0xE8</span>);</span><br><span class="line">    _lcd_wr_data(<span class="number">0x85</span>);</span><br><span class="line">    _lcd_wr_data(<span class="number">0x10</span>);</span><br><span class="line">    _lcd_wr_data(<span class="number">0x7A</span>);</span><br><span class="line">    _lcd_wr_regno(<span class="number">0xCB</span>);</span><br><span class="line">    _lcd_wr_data(<span class="number">0x39</span>);</span><br><span class="line">    _lcd_wr_data(<span class="number">0x2C</span>);</span><br><span class="line">    _lcd_wr_data(<span class="number">0x00</span>);</span><br><span class="line">    _lcd_wr_data(<span class="number">0x34</span>);</span><br><span class="line">    _lcd_wr_data(<span class="number">0x02</span>);</span><br><span class="line">    _lcd_wr_regno(<span class="number">0xF7</span>);</span><br><span class="line">    _lcd_wr_data(<span class="number">0x20</span>);</span><br><span class="line">    _lcd_wr_regno(<span class="number">0xEA</span>);</span><br><span class="line">    _lcd_wr_data(<span class="number">0x00</span>);</span><br><span class="line">    _lcd_wr_data(<span class="number">0x00</span>);</span><br><span class="line">    _lcd_wr_regno(<span class="number">0xC0</span>); <span class="comment">/* Power control */</span></span><br><span class="line">    _lcd_wr_data(<span class="number">0x1B</span>);  <span class="comment">/* VRH[5:0] */</span></span><br><span class="line">    _lcd_wr_regno(<span class="number">0xC1</span>); <span class="comment">/* Power control */</span></span><br><span class="line">    _lcd_wr_data(<span class="number">0x01</span>);  <span class="comment">/* SAP[2:0];BT[3:0] */</span></span><br><span class="line">    _lcd_wr_regno(<span class="number">0xC5</span>); <span class="comment">/* VCM control */</span></span><br><span class="line">    _lcd_wr_data(<span class="number">0x30</span>);  <span class="comment">/* 3F */</span></span><br><span class="line">    _lcd_wr_data(<span class="number">0x30</span>);  <span class="comment">/* 3C */</span></span><br><span class="line">    _lcd_wr_regno(<span class="number">0xC7</span>); <span class="comment">/* VCM control2 */</span></span><br><span class="line">    _lcd_wr_data(<span class="number">0XB7</span>);</span><br><span class="line">    _lcd_wr_regno(<span class="number">0x36</span>); <span class="comment">/*  Memory Access Control */</span></span><br><span class="line">    _lcd_wr_data(<span class="number">0x48</span>);</span><br><span class="line">    _lcd_wr_regno(<span class="number">0x3A</span>);</span><br><span class="line">    _lcd_wr_data(<span class="number">0x55</span>);</span><br><span class="line">    _lcd_wr_regno(<span class="number">0xB1</span>);</span><br><span class="line">    _lcd_wr_data(<span class="number">0x00</span>);</span><br><span class="line">    _lcd_wr_data(<span class="number">0x1A</span>);</span><br><span class="line">    _lcd_wr_regno(<span class="number">0xB6</span>); <span class="comment">/*  Display Function Control */</span></span><br><span class="line">    _lcd_wr_data(<span class="number">0x0A</span>);</span><br><span class="line">    _lcd_wr_data(<span class="number">0xA2</span>);</span><br><span class="line">    _lcd_wr_regno(<span class="number">0xF2</span>); <span class="comment">/*  3Gamma Function Disable */</span></span><br><span class="line">    _lcd_wr_data(<span class="number">0x00</span>);</span><br><span class="line">    _lcd_wr_regno(<span class="number">0x26</span>); <span class="comment">/* Gamma curve selected */</span></span><br><span class="line">    _lcd_wr_data(<span class="number">0x01</span>);</span><br><span class="line">    _lcd_wr_regno(<span class="number">0xE0</span>); <span class="comment">/* Set Gamma */</span></span><br><span class="line">    _lcd_wr_data(<span class="number">0x0F</span>);</span><br><span class="line">    _lcd_wr_data(<span class="number">0x2A</span>);</span><br><span class="line">    _lcd_wr_data(<span class="number">0x28</span>);</span><br><span class="line">    _lcd_wr_data(<span class="number">0x08</span>);</span><br><span class="line">    _lcd_wr_data(<span class="number">0x0E</span>);</span><br><span class="line">    _lcd_wr_data(<span class="number">0x08</span>);</span><br><span class="line">    _lcd_wr_data(<span class="number">0x54</span>);</span><br><span class="line">    _lcd_wr_data(<span class="number">0XA9</span>);</span><br><span class="line">    _lcd_wr_data(<span class="number">0x43</span>);</span><br><span class="line">    _lcd_wr_data(<span class="number">0x0A</span>);</span><br><span class="line">    _lcd_wr_data(<span class="number">0x0F</span>);</span><br><span class="line">    _lcd_wr_data(<span class="number">0x00</span>);</span><br><span class="line">    _lcd_wr_data(<span class="number">0x00</span>);</span><br><span class="line">    _lcd_wr_data(<span class="number">0x00</span>);</span><br><span class="line">    _lcd_wr_data(<span class="number">0x00</span>);</span><br><span class="line">    _lcd_wr_regno(<span class="number">0XE1</span>);    <span class="comment">/* Set Gamma */</span></span><br><span class="line">    _lcd_wr_data(<span class="number">0x00</span>);</span><br><span class="line">    _lcd_wr_data(<span class="number">0x15</span>);</span><br><span class="line">    _lcd_wr_data(<span class="number">0x17</span>);</span><br><span class="line">    _lcd_wr_data(<span class="number">0x07</span>);</span><br><span class="line">    _lcd_wr_data(<span class="number">0x11</span>);</span><br><span class="line">    _lcd_wr_data(<span class="number">0x06</span>);</span><br><span class="line">    _lcd_wr_data(<span class="number">0x2B</span>);</span><br><span class="line">    _lcd_wr_data(<span class="number">0x56</span>);</span><br><span class="line">    _lcd_wr_data(<span class="number">0x3C</span>);</span><br><span class="line">    _lcd_wr_data(<span class="number">0x05</span>);</span><br><span class="line">    _lcd_wr_data(<span class="number">0x10</span>);</span><br><span class="line">    _lcd_wr_data(<span class="number">0x0F</span>);</span><br><span class="line">    _lcd_wr_data(<span class="number">0x3F</span>);</span><br><span class="line">    _lcd_wr_data(<span class="number">0x3F</span>);</span><br><span class="line">    _lcd_wr_data(<span class="number">0x0F</span>);</span><br><span class="line">    _lcd_wr_regno(<span class="number">0x2B</span>);</span><br><span class="line">    _lcd_wr_data(<span class="number">0x00</span>);</span><br><span class="line">    _lcd_wr_data(<span class="number">0x00</span>);</span><br><span class="line">    _lcd_wr_data(<span class="number">0x01</span>);</span><br><span class="line">    _lcd_wr_data(<span class="number">0x3f</span>);</span><br><span class="line">    _lcd_wr_regno(<span class="number">0x2A</span>);</span><br><span class="line">    _lcd_wr_data(<span class="number">0x00</span>);</span><br><span class="line">    _lcd_wr_data(<span class="number">0x00</span>);</span><br><span class="line">    _lcd_wr_data(<span class="number">0x00</span>);</span><br><span class="line">    _lcd_wr_data(<span class="number">0xef</span>);</span><br><span class="line">    _lcd_wr_regno(<span class="number">0x11</span>); <span class="comment">/* Exit Sleep */</span></span><br><span class="line">    delay_ms(<span class="number">120</span>);</span><br><span class="line">    _lcd_wr_regno(<span class="number">0x29</span>); <span class="comment">/* display on */</span></span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><p>最后还有字库(和<a href="https://blog.csdn.net/DreamTrue520/article/details/128643297">第六期OLED实验</a>类似，这里碍于篇幅问题放不出来)</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">ifndef</span> __LCDFONT_H</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __LCDFONT_H</span></span><br><span class="line"><span class="comment">/* 12*12 ASCII字符集点阵 */</span></span><br><span class="line"><span class="type">const</span> <span class="type">unsigned</span> <span class="type">char</span> asc2_1206[<span class="number">95</span>][<span class="number">12</span>]=&#123;</span><br><span class="line">&#123;<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>&#125;,<span class="comment">/*&quot; &quot;,0*/</span></span><br><span class="line">...<span class="comment">//省略代码</span></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br></pre></td></tr></table></figure><h2 id="9-4-用fsmc爆改8080时序">9.4 用FSMC爆改8080时序</h2><p>不过，刚刚我们编写的LCD驱动还是太过暴力，这么多引脚，执行起来也有很多语句，相应执行效率也不算太高，那有没有可以统一管理这些多引脚的方法的办法呢？<br>有，FSMC。<br>FSMC是沟通CPU与外部存储器之间的桥梁。用于驱动SRAM，NOR FLASH，NAND FLASH及PC卡类型的存储器。<br>配置好FSMC，定义一个指向这些地址的指针，通过对指针操作就可以直接修改存储单元的内容，FSMC自动完成读写命令和数据访问操作，不需要程序去实现时序，<strong>FSMC外设配置好就可以模拟出时序</strong>。<br>LCD类似于SRAM的存储，8080时序也类似FSMC的A模式时序。<br>这是FSMC的引脚：<br><img src="https://img-blog.csdnimg.cn/907bc907cfcc4ce9ab5a30b2f092b14d.png" alt=""><br>红色框起来的，确实能为我们所用。<br>于是<br><img src="https://img-blog.csdnimg.cn/d9cd56f0b03746af8b7922e0f271027d.png" alt=""><br>就可以变成<br><img src="https://img-blog.csdnimg.cn/27a1188bad194265a725dbe6625e4ab9.png" alt=""><br>接着选模式：<br><img src="https://img-blog.csdnimg.cn/dee01bae43384018a859e79c0d4aefaf.png" alt=""><br>访问模式上选A模式<br>因为我们OE读时序需要翻转，且LCD使用的是类似异步、地址与数据线独立的SRAM控制方式，故选A模式。</p><p>那RS怎么办?单独给它个引脚来软件控制吗？<br>No，no，no，太麻烦了，虽然LCD没有地址引脚，但是我们可以利用FSMC地址线的这个概念来控制RS引脚——把RS接到Ax地址线上去。<br>RS引脚接在地址线Ax上去了呀，我们怎么控制它呢？<br>使用FSMC外接存储器，其存储单元是映射到STM32的内部寻址空间的。<br>从FSMC角度看，可以把外部存储器划分为固定大小为256M字节的四个存储块。<br>FSMC存储块1被分为4个区，每个区管理64M字节空间：<br><img src="https://img-blog.csdnimg.cn/4a5a63d06d9648d2b9d91639f360fd7b.png" alt=""><br>我们访问FSMC地址，就能使对应地址线置位(地址线对应高低电平等于我们访问的地址)，不得不说，FSMC真的好智能。<br>而当FSMC_A10为高电平时（即RS为高电平），FSMC_D[15:0]被理解为数据。<br>当FSMC_A10为低电平时（即RS为低电平），FSMC_D[15:0]被理解为命令。<br>于是，我们就可以靠访问不同的地址达到传输数据和命令的效果。<br>比如，我们选择第一块的区域4作为我们的LCD<br>于是NE4的基地址就是</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">公式：<span class="number">0x6000</span> <span class="number">0000</span> + (<span class="number">0x400</span> <span class="number">0000</span> * (x - <span class="number">1</span>))</span><br><span class="line">当x=<span class="number">4</span>时，NE4=<span class="number">0x6C000000</span></span><br></pre></td></tr></table></figure><p>A10作为RS引脚：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">公式：FSMC_Ay(y=<span class="number">0</span>…<span class="number">25</span>)： <span class="number">2</span>^y * <span class="number">2</span> </span><br><span class="line">当y=<span class="number">10</span>时，A10= <span class="number">2</span>^<span class="number">10</span>*<span class="number">2</span>=<span class="number">0x800</span></span><br></pre></td></tr></table></figure><p>所得：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">代表LCD命令的地址：<span class="number">0x6C00</span> <span class="number">0000</span></span><br><span class="line">代表LCD数据的地址：<span class="number">0x6C00</span> <span class="number">0800</span></span><br></pre></td></tr></table></figure><p>详情也可以参考：<br><a href="https://blog.csdn.net/BachelorTse/article/details/107941559">STM32 ----小谈FSMC RS选择</a></p><h2 id="9-5-新版lcd驱动">9.5 新版LCD驱动</h2><p>原理了于心，码字如神助。<br>直接附上代码：<br>lcd.h</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// Created by Whisky on 2023/1/7.</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">ifndef</span> HELLOWORLD_LCD_H</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> HELLOWORLD_LCD_H</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;main.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* 写引脚 */</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> LCD_WR_GPIO_PORT                    GPIOD</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> LCD_WR_GPIO_PIN                     GPIO_PIN_5</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> LCD_WR_GPIO_CLK_ENABLE()            do&#123; __HAL_RCC_GPIOD_CLK_ENABLE(); &#125;while(0)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* 读引脚 */</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> LCD_RD_GPIO_PORT                    GPIOD</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> LCD_RD_GPIO_PIN                     GPIO_PIN_4</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> LCD_RD_GPIO_CLK_ENABLE()            do&#123; __HAL_RCC_GPIOD_CLK_ENABLE(); &#125;while(0)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* LCD_BL背光引脚 */</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> LCD_BL_GPIO_PORT                    GPIOB</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> LCD_BL_GPIO_PIN                     GPIO_PIN_0</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> LCD_BL_GPIO_CLK_ENABLE()            do&#123; __HAL_RCC_GPIOB_CLK_ENABLE(); &#125;while(0)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*  LCD_CS(需要根据LCD_FSMC_NEX设置正确的IO口) 和 LCD_RS(需要根据LCD_FSMC_AX设置正确的IO口) 引脚 定义 */</span></span><br><span class="line"><span class="comment">/* CS片选引脚 */</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> LCD_CS_GPIO_PORT                    GPIOG</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> LCD_CS_GPIO_PIN                     GPIO_PIN_12</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> LCD_CS_GPIO_CLK_ENABLE()            do&#123; __HAL_RCC_GPIOG_CLK_ENABLE(); &#125;while(0)     <span class="comment">/* PG口时钟使能 */</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* RS数据类型引脚 */</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> LCD_RS_GPIO_PORT                    GPIOG</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> LCD_RS_GPIO_PIN                     GPIO_PIN_0</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> LCD_RS_GPIO_CLK_ENABLE()            do&#123; __HAL_RCC_GPIOG_CLK_ENABLE(); &#125;while(0)     <span class="comment">/* PG口时钟使能 */</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> GPIO_CLK_Enable() &#123;__HAL_RCC_GPIOE_CLK_ENABLE();__HAL_RCC_GPIOD_CLK_ENABLE();__HAL_RCC_GPIOG_CLK_ENABLE();&#125;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/* LCD重要参数集 */</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="type">uint16_t</span> width;</span><br><span class="line">    <span class="type">uint16_t</span> height;</span><br><span class="line">    <span class="type">uint16_t</span> id;</span><br><span class="line">    <span class="type">uint8_t</span> dir;        <span class="comment">/* 方向   0-竖屏 1-横屏*/</span></span><br><span class="line">    <span class="type">uint16_t</span> wramcmd;   <span class="comment">/* gram指令 w */</span></span><br><span class="line">    <span class="type">uint16_t</span> rramcmd;   <span class="comment">/* gram指令 r */</span></span><br><span class="line">    <span class="type">uint16_t</span> setxcmd;   <span class="comment">/* 设置x坐标 */</span></span><br><span class="line">    <span class="type">uint16_t</span> setycmd;   <span class="comment">/* 设置y坐标 */</span></span><br><span class="line">&#125; _lcd_dev;</span><br><span class="line"><span class="keyword">extern</span> _lcd_dev _lcddev;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* LCD背光控制 */</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> LCD_BL(x)       LCD_BL_GPIO_PORT-&gt;BSRR = LCD_BL_GPIO_PIN &lt;&lt; (16 * (!x))</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* FSMC 硬件选择 */</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> LCD_FSMC_NEX         4              <span class="comment">/* 使用FSMC_NE4接LCD_CS,取值范围只能是: 1~4 */</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> LCD_FSMC_AX          10             <span class="comment">/* 使用FSMC_A10接LCD_RS,取值范围是: 0 ~ 25 */</span></span></span><br><span class="line"><span class="comment">/* LCD_BASE = (0X6000 0000 + (0X400 0000 * (x - 1))) | (2^y * 2 - 2) */</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> FSMC_ADDR_DATA          ((uint32_t) 0X6C000800) <span class="comment">//A10置为1    CS = 1</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> FSMC_ADDR_CMD           ((uint32_t) 0X6C000000) <span class="comment">//A10置为0    CS = 0</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> LCD_CHINESE_FONT_12 12</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> LCD_CHINESE_FONT_16 16</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> LCD_CHINESE_FONT_24 24</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> LCD_FONTSIZE_1206 12</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> LCD_FONTSIZE_1608 16</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> LCD_FONTSIZE_2412 24</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> LCD_FONTSIZE_3216 32</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> WHITE           0xFFFF      <span class="comment">/* 白色 */</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> BLACK           0x0000      <span class="comment">/* 黑色 */</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> RED             0xF800      <span class="comment">/* 红色 */</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> GREEN           0x07E0      <span class="comment">/* 绿色 */</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> BLUE            0x001F      <span class="comment">/* 蓝色 */</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MAGENTA         0XF81F      <span class="comment">/* 品红色/紫红色 = BLUE + RED */</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> YELLOW          0XFFE0      <span class="comment">/* 黄色 = GREEN + RED */</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> CYAN            0X07FF      <span class="comment">/* 青色 = GREEN + BLUE */</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> BROWN           0XBC40      <span class="comment">/* 棕色 */</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> BRRED           0XFC07      <span class="comment">/* 棕红色 */</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> GRAY            0X8430      <span class="comment">/* 灰色 */</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> DARKBLUE        0X01CF      <span class="comment">/* 深蓝色 */</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> LIGHTBLUE       0X7D7C      <span class="comment">/* 浅蓝色 */</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> GRAYBLUE        0X5458      <span class="comment">/* 灰蓝色 */</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> LIGHTGREEN      0X841F      <span class="comment">/* 浅绿色 */</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> LGRAY           0XC618      <span class="comment">/* 浅灰色(PANNEL),窗体背景色 */</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> LGRAYBLUE       0XA651      <span class="comment">/* 浅灰蓝色(中间层颜色) */</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> LBBLUE          0X2B12      <span class="comment">/* 浅棕蓝色(选择条目的反色) */</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> LCD_MODE_BACKFILLED 1</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> LCD_MODE_NO_BACKFILLED 0</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line">    <span class="type">uint16_t</span> color;</span><br><span class="line">    <span class="type">uint8_t</span> size;</span><br><span class="line">    <span class="type">uint8_t</span> mode;</span><br><span class="line">    <span class="type">uint16_t</span> width;     <span class="comment">//string</span></span><br><span class="line">    <span class="type">uint16_t</span> height;    <span class="comment">//string</span></span><br><span class="line">    <span class="type">uint16_t</span> back_color;</span><br><span class="line">    <span class="type">uint16_t</span> chinese_size;</span><br><span class="line">&#125; f_args;</span><br><span class="line"><span class="keyword">extern</span> f_args painter;</span><br><span class="line"></span><br><span class="line"><span class="comment">//To User:</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">lcd_init</span><span class="params">(<span class="type">void</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">lcd_draw_point</span><span class="params">(<span class="type">uint16_t</span> x, <span class="type">uint16_t</span> y, <span class="type">uint16_t</span> color)</span>;</span><br><span class="line"><span class="type">uint16_t</span> <span class="title function_">lcd_read_point</span><span class="params">(<span class="type">uint16_t</span> x, <span class="type">uint16_t</span> y)</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> lcd_clear(...)                  _lcd_clear((f_args)&#123;__VA_ARGS__&#125;)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> lcd_show_char(x, y, chr,...)    _lcd_show_char(x, y, chr, (f_args)&#123;__VA_ARGS__&#125;)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> lcd_show_num(x, y, num, len,...)    _lcd_show_num(x, y, num, len, (f_args)&#123;__VA_ARGS__&#125;)</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">lcd_show_string</span><span class="params">(<span class="type">uint16_t</span> x, <span class="type">uint16_t</span> y, <span class="type">uint8_t</span> *p)</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">lcd_fill</span><span class="params">(<span class="type">uint16_t</span> sx,<span class="type">uint16_t</span> sy,<span class="type">uint16_t</span> ex,<span class="type">uint16_t</span> ey,<span class="type">uint16_t</span> color)</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//To Me:</span></span><br><span class="line"><span class="type">void</span> _lcd_clear(f_args in);</span><br><span class="line"><span class="type">void</span> _lcd_show_char(<span class="type">uint16_t</span> x, <span class="type">uint16_t</span> y, <span class="type">char</span> chr, f_args in);</span><br><span class="line"><span class="type">void</span> _lcd_show_num(<span class="type">uint16_t</span> x, <span class="type">uint16_t</span> y, <span class="type">uint32_t</span> num, <span class="type">uint8_t</span> len,  f_args in);</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> _lcd_wr_data (<span class="type">uint16_t</span> data);</span><br><span class="line"><span class="type">void</span> _lcd_wr_regno(<span class="type">uint16_t</span> reg);</span><br><span class="line"><span class="type">void</span> _lcd_ex_ili9341_reginit(<span class="type">void</span>);</span><br><span class="line"><span class="type">void</span> _lcd_ex_st7789_reginit(<span class="type">void</span>);</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span> <span class="comment">//HELLOWORLD_LCD_H</span></span></span><br></pre></td></tr></table></figure><p>lcd.c</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// Created by Whisky on 2023/1/7.</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;lcd.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;retarget.h&quot;</span></span></span><br><span class="line"></span><br><span class="line">SRAM_HandleTypeDef hsram4;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 管理LCD重要参数 */</span></span><br><span class="line">_lcd_dev _lcddev;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 写命令 */</span></span><br><span class="line"><span class="type">void</span> _lcd_wr_regno(<span class="keyword">volatile</span> <span class="type">uint16_t</span> cmd)</span><br><span class="line">&#123;</span><br><span class="line">    cmd = cmd;</span><br><span class="line">    *(<span class="type">uint16_t</span> *)(FSMC_ADDR_CMD) = cmd;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 写数据 */</span></span><br><span class="line"><span class="type">void</span> _lcd_wr_data(<span class="keyword">volatile</span> <span class="type">uint16_t</span> data)</span><br><span class="line">&#123;</span><br><span class="line">    data = data;</span><br><span class="line">    *(<span class="type">uint16_t</span> *)(FSMC_ADDR_DATA) = data;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 写寄存器 */</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">lcd_write_reg</span><span class="params">(<span class="type">uint16_t</span> regno, <span class="type">uint16_t</span> data)</span></span><br><span class="line">&#123;</span><br><span class="line">    _lcd_wr_regno(regno);</span><br><span class="line">    _lcd_wr_data(data);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 读数据 */</span></span><br><span class="line"><span class="type">uint16_t</span> <span class="title function_">lcd_rd_data</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">volatile</span> <span class="type">uint16_t</span> ram;</span><br><span class="line">    ram = *(<span class="type">uint16_t</span> *)(FSMC_ADDR_DATA);</span><br><span class="line">    <span class="keyword">return</span> ram;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 准备写GRAM */</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">lcd_write_ram_prepare</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    _lcd_wr_regno(_lcddev.wramcmd);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 准备读GRAM */</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">lcd_read_ram_prepare</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    _lcd_wr_regno(_lcddev.rramcmd);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 设置坐标 */</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">lcd_set_cursor</span><span class="params">(<span class="type">uint16_t</span> x, <span class="type">uint16_t</span> y)</span></span><br><span class="line">&#123;</span><br><span class="line">    _lcd_wr_regno(_lcddev.setxcmd);</span><br><span class="line">    _lcd_wr_data(x &gt;&gt; <span class="number">8</span>);</span><br><span class="line">    _lcd_wr_data(x &amp; <span class="number">0xFF</span>);</span><br><span class="line">    _lcd_wr_regno(_lcddev.setycmd);</span><br><span class="line">    _lcd_wr_data(y &gt;&gt; <span class="number">8</span>);</span><br><span class="line">    _lcd_wr_data(y &amp; <span class="number">0xFF</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">lcd_draw_point</span><span class="params">(<span class="type">uint16_t</span> x, <span class="type">uint16_t</span> y, <span class="type">uint16_t</span> color)</span></span><br><span class="line">&#123;</span><br><span class="line">    lcd_set_cursor(x, y);</span><br><span class="line">    lcd_write_ram_prepare();</span><br><span class="line">    _lcd_wr_data(color);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">uint16_t</span> <span class="title function_">lcd_read_point</span><span class="params">(<span class="type">uint16_t</span> x, <span class="type">uint16_t</span> y)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">uint16_t</span> R = <span class="number">0</span>, G = <span class="number">0</span>, B = <span class="number">0</span>;</span><br><span class="line">    lcd_set_cursor(x, y);</span><br><span class="line">    lcd_read_ram_prepare();</span><br><span class="line">    R = lcd_rd_data();  <span class="comment">//dummy</span></span><br><span class="line">    R = lcd_rd_data();</span><br><span class="line">    B = lcd_rd_data();</span><br><span class="line">    G = R &amp; <span class="number">0xFF</span>;</span><br><span class="line">    <span class="keyword">return</span> (((R &gt;&gt; <span class="number">11</span>) &lt;&lt; <span class="number">11</span>) | ((G &gt;&gt; <span class="number">2</span>) &lt;&lt; <span class="number">5</span>) | (B &gt;&gt; <span class="number">11</span>));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">lcd_MspInit</span><span class="params">(<span class="type">void</span>)</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">lcd_init</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    FSMC_NORSRAM_TimingTypeDef Timing = &#123;<span class="number">0</span>&#125;;</span><br><span class="line">    FSMC_NORSRAM_TimingTypeDef ExtTiming = &#123;<span class="number">0</span>&#125;;</span><br><span class="line">    <span class="comment">/** Perform the SRAM4 memory initialization sequence</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    hsram4.Instance = FSMC_NORSRAM_DEVICE;</span><br><span class="line">    hsram4.Extended = FSMC_NORSRAM_EXTENDED_DEVICE;</span><br><span class="line">    <span class="comment">/* hsram4.Init */</span></span><br><span class="line">    hsram4.Init.NSBank = FSMC_NORSRAM_BANK4;</span><br><span class="line">    hsram4.Init.DataAddressMux = FSMC_DATA_ADDRESS_MUX_DISABLE;</span><br><span class="line">    hsram4.Init.MemoryType = FSMC_MEMORY_TYPE_SRAM;</span><br><span class="line">    hsram4.Init.MemoryDataWidth = FSMC_NORSRAM_MEM_BUS_WIDTH_16;</span><br><span class="line">    hsram4.Init.BurstAccessMode = FSMC_BURST_ACCESS_MODE_DISABLE;</span><br><span class="line">    hsram4.Init.WaitSignalPolarity = FSMC_WAIT_SIGNAL_POLARITY_LOW;</span><br><span class="line">    hsram4.Init.WrapMode = FSMC_WRAP_MODE_DISABLE;</span><br><span class="line">    hsram4.Init.WaitSignalActive = FSMC_WAIT_TIMING_BEFORE_WS;</span><br><span class="line">    hsram4.Init.WriteOperation = FSMC_WRITE_OPERATION_ENABLE;</span><br><span class="line">    hsram4.Init.WaitSignal = FSMC_WAIT_SIGNAL_DISABLE;</span><br><span class="line">    hsram4.Init.ExtendedMode = FSMC_EXTENDED_MODE_ENABLE;</span><br><span class="line">    hsram4.Init.AsynchronousWait = FSMC_ASYNCHRONOUS_WAIT_DISABLE;</span><br><span class="line">    hsram4.Init.WriteBurst = FSMC_WRITE_BURST_DISABLE;</span><br><span class="line">    <span class="comment">/* Timing */</span>                <span class="comment">/* 读时序 */</span></span><br><span class="line">    Timing.AddressSetupTime = <span class="number">1</span>;</span><br><span class="line">    Timing.AddressHoldTime = <span class="number">15</span>;</span><br><span class="line">    Timing.DataSetupTime = <span class="number">15</span>;</span><br><span class="line">    Timing.BusTurnAroundDuration = <span class="number">0</span>;</span><br><span class="line">    Timing.CLKDivision = <span class="number">16</span>;</span><br><span class="line">    Timing.DataLatency = <span class="number">17</span>;</span><br><span class="line">    Timing.AccessMode = FSMC_ACCESS_MODE_A;</span><br><span class="line">    <span class="comment">/* ExtTiming */</span>             <span class="comment">/* 写时序 */</span></span><br><span class="line">    ExtTiming.AddressSetupTime = <span class="number">1</span>;</span><br><span class="line">    ExtTiming.AddressHoldTime = <span class="number">15</span>;</span><br><span class="line">    ExtTiming.DataSetupTime = <span class="number">3</span>;</span><br><span class="line">    ExtTiming.BusTurnAroundDuration = <span class="number">0</span>;</span><br><span class="line">    ExtTiming.CLKDivision = <span class="number">16</span>;</span><br><span class="line">    ExtTiming.DataLatency = <span class="number">17</span>;</span><br><span class="line">    ExtTiming.AccessMode = FSMC_ACCESS_MODE_A;</span><br><span class="line"></span><br><span class="line">    lcd_MspInit();</span><br><span class="line">    HAL_SRAM_Init(&amp;hsram4, &amp;Timing, &amp;ExtTiming);</span><br><span class="line"></span><br><span class="line">    delay_ms(<span class="number">50</span>);</span><br><span class="line"></span><br><span class="line">    _lcd_wr_regno(<span class="number">0xD3</span>);</span><br><span class="line">    _lcddev.id = lcd_rd_data();  <span class="comment">/* dummy */</span></span><br><span class="line">    _lcddev.id = lcd_rd_data();  <span class="comment">/* 00 */</span></span><br><span class="line">    _lcddev.id = lcd_rd_data();  <span class="comment">/* 93 */</span></span><br><span class="line">    _lcddev.id &lt;&lt;= <span class="number">8</span>;</span><br><span class="line">    _lcddev.id |= lcd_rd_data();  <span class="comment">/* 41 */</span></span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;LCD id:%#x \r\n&quot;</span>, _lcddev.id);</span><br><span class="line">    <span class="comment">/* 完成初始化数组序列 */</span></span><br><span class="line">    <span class="keyword">if</span> (_lcddev.id == <span class="number">0x9341</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        _lcd_ex_ili9341_reginit();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">        _lcd_ex_st7789_reginit();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 初始化LCD结构体 */</span></span><br><span class="line">    _lcddev.width = <span class="number">240</span>;</span><br><span class="line">    _lcddev.height = <span class="number">320</span>;</span><br><span class="line">    _lcddev.setxcmd = <span class="number">0x2A</span>;</span><br><span class="line">    _lcddev.setycmd = <span class="number">0x2B</span>;</span><br><span class="line">    _lcddev.wramcmd = <span class="number">0x2C</span>;</span><br><span class="line">    _lcddev.rramcmd = <span class="number">0x2E</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 设置终末位置 */</span></span><br><span class="line">    _lcd_wr_regno(_lcddev.setxcmd);</span><br><span class="line">    _lcd_wr_data(<span class="number">0</span>);</span><br><span class="line">    _lcd_wr_data(<span class="number">0</span>);</span><br><span class="line">    _lcd_wr_data((_lcddev.width - <span class="number">1</span>) &gt;&gt; <span class="number">8</span>);</span><br><span class="line">    _lcd_wr_data((_lcddev.width - <span class="number">1</span>) &amp; <span class="number">0XFF</span>);</span><br><span class="line">    _lcd_wr_regno(_lcddev.setycmd);</span><br><span class="line">    _lcd_wr_data(<span class="number">0</span>);</span><br><span class="line">    _lcd_wr_data(<span class="number">0</span>);</span><br><span class="line">    _lcd_wr_data((_lcddev.height - <span class="number">1</span>) &gt;&gt; <span class="number">8</span>);</span><br><span class="line">    _lcd_wr_data((_lcddev.height - <span class="number">1</span>) &amp; <span class="number">0XFF</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 设置扫描方向 */</span></span><br><span class="line">    lcd_write_reg(<span class="number">0x36</span>, <span class="number">1</span> &lt;&lt; <span class="number">3</span>);</span><br><span class="line"></span><br><span class="line">    painter.color = RED;</span><br><span class="line">    painter.back_color = WHITE;</span><br><span class="line">    painter.size = LCD_FONTSIZE_1608;</span><br><span class="line">    painter.mode = LCD_MODE_BACKFILLED;</span><br><span class="line">    painter.chinese_size = LCD_CHINESE_FONT_16;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 点亮背光 */</span></span><br><span class="line">    LCD_BL(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">    lcd_clear();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">static</span> <span class="type">uint32_t</span> FSMC_Initialized = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">lcd_MspInit</span><span class="params">(<span class="type">void</span>)</span>&#123;</span><br><span class="line">    GPIO_InitTypeDef GPIO_InitStruct = &#123;<span class="number">0</span>&#125;;</span><br><span class="line">    <span class="keyword">if</span> (FSMC_Initialized) &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    FSMC_Initialized = <span class="number">1</span>;</span><br><span class="line">    <span class="comment">/* Peripheral clock enable */</span></span><br><span class="line">    __HAL_RCC_FSMC_CLK_ENABLE();</span><br><span class="line"></span><br><span class="line">    GPIO_CLK_Enable();</span><br><span class="line">    LCD_BL_GPIO_CLK_ENABLE();</span><br><span class="line">    LCD_CS_GPIO_CLK_ENABLE();</span><br><span class="line">    LCD_WR_GPIO_CLK_ENABLE();</span><br><span class="line">    LCD_RD_GPIO_CLK_ENABLE();</span><br><span class="line">    LCD_RS_GPIO_CLK_ENABLE();</span><br><span class="line"></span><br><span class="line">    GPIO_InitStruct.Pin = LCD_BL_GPIO_PIN;</span><br><span class="line">    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;</span><br><span class="line">    GPIO_InitStruct.Pull = GPIO_PULLUP;</span><br><span class="line">    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;</span><br><span class="line">    HAL_GPIO_Init(LCD_BL_GPIO_PORT, &amp;GPIO_InitStruct);</span><br><span class="line"></span><br><span class="line"><span class="comment">//    GPIO_InitStruct.Pin = LCD_CS_GPIO_PIN;</span></span><br><span class="line"><span class="comment">//    HAL_GPIO_Init(LCD_CS_GPIO_PORT, &amp;GPIO_InitStruct);</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//    GPIO_InitStruct.Pin = LCD_WR_GPIO_PIN;</span></span><br><span class="line"><span class="comment">//    HAL_GPIO_Init(LCD_WR_GPIO_PORT, &amp;GPIO_InitStruct);</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//    GPIO_InitStruct.Pin = LCD_RD_GPIO_PIN;</span></span><br><span class="line"><span class="comment">//    HAL_GPIO_Init(LCD_RD_GPIO_PORT, &amp;GPIO_InitStruct);</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//    GPIO_InitStruct.Pin = LCD_RS_GPIO_PIN;</span></span><br><span class="line"><span class="comment">//    HAL_GPIO_Init(LCD_RS_GPIO_PORT, &amp;GPIO_InitStruct);</span></span><br><span class="line">    <span class="comment">/** FSMC GPIO Configuration</span></span><br><span class="line"><span class="comment">    PG0   ------&gt; FSMC_A10</span></span><br><span class="line"><span class="comment">    PE7   ------&gt; FSMC_D4</span></span><br><span class="line"><span class="comment">    PE8   ------&gt; FSMC_D5</span></span><br><span class="line"><span class="comment">    PE9   ------&gt; FSMC_D6</span></span><br><span class="line"><span class="comment">    PE10   ------&gt; FSMC_D7</span></span><br><span class="line"><span class="comment">    PE11   ------&gt; FSMC_D8</span></span><br><span class="line"><span class="comment">    PE12   ------&gt; FSMC_D9</span></span><br><span class="line"><span class="comment">    PE13   ------&gt; FSMC_D10</span></span><br><span class="line"><span class="comment">    PE14   ------&gt; FSMC_D11</span></span><br><span class="line"><span class="comment">    PE15   ------&gt; FSMC_D12</span></span><br><span class="line"><span class="comment">    PD8   ------&gt; FSMC_D13</span></span><br><span class="line"><span class="comment">    PD9   ------&gt; FSMC_D14</span></span><br><span class="line"><span class="comment">    PD10   ------&gt; FSMC_D15</span></span><br><span class="line"><span class="comment">    PD14   ------&gt; FSMC_D0</span></span><br><span class="line"><span class="comment">    PD15   ------&gt; FSMC_D1</span></span><br><span class="line"><span class="comment">    PD0   ------&gt; FSMC_D2</span></span><br><span class="line"><span class="comment">    PD1   ------&gt; FSMC_D3</span></span><br><span class="line"><span class="comment">    PD4   ------&gt; FSMC_NOE</span></span><br><span class="line"><span class="comment">    PD5   ------&gt; FSMC_NWE</span></span><br><span class="line"><span class="comment">    PG12   ------&gt; FSMC_NE4</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="comment">/* GPIO_InitStruct */</span></span><br><span class="line">    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_12;</span><br><span class="line">    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;</span><br><span class="line">    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;</span><br><span class="line">    HAL_GPIO_Init(GPIOG, &amp;GPIO_InitStruct);</span><br><span class="line">    <span class="comment">/* GPIO_InitStruct */</span></span><br><span class="line">    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10</span><br><span class="line">                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14</span><br><span class="line">                          |GPIO_PIN_15;</span><br><span class="line">    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;</span><br><span class="line">    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;</span><br><span class="line">    HAL_GPIO_Init(GPIOE, &amp;GPIO_InitStruct);</span><br><span class="line">    <span class="comment">/* GPIO_InitStruct */</span></span><br><span class="line">    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_14</span><br><span class="line">                          |GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4</span><br><span class="line">                          |GPIO_PIN_5;</span><br><span class="line">    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;</span><br><span class="line">    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;</span><br><span class="line">    HAL_GPIO_Init(GPIOD, &amp;GPIO_InitStruct);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> _lcd_clear(f_args in)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">uint16_t</span> color = in.color? in.color: painter.back_color;</span><br><span class="line">    <span class="type">uint32_t</span> totalpoint = _lcddev.width;</span><br><span class="line">    totalpoint *= _lcddev.height;                <span class="comment">/* 得到总点数 */</span></span><br><span class="line">    lcd_set_cursor(<span class="number">0</span>, <span class="number">0</span>);                   <span class="comment">/* 设置光标位置 */</span></span><br><span class="line">    lcd_write_ram_prepare();                    <span class="comment">/* 开始写入GRAM */</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">uint32_t</span> index; index &lt; totalpoint; index++)</span><br><span class="line">    &#123;</span><br><span class="line">        _lcd_wr_data(color);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//在指定区域内填充单个颜色</span></span><br><span class="line"><span class="comment">//(sx,sy),(ex,ey):填充矩形对角坐标</span></span><br><span class="line"><span class="comment">//区域大小为:(ex-sx+1)*(ey-sy+1)</span></span><br><span class="line"><span class="comment">//color:要填充的颜色</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">lcd_fill</span><span class="params">(<span class="type">uint16_t</span> sx,<span class="type">uint16_t</span> sy,<span class="type">uint16_t</span> ex,<span class="type">uint16_t</span> ey,<span class="type">uint16_t</span> color)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">uint16_t</span> i, j;</span><br><span class="line">    <span class="type">uint16_t</span> xlen = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    xlen = ex - sx + <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (i = sy; i &lt;= ey; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        lcd_set_cursor(sx, i);       <span class="comment">//设置光标位置</span></span><br><span class="line">        lcd_write_ram_prepare();     <span class="comment">//开始写入GRAM</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (j = <span class="number">0</span>; j &lt; xlen; j++)</span><br><span class="line">        &#123;</span><br><span class="line">            *(<span class="type">uint16_t</span> *)FSMC_ADDR_DATA = color;   <span class="comment">//设置光标位置</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>lcd_ex.c</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;lcd.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @brief       ST7789 寄存器初始化代码</span></span><br><span class="line"><span class="comment"> * @param       无</span></span><br><span class="line"><span class="comment"> * @retval      无</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="type">void</span> _lcd_ex_st7789_reginit(<span class="type">void</span>)</span><br><span class="line">&#123;</span><br><span class="line">    _lcd_wr_regno(<span class="number">0x11</span>);</span><br><span class="line"></span><br><span class="line">    delay_ms(<span class="number">120</span>);</span><br><span class="line"></span><br><span class="line">    _lcd_wr_regno(<span class="number">0x36</span>);</span><br><span class="line">    _lcd_wr_data(<span class="number">0x00</span>);</span><br><span class="line"></span><br><span class="line">    _lcd_wr_regno(<span class="number">0x3A</span>);</span><br><span class="line">    _lcd_wr_data(<span class="number">0X05</span>);</span><br><span class="line"></span><br><span class="line">    _lcd_wr_regno(<span class="number">0xB2</span>);</span><br><span class="line">    _lcd_wr_data(<span class="number">0x0C</span>);</span><br><span class="line">    _lcd_wr_data(<span class="number">0x0C</span>);</span><br><span class="line">    _lcd_wr_data(<span class="number">0x00</span>);</span><br><span class="line">    _lcd_wr_data(<span class="number">0x33</span>);</span><br><span class="line">    _lcd_wr_data(<span class="number">0x33</span>);</span><br><span class="line"></span><br><span class="line">    _lcd_wr_regno(<span class="number">0xB7</span>);</span><br><span class="line">    _lcd_wr_data(<span class="number">0x35</span>);</span><br><span class="line"></span><br><span class="line">    _lcd_wr_regno(<span class="number">0xBB</span>); <span class="comment">/* vcom */</span></span><br><span class="line">    _lcd_wr_data(<span class="number">0x32</span>);  <span class="comment">/* 30 */</span></span><br><span class="line"></span><br><span class="line">    _lcd_wr_regno(<span class="number">0xC0</span>);</span><br><span class="line">    _lcd_wr_data(<span class="number">0x0C</span>);</span><br><span class="line"></span><br><span class="line">    _lcd_wr_regno(<span class="number">0xC2</span>);</span><br><span class="line">    _lcd_wr_data(<span class="number">0x01</span>);</span><br><span class="line"></span><br><span class="line">    _lcd_wr_regno(<span class="number">0xC3</span>); <span class="comment">/* vrh */</span></span><br><span class="line">    _lcd_wr_data(<span class="number">0x10</span>);  <span class="comment">/* 17 0D */</span></span><br><span class="line"></span><br><span class="line">    _lcd_wr_regno(<span class="number">0xC4</span>); <span class="comment">/* vdv */</span></span><br><span class="line">    _lcd_wr_data(<span class="number">0x20</span>);  <span class="comment">/* 20 */</span></span><br><span class="line"></span><br><span class="line">    _lcd_wr_regno(<span class="number">0xC6</span>);</span><br><span class="line">    _lcd_wr_data(<span class="number">0x0f</span>);</span><br><span class="line"></span><br><span class="line">    _lcd_wr_regno(<span class="number">0xD0</span>);</span><br><span class="line">    _lcd_wr_data(<span class="number">0xA4</span>);</span><br><span class="line">    _lcd_wr_data(<span class="number">0xA1</span>);</span><br><span class="line"></span><br><span class="line">    _lcd_wr_regno(<span class="number">0xE0</span>); <span class="comment">/* Set Gamma  */</span></span><br><span class="line">    _lcd_wr_data(<span class="number">0xd0</span>);</span><br><span class="line">    _lcd_wr_data(<span class="number">0x00</span>);</span><br><span class="line">    _lcd_wr_data(<span class="number">0x02</span>);</span><br><span class="line">    _lcd_wr_data(<span class="number">0x07</span>);</span><br><span class="line">    _lcd_wr_data(<span class="number">0x0a</span>);</span><br><span class="line">    _lcd_wr_data(<span class="number">0x28</span>);</span><br><span class="line">    _lcd_wr_data(<span class="number">0x32</span>);</span><br><span class="line">    _lcd_wr_data(<span class="number">0X44</span>);</span><br><span class="line">    _lcd_wr_data(<span class="number">0x42</span>);</span><br><span class="line">    _lcd_wr_data(<span class="number">0x06</span>);</span><br><span class="line">    _lcd_wr_data(<span class="number">0x0e</span>);</span><br><span class="line">    _lcd_wr_data(<span class="number">0x12</span>);</span><br><span class="line">    _lcd_wr_data(<span class="number">0x14</span>);</span><br><span class="line">    _lcd_wr_data(<span class="number">0x17</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    _lcd_wr_regno(<span class="number">0XE1</span>);  <span class="comment">/* Set Gamma */</span></span><br><span class="line">    _lcd_wr_data(<span class="number">0xd0</span>);</span><br><span class="line">    _lcd_wr_data(<span class="number">0x00</span>);</span><br><span class="line">    _lcd_wr_data(<span class="number">0x02</span>);</span><br><span class="line">    _lcd_wr_data(<span class="number">0x07</span>);</span><br><span class="line">    _lcd_wr_data(<span class="number">0x0a</span>);</span><br><span class="line">    _lcd_wr_data(<span class="number">0x28</span>);</span><br><span class="line">    _lcd_wr_data(<span class="number">0x31</span>);</span><br><span class="line">    _lcd_wr_data(<span class="number">0x54</span>);</span><br><span class="line">    _lcd_wr_data(<span class="number">0x47</span>);</span><br><span class="line">    _lcd_wr_data(<span class="number">0x0e</span>);</span><br><span class="line">    _lcd_wr_data(<span class="number">0x1c</span>);</span><br><span class="line">    _lcd_wr_data(<span class="number">0x17</span>);</span><br><span class="line">    _lcd_wr_data(<span class="number">0x1b</span>);</span><br><span class="line">    _lcd_wr_data(<span class="number">0x1e</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    _lcd_wr_regno(<span class="number">0x2A</span>);</span><br><span class="line">    _lcd_wr_data(<span class="number">0x00</span>);</span><br><span class="line">    _lcd_wr_data(<span class="number">0x00</span>);</span><br><span class="line">    _lcd_wr_data(<span class="number">0x00</span>);</span><br><span class="line">    _lcd_wr_data(<span class="number">0xef</span>);</span><br><span class="line"></span><br><span class="line">    _lcd_wr_regno(<span class="number">0x2B</span>);</span><br><span class="line">    _lcd_wr_data(<span class="number">0x00</span>);</span><br><span class="line">    _lcd_wr_data(<span class="number">0x00</span>);</span><br><span class="line">    _lcd_wr_data(<span class="number">0x01</span>);</span><br><span class="line">    _lcd_wr_data(<span class="number">0x3f</span>);</span><br><span class="line"></span><br><span class="line">    _lcd_wr_regno(<span class="number">0x29</span>); <span class="comment">/* display on */</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @brief       ILI9341寄存器初始化代码</span></span><br><span class="line"><span class="comment"> * @param       无</span></span><br><span class="line"><span class="comment"> * @retval      无</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="type">void</span> _lcd_ex_ili9341_reginit(<span class="type">void</span>)</span><br><span class="line">&#123;</span><br><span class="line">    _lcd_wr_regno(<span class="number">0xCF</span>);</span><br><span class="line">    _lcd_wr_data(<span class="number">0x00</span>);</span><br><span class="line">    _lcd_wr_data(<span class="number">0xC1</span>);</span><br><span class="line">    _lcd_wr_data(<span class="number">0X30</span>);</span><br><span class="line">    _lcd_wr_regno(<span class="number">0xED</span>);</span><br><span class="line">    _lcd_wr_data(<span class="number">0x64</span>);</span><br><span class="line">    _lcd_wr_data(<span class="number">0x03</span>);</span><br><span class="line">    _lcd_wr_data(<span class="number">0X12</span>);</span><br><span class="line">    _lcd_wr_data(<span class="number">0X81</span>);</span><br><span class="line">    _lcd_wr_regno(<span class="number">0xE8</span>);</span><br><span class="line">    _lcd_wr_data(<span class="number">0x85</span>);</span><br><span class="line">    _lcd_wr_data(<span class="number">0x10</span>);</span><br><span class="line">    _lcd_wr_data(<span class="number">0x7A</span>);</span><br><span class="line">    _lcd_wr_regno(<span class="number">0xCB</span>);</span><br><span class="line">    _lcd_wr_data(<span class="number">0x39</span>);</span><br><span class="line">    _lcd_wr_data(<span class="number">0x2C</span>);</span><br><span class="line">    _lcd_wr_data(<span class="number">0x00</span>);</span><br><span class="line">    _lcd_wr_data(<span class="number">0x34</span>);</span><br><span class="line">    _lcd_wr_data(<span class="number">0x02</span>);</span><br><span class="line">    _lcd_wr_regno(<span class="number">0xF7</span>);</span><br><span class="line">    _lcd_wr_data(<span class="number">0x20</span>);</span><br><span class="line">    _lcd_wr_regno(<span class="number">0xEA</span>);</span><br><span class="line">    _lcd_wr_data(<span class="number">0x00</span>);</span><br><span class="line">    _lcd_wr_data(<span class="number">0x00</span>);</span><br><span class="line">    _lcd_wr_regno(<span class="number">0xC0</span>); <span class="comment">/* Power control */</span></span><br><span class="line">    _lcd_wr_data(<span class="number">0x1B</span>);  <span class="comment">/* VRH[5:0] */</span></span><br><span class="line">    _lcd_wr_regno(<span class="number">0xC1</span>); <span class="comment">/* Power control */</span></span><br><span class="line">    _lcd_wr_data(<span class="number">0x01</span>);  <span class="comment">/* SAP[2:0];BT[3:0] */</span></span><br><span class="line">    _lcd_wr_regno(<span class="number">0xC5</span>); <span class="comment">/* VCM control */</span></span><br><span class="line">    _lcd_wr_data(<span class="number">0x30</span>);  <span class="comment">/* 3F */</span></span><br><span class="line">    _lcd_wr_data(<span class="number">0x30</span>);  <span class="comment">/* 3C */</span></span><br><span class="line">    _lcd_wr_regno(<span class="number">0xC7</span>); <span class="comment">/* VCM control2 */</span></span><br><span class="line">    _lcd_wr_data(<span class="number">0XB7</span>);</span><br><span class="line">    _lcd_wr_regno(<span class="number">0x36</span>); <span class="comment">/*  Memory Access Control */</span></span><br><span class="line">    _lcd_wr_data(<span class="number">0x48</span>);</span><br><span class="line">    _lcd_wr_regno(<span class="number">0x3A</span>);</span><br><span class="line">    _lcd_wr_data(<span class="number">0x55</span>);</span><br><span class="line">    _lcd_wr_regno(<span class="number">0xB1</span>);</span><br><span class="line">    _lcd_wr_data(<span class="number">0x00</span>);</span><br><span class="line">    _lcd_wr_data(<span class="number">0x1A</span>);</span><br><span class="line">    _lcd_wr_regno(<span class="number">0xB6</span>); <span class="comment">/*  Display Function Control */</span></span><br><span class="line">    _lcd_wr_data(<span class="number">0x0A</span>);</span><br><span class="line">    _lcd_wr_data(<span class="number">0xA2</span>);</span><br><span class="line">    _lcd_wr_regno(<span class="number">0xF2</span>); <span class="comment">/*  3Gamma Function Disable */</span></span><br><span class="line">    _lcd_wr_data(<span class="number">0x00</span>);</span><br><span class="line">    _lcd_wr_regno(<span class="number">0x26</span>); <span class="comment">/* Gamma curve selected */</span></span><br><span class="line">    _lcd_wr_data(<span class="number">0x01</span>);</span><br><span class="line">    _lcd_wr_regno(<span class="number">0xE0</span>); <span class="comment">/* Set Gamma */</span></span><br><span class="line">    _lcd_wr_data(<span class="number">0x0F</span>);</span><br><span class="line">    _lcd_wr_data(<span class="number">0x2A</span>);</span><br><span class="line">    _lcd_wr_data(<span class="number">0x28</span>);</span><br><span class="line">    _lcd_wr_data(<span class="number">0x08</span>);</span><br><span class="line">    _lcd_wr_data(<span class="number">0x0E</span>);</span><br><span class="line">    _lcd_wr_data(<span class="number">0x08</span>);</span><br><span class="line">    _lcd_wr_data(<span class="number">0x54</span>);</span><br><span class="line">    _lcd_wr_data(<span class="number">0XA9</span>);</span><br><span class="line">    _lcd_wr_data(<span class="number">0x43</span>);</span><br><span class="line">    _lcd_wr_data(<span class="number">0x0A</span>);</span><br><span class="line">    _lcd_wr_data(<span class="number">0x0F</span>);</span><br><span class="line">    _lcd_wr_data(<span class="number">0x00</span>);</span><br><span class="line">    _lcd_wr_data(<span class="number">0x00</span>);</span><br><span class="line">    _lcd_wr_data(<span class="number">0x00</span>);</span><br><span class="line">    _lcd_wr_data(<span class="number">0x00</span>);</span><br><span class="line">    _lcd_wr_regno(<span class="number">0XE1</span>);    <span class="comment">/* Set Gamma */</span></span><br><span class="line">    _lcd_wr_data(<span class="number">0x00</span>);</span><br><span class="line">    _lcd_wr_data(<span class="number">0x15</span>);</span><br><span class="line">    _lcd_wr_data(<span class="number">0x17</span>);</span><br><span class="line">    _lcd_wr_data(<span class="number">0x07</span>);</span><br><span class="line">    _lcd_wr_data(<span class="number">0x11</span>);</span><br><span class="line">    _lcd_wr_data(<span class="number">0x06</span>);</span><br><span class="line">    _lcd_wr_data(<span class="number">0x2B</span>);</span><br><span class="line">    _lcd_wr_data(<span class="number">0x56</span>);</span><br><span class="line">    _lcd_wr_data(<span class="number">0x3C</span>);</span><br><span class="line">    _lcd_wr_data(<span class="number">0x05</span>);</span><br><span class="line">    _lcd_wr_data(<span class="number">0x10</span>);</span><br><span class="line">    _lcd_wr_data(<span class="number">0x0F</span>);</span><br><span class="line">    _lcd_wr_data(<span class="number">0x3F</span>);</span><br><span class="line">    _lcd_wr_data(<span class="number">0x3F</span>);</span><br><span class="line">    _lcd_wr_data(<span class="number">0x0F</span>);</span><br><span class="line">    _lcd_wr_regno(<span class="number">0x2B</span>);</span><br><span class="line">    _lcd_wr_data(<span class="number">0x00</span>);</span><br><span class="line">    _lcd_wr_data(<span class="number">0x00</span>);</span><br><span class="line">    _lcd_wr_data(<span class="number">0x01</span>);</span><br><span class="line">    _lcd_wr_data(<span class="number">0x3f</span>);</span><br><span class="line">    _lcd_wr_regno(<span class="number">0x2A</span>);</span><br><span class="line">    _lcd_wr_data(<span class="number">0x00</span>);</span><br><span class="line">    _lcd_wr_data(<span class="number">0x00</span>);</span><br><span class="line">    _lcd_wr_data(<span class="number">0x00</span>);</span><br><span class="line">    _lcd_wr_data(<span class="number">0xef</span>);</span><br><span class="line">    _lcd_wr_regno(<span class="number">0x11</span>); <span class="comment">/* Exit Sleep */</span></span><br><span class="line">    delay_ms(<span class="number">120</span>);</span><br><span class="line">    _lcd_wr_regno(<span class="number">0x29</span>); <span class="comment">/* display on */</span></span><br><span class="line"> &#125;</span><br><span class="line"> </span><br></pre></td></tr></table></figure><p>lcdlib.c</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// Created by Whisky on 2023/1/7.</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;lcd.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;lcdfont.h&quot;</span></span></span><br><span class="line"></span><br><span class="line">f_args painter;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> _lcd_show_char(<span class="type">uint16_t</span> x, <span class="type">uint16_t</span> y, <span class="type">char</span> chr, f_args in)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">/* 设置默认参数 */</span></span><br><span class="line">    <span class="type">uint8_t</span> size = in.size ? in.size : painter.size;</span><br><span class="line">    <span class="type">uint16_t</span> color = in.color ? in.color : painter.color;</span><br><span class="line">    <span class="type">uint8_t</span> mode = in.mode ? in.mode : painter.mode;</span><br><span class="line"></span><br><span class="line">    <span class="type">uint8_t</span> *pfont = <span class="literal">NULL</span>;</span><br><span class="line">    <span class="type">uint8_t</span> chr_cnt = (size/<span class="number">8</span>+((size%<span class="number">8</span>)?<span class="number">1</span>:<span class="number">0</span>))*(size/<span class="number">2</span>) ;  <span class="comment">/* 总字节数 */</span></span><br><span class="line">    <span class="type">uint16_t</span> y0 = y;</span><br><span class="line">    chr = chr - <span class="string">&#x27; &#x27;</span>;    <span class="comment">//字库是从&#x27; &#x27;开始存的</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">switch</span>(size)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">case</span> LCD_FONTSIZE_1206:</span><br><span class="line">            pfont = (<span class="type">uint8_t</span> *)asc2_1206[chr];  <span class="comment">/* 调用1206字体 */</span></span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">case</span> LCD_FONTSIZE_1608:</span><br><span class="line">            pfont = (<span class="type">uint8_t</span> *)asc2_1608[chr];  <span class="comment">/* 调用1608字体 */</span></span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">case</span> LCD_FONTSIZE_2412:</span><br><span class="line">            pfont = (<span class="type">uint8_t</span> *)asc2_2412[chr];  <span class="comment">/* 调用2412字体 */</span></span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">case</span> LCD_FONTSIZE_3216:</span><br><span class="line">            pfont = (<span class="type">uint8_t</span> *)asc2_3216[chr];  <span class="comment">/* 调用3216字体 */</span></span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">default</span>:</span><br><span class="line">            <span class="keyword">return</span> ;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">uint8_t</span> t = <span class="number">0</span>; t &lt; chr_cnt; t++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">uint8_t</span> temp = pfont[t];</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">uint8_t</span> t1 = <span class="number">0</span>; t1 &lt; <span class="number">8</span>; t1++)   <span class="comment">//处理8位数据</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(temp &amp; <span class="number">0x80</span>)&#123;                <span class="comment">//首位有效</span></span><br><span class="line">                lcd_draw_point(x, y , color);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(mode == LCD_MODE_BACKFILLED)</span><br><span class="line">            &#123;</span><br><span class="line">                lcd_draw_point(x, y , painter.back_color);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            temp &lt;&lt;= <span class="number">1</span>;</span><br><span class="line">            y++;</span><br><span class="line">            <span class="keyword">if</span>((y - y0) == size)</span><br><span class="line">            &#123;</span><br><span class="line">                y = y0;</span><br><span class="line">                x++;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">lcd_show_string</span><span class="params">(<span class="type">uint16_t</span> x, <span class="type">uint16_t</span> y, <span class="type">uint8_t</span> *p)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//默认参数</span></span><br><span class="line">    <span class="type">uint16_t</span> width = painter.width ? painter.width : (_lcddev.width - x);</span><br><span class="line">    <span class="type">uint16_t</span> height = painter.height ? painter.height : (_lcddev.height - y);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="type">uint8_t</span> x0 = x;</span><br><span class="line">    width += x;</span><br><span class="line">    height += y;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> ((*p &lt;= <span class="string">&#x27;~&#x27;</span>) &amp;&amp; (*p &gt;= <span class="string">&#x27; &#x27;</span>))   <span class="comment">//判断是不是非法字符!</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (x &gt;= width)</span><br><span class="line">        &#123;</span><br><span class="line">            x = x0;</span><br><span class="line">            y += painter.size;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (y &gt;= height)<span class="keyword">break</span>; <span class="comment">//退出</span></span><br><span class="line"></span><br><span class="line">        lcd_show_char(x, y, *p, .size = painter.size, .color = painter.color, .mode = painter.mode);</span><br><span class="line">        x += painter.size / <span class="number">2</span>;</span><br><span class="line">        p++;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">uint32_t</span> _lcd_pow(<span class="type">uint8_t</span> m, <span class="type">uint8_t</span> n)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">uint32_t</span> result = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (n--)result *= m;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> _lcd_show_num(<span class="type">uint16_t</span> x, <span class="type">uint16_t</span> y, <span class="type">uint32_t</span> num, <span class="type">uint8_t</span> len,  f_args in)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//默认参数</span></span><br><span class="line">    <span class="type">uint8_t</span> size = in.size ? in.size : painter.size;</span><br><span class="line">    <span class="type">uint16_t</span> color = in.color ? in.color : painter.color;</span><br><span class="line">    <span class="type">uint8_t</span> mode = in.mode ? in.mode : painter.mode;</span><br><span class="line"></span><br><span class="line">    <span class="type">uint8_t</span> t, temp;</span><br><span class="line">    <span class="type">uint8_t</span> enshow = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (t = <span class="number">0</span>; t &lt; len; t++)</span><br><span class="line">    &#123;</span><br><span class="line">        temp = (num / _lcd_pow(<span class="number">10</span>, len - t - <span class="number">1</span>)) % <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (enshow == <span class="number">0</span> &amp;&amp; t &lt; (len - <span class="number">1</span>))</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (temp == <span class="number">0</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                lcd_show_char(x + (size / <span class="number">2</span>)*t, y, <span class="string">&#x27; &#x27;</span>, .size=size, .mode = mode, .color = color);</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> enshow = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        lcd_show_char(x + (size / <span class="number">2</span>)*t, y, temp + <span class="string">&#x27;0&#x27;</span>, .size=size, .mode = mode, .color = color);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>lcdfont.h (太大了，附不了了)</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">ifndef</span> __LCDFONT_H</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __LCDFONT_H</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* 12*12 ASCII字符集点阵 */</span></span><br><span class="line"><span class="type">const</span> <span class="type">unsigned</span> <span class="type">char</span> asc2_1206[<span class="number">95</span>][<span class="number">12</span>]=&#123;</span><br><span class="line">&#123;<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>&#125;,<span class="comment">/*&quot; &quot;,0*/</span></span><br><span class="line">&#123;<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x3F</span>,<span class="number">0x40</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>&#125;,<span class="comment">/*&quot;!&quot;,1*/</span></span><br><span class="line">...<span class="comment">//省略代码</span></span><br></pre></td></tr></table></figure><p>至此，我们也完成了一个LCD的驱动<br>不过，笔者没有像正点原子那样做很多完备的功能函数(像什么画圆，画线就没移植过来了)，朋友们可以自行查阅。</p>]]></content>
      
      
      <categories>
          
          <category> 跟我一起写STM32 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> stm32 </tag>
            
            <tag> 嵌入式 </tag>
            
            <tag> c语言 </tag>
            
            <tag> 单片机 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>OLED(含IIC)——跟我一起写STM32(第六期)</title>
      <link href="/2023/01/11/STM32/OLED(%E5%90%ABIIC)%E2%80%94%E2%80%94%E8%B7%9F%E6%88%91%E4%B8%80%E8%B5%B7%E5%86%99STM32(%E7%AC%AC%E5%85%AD%E6%9C%9F)/"/>
      <url>/2023/01/11/STM32/OLED(%E5%90%ABIIC)%E2%80%94%E2%80%94%E8%B7%9F%E6%88%91%E4%B8%80%E8%B5%B7%E5%86%99STM32(%E7%AC%AC%E5%85%AD%E6%9C%9F)/</url>
      
        <content type="html"><![CDATA[<span id="more"></span><h3 id="文章目录">文章目录</h3><ul><li><a href="#8-%E7%82%B9%E4%BA%AE%E7%AC%AC%E4%B8%80%E4%B8%AA%E5%B1%8F%E5%B9%95">8 点亮第一个屏幕</a><ul><li><a href="#81-%E8%AE%A4%E8%AF%86iic">8.1 认识IIC</a></li><li><a href="#82-iic%E7%9A%84%E6%8B%BC%E5%9B%BE">8.2 IIC的拼图</a></li><li><a href="#83-%E8%AE%A4%E8%AF%86oled">8.3 认识OLED</a></li><li><a href="#84-%E7%94%BB%E4%B8%8A%E4%B8%80%E4%B8%AA%E7%82%B9">8.4 画上一个点</a></li><li><a href="#85-%E5%A2%9E%E5%8A%A0%E5%8A%9F%E8%83%BD%E5%87%BD%E6%95%B0">8.5 增加功能函数</a></li><li><a href="#86-%E7%94%A8c%E8%AF%AD%E8%A8%80%E5%AE%9E%E7%8E%B0%E9%BB%98%E8%AE%A4%E5%8F%82%E6%95%B0">8.6 用C语言实现默认参数</a></li><li><a href="#87-%E7%A1%AC%E4%BB%B6iic">8.7 硬件IIC</a></li></ul></li></ul><h1 id="8-点亮第一个屏幕">8 点亮第一个屏幕</h1><h2 id="8-1-认识iic">8.1 认识IIC</h2><p>总所周知，虽然OLED有很多支持很多种协议，但碍于笔者的财力，所以咱们今天主要讨论IIC的OLED驱动。<br>IIC总线，又叫I2C，是一种由飞利浦(PHILIPS)公司开发的两线式串行总线，用于连接微控制器及其外围设备。它是由数据线 SDA 和时钟 SCL 构成的串行总线，可发送和接收数据。在 CPU 与被控 IC 之间、IC 与 IC 之间进行双向传送，高速 IIC 总线一般可达 400kbps 以上。<br>IIC 总线在传送数据过程中共有三种类型信号， 它们分别是：开始信号、结束信号和应答信号。<br><strong>开始信号：</strong><br>SCL 为高电平时，SDA 由高电平向低电平跳变，开始传送数据。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">  * @briefI2C开始</span></span><br><span class="line"><span class="comment">  * @param无</span></span><br><span class="line"><span class="comment">  * @retval 无</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">I2C_Start</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">I2C_SDA = <span class="number">1</span> ;</span><br><span class="line">I2C_SCL = <span class="number">1</span> ;</span><br><span class="line">I2C_SDA = <span class="number">0</span> ;</span><br><span class="line">I2C_SCL = <span class="number">0</span> ;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>结束信号：</strong><br>SCL 为高电平时，SDA 由低电平向高电平跳变，结束传送数据。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">  * @briefI2C停止</span></span><br><span class="line"><span class="comment">  * @param无</span></span><br><span class="line"><span class="comment">  * @retval 无</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">I2C_Stop</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">I2C_SDA = <span class="number">0</span> ;</span><br><span class="line">I2C_SCL = <span class="number">1</span> ;</span><br><span class="line">I2C_SDA = <span class="number">1</span> ;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>应答信号：</strong><br>接收数据的 IC 在接收到 8bit 数据后，向发送数据的 IC 发出特定的低电平脉冲，表示已收到数据。CPU 向受控单元发出一个信号后，等待受控单元发出一个应答信号，CPU 接收到应答信号后，根据实际情况作出是否继续传递信号的判断。若未收到应答信号，由判断为受控单元出现故障。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">  * @briefI2C发送应答</span></span><br><span class="line"><span class="comment">  * @paramAckBit 应答位 0为应答，1为非应答</span></span><br><span class="line"><span class="comment">  * @retval 无</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">I2C_SendAck</span><span class="params">(<span class="type">unsigned</span> <span class="type">char</span> AckBit)</span></span><br><span class="line">&#123;</span><br><span class="line">I2C_SDA = AckBit;</span><br><span class="line">I2C_SCL = <span class="number">1</span> ;</span><br><span class="line">I2C_SCL = <span class="number">0</span> ;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">  * @briefI2C接收应答</span></span><br><span class="line"><span class="comment">  * @param无</span></span><br><span class="line"><span class="comment">  * @retval 接收到的应答位，0为应答，1为非应答</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"><span class="type">unsigned</span> <span class="type">char</span> <span class="title function_">I2C_ReceiveAck</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">unsigned</span> <span class="type">char</span> AckBit = <span class="number">0</span>;</span><br><span class="line">I2C_SDA = <span class="number">1</span> ;</span><br><span class="line">I2C_SCL = <span class="number">1</span> ;</span><br><span class="line">AckBit = I2C_SDA;</span><br><span class="line">I2C_SCL = <span class="number">0</span> ;</span><br><span class="line"><span class="keyword">return</span> AckBit;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这是IIC的时序图，和我们刚刚说的一样，只是更加直观了<br><img src="https://img-blog.csdnimg.cn/5909c7467cda4ef0a9a0cfa9db2413ed.png" alt="请添加图片描述"><br>目前大部分 MCU 都带有 IIC 总线接口，STM32F1 也不例外。但是这里我们不使用 STM32F1<br>的硬件 IIC 来读写 OLED，而是通过软件模拟。ST 为了规避飞利浦 IIC 专利问题，将 STM32<br>的硬件 IIC 设计的比较复杂，而且稳定性不怎么好，所以这里笔者不推荐使用。<br>用软件模拟 IIC，最大的好处就是方便移植，同一个代码兼容所有 MCU，任何一个单片机只要有 IO 口，就可以很快的移植过去，而且不需要特定的 IO 口。而硬件 IIC，则换一款 MCU，基本上就得重新搞一次，移植是比较麻烦的，这也是我们推荐使用软件模拟 IIC 的另外一个原因。</p><h2 id="8-2-iic的拼图">8.2 IIC的拼图</h2><p>既然决定用软件模拟，那么就得讲究一个效率，不能让通信延时条链子。(毕竟不是用的硬件IIC)<br>那么我们就直接操作寄存器来实现更高效的IIC模拟，这里将会使用：<br>1.位带操作(第三期有讲)<br>2.GPIOx-&gt;CRL(端口配置低寄存器) -&gt; 改变GPIO输入/输出方向<br><img src="https://img-blog.csdnimg.cn/d4ecdfad0ac5405389511a4c3f7c7378.png#pic_center" alt=""><br>接着，我们来看一下IIC的拼图信号：<br><img src="https://img-blog.csdnimg.cn/ad960433342b4b44990728542342c1d9.png#pic_center" alt=""><br>通过示波器检测读写速度在 250KHz 内，所以一秒钟传送 500Kb 数据，换算一下即一个 bit 位需要 2us，在这个延时时间内可以让器件获得一个稳定性的数据采集。</p><p>myiic.h</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// Created by Whisky on 2023/1/11.</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">ifndef</span> HELLOWORLD_MYIIC_H</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> HELLOWORLD_MYIIC_H</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;main.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> SDA_IN() &#123;GPIOB-&gt;CRL&amp;=0X0FFFFFFF;GPIOB-&gt;CRL|=(u32)8&lt;&lt;28;&#125;<span class="comment">//上拉/下拉输入模式 输入模式</span></span></span><br><span class="line"><span class="comment">//PB7 输入模式</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> SDA_OUT() &#123;GPIOB-&gt;CRL&amp;=0X0FFFFFFF;GPIOB-&gt;CRL|=(u32)3&lt;&lt;28;&#125;<span class="comment">//通用推挽输出模式 输出模式，最大速度50MHz</span></span></span><br><span class="line"><span class="comment">//PB7 输出模式</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//IO 操作</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> IIC_SCL PBout(6) <span class="comment">//SCL</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> IIC_SDA PBout(7) <span class="comment">//SDA</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> READ_SDA PBin(7) <span class="comment">//输入 SDA</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">iic_init</span><span class="params">(<span class="type">void</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">iic_start</span><span class="params">(<span class="type">void</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">iic_stop</span><span class="params">(<span class="type">void</span>)</span>;</span><br><span class="line">u8 <span class="title function_">iic_wait_ack</span><span class="params">(<span class="type">void</span>)</span>;<span class="comment">//返回值：1，接收应答失败 0，接收应答成功</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">iic_ack</span><span class="params">(<span class="type">void</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">iic_nack</span><span class="params">(<span class="type">void</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">iic_send_byte</span><span class="params">(u8 txd)</span>;</span><br><span class="line">u8 <span class="title function_">iic_read_byte</span><span class="params">(<span class="type">unsigned</span> <span class="type">char</span> ack)</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span> <span class="comment">//HELLOWORLD_MYIIC_H</span></span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>myiic.c</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// Created by Whisky on 2023/1/11.</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;myiic.h&quot;</span></span></span><br><span class="line"><span class="type">void</span> <span class="title function_">iic_init</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    GPIO_InitTypeDef GPIO_Initure;</span><br><span class="line">    __HAL_RCC_GPIOB_CLK_ENABLE(); <span class="comment">//使能 GPIOB 时钟</span></span><br><span class="line">    <span class="comment">//PH4,5 初始化设置</span></span><br><span class="line">    GPIO_Initure.Pin=GPIO_PIN_6|GPIO_PIN_7;</span><br><span class="line">    GPIO_Initure.Mode=GPIO_MODE_OUTPUT_PP; <span class="comment">//推挽输出</span></span><br><span class="line">    GPIO_Initure.Pull=GPIO_PULLUP; <span class="comment">//上拉</span></span><br><span class="line">    GPIO_Initure.Speed=GPIO_SPEED_FREQ_HIGH;<span class="comment">//高速</span></span><br><span class="line">    HAL_GPIO_Init(GPIOB,&amp;GPIO_Initure);</span><br><span class="line">    IIC_SDA = <span class="number">1</span>;</span><br><span class="line">    IIC_SCL = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//产生IIC起始信号</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">iic_start</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    SDA_OUT();     <span class="comment">//sda线输出</span></span><br><span class="line">    IIC_SDA=<span class="number">1</span>;</span><br><span class="line">    IIC_SCL=<span class="number">1</span>;</span><br><span class="line">    delay_us(<span class="number">4</span>);</span><br><span class="line">    IIC_SDA=<span class="number">0</span>;<span class="comment">//START:when CLK is high,DATA change form high to low</span></span><br><span class="line">    delay_us(<span class="number">4</span>);</span><br><span class="line">    IIC_SCL=<span class="number">0</span>;<span class="comment">//钳住I2C总线，准备发送或接收数据</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//产生IIC停止信号</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">iic_stop</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    SDA_OUT();<span class="comment">//sda线输出</span></span><br><span class="line">    IIC_SCL=<span class="number">1</span>;</span><br><span class="line">    IIC_SCL=<span class="number">0</span>;</span><br><span class="line">    IIC_SDA=<span class="number">0</span>;<span class="comment">//STOP:when CLK is high DATA change form low to high</span></span><br><span class="line">    delay_us(<span class="number">4</span>);</span><br><span class="line">    IIC_SCL=<span class="number">1</span>;</span><br><span class="line">    IIC_SDA=<span class="number">1</span>;<span class="comment">//发送I2C总线结束信号</span></span><br><span class="line">    delay_us(<span class="number">4</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//等待应答信号到来</span></span><br><span class="line"><span class="comment">//返回值：1，接收应答失败</span></span><br><span class="line"><span class="comment">//        0，接收应答成功</span></span><br><span class="line">u8 <span class="title function_">iic_wait_ack</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    u8 ucErrTime=<span class="number">0</span>;</span><br><span class="line">    SDA_IN();      <span class="comment">//SDA设置为输入</span></span><br><span class="line">    IIC_SDA=<span class="number">1</span>;delay_us(<span class="number">1</span>);</span><br><span class="line">    IIC_SCL=<span class="number">1</span>;delay_us(<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">while</span>(READ_SDA)</span><br><span class="line">    &#123;</span><br><span class="line">        ucErrTime++;</span><br><span class="line">        <span class="keyword">if</span>(ucErrTime&gt;<span class="number">250</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            iic_stop();</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    IIC_SCL=<span class="number">0</span>;<span class="comment">//时钟输出0</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//产生ACK应答</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">iic_ack</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    IIC_SCL=<span class="number">0</span>;</span><br><span class="line">    SDA_OUT();</span><br><span class="line">    IIC_SDA=<span class="number">0</span>;</span><br><span class="line">    delay_us(<span class="number">2</span>);</span><br><span class="line">    IIC_SCL=<span class="number">1</span>;</span><br><span class="line">    delay_us(<span class="number">2</span>);</span><br><span class="line">    IIC_SCL=<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//不产生ACK应答</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">iic_nack</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    IIC_SCL=<span class="number">0</span>;</span><br><span class="line">    SDA_OUT();</span><br><span class="line">    IIC_SDA=<span class="number">1</span>;</span><br><span class="line">    delay_us(<span class="number">2</span>);</span><br><span class="line">    IIC_SCL=<span class="number">1</span>;</span><br><span class="line">    delay_us(<span class="number">2</span>);</span><br><span class="line">    IIC_SCL=<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//IIC发送一个字节</span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">iic_send_byte</span><span class="params">(u8 txd)</span></span><br><span class="line">&#123;</span><br><span class="line">    u8 t;</span><br><span class="line">    SDA_OUT();</span><br><span class="line">    IIC_SCL=<span class="number">0</span>;<span class="comment">//拉低时钟开始数据传输</span></span><br><span class="line">    <span class="keyword">for</span>(t=<span class="number">0</span>;t&lt;<span class="number">8</span>;t++)</span><br><span class="line">    &#123;</span><br><span class="line">        IIC_SDA=(txd&amp;<span class="number">0x80</span>)&gt;&gt;<span class="number">7</span>;</span><br><span class="line">        txd&lt;&lt;=<span class="number">1</span>;</span><br><span class="line">        delay_us(<span class="number">2</span>);   <span class="comment">//对TEA5767这三个延时都是必须的</span></span><br><span class="line">        IIC_SCL=<span class="number">1</span>;</span><br><span class="line">        delay_us(<span class="number">2</span>);</span><br><span class="line">        IIC_SCL=<span class="number">0</span>;</span><br><span class="line">        delay_us(<span class="number">2</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//读1个字节，ack=1时，发送ACK，ack=0，发送nACK</span></span><br><span class="line">u8 <span class="title function_">iic_read_byte</span><span class="params">(<span class="type">unsigned</span> <span class="type">char</span> ack)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">char</span> i,receive=<span class="number">0</span>;</span><br><span class="line">    SDA_IN();<span class="comment">//SDA设置为输入</span></span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;<span class="number">8</span>;i++ )</span><br><span class="line">    &#123;</span><br><span class="line">        IIC_SCL=<span class="number">0</span>;</span><br><span class="line">        delay_us(<span class="number">2</span>);</span><br><span class="line">        IIC_SCL=<span class="number">1</span>;</span><br><span class="line">        receive&lt;&lt;=<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span>(READ_SDA)receive++;</span><br><span class="line">        delay_us(<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (!ack)</span><br><span class="line">        iic_nack();<span class="comment">//发送nACK</span></span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        iic_ack(); <span class="comment">//发送ACK</span></span><br><span class="line">    <span class="keyword">return</span> receive;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样，我们就有了大致的IIC拼图了，可以开始搭积木了。</p><h2 id="8-3-认识oled">8.3 认识OLED</h2><p>OLED，即有机发光二极管（Organic Light-Emitting Diode），又称为有机电激光显示（Organic Electroluminesence Display， OELD）。OLED 由于同时具备自发光，不需背光源、对比度高、厚度薄、视角广、反应速度快、可用于挠曲性面板、使用温度范围广、构造及制程较简单等优异之特性，被认为是下一代的平面显示器新兴应用技术。<br>LCD 都需要背光，而 OLED 不需要，因为它是自发光的。这样同样的显示，OLED 效果要来得好一些。以目前的技术，OLED 的尺寸还难以大型化，但是分辨率确可以做到很高。<br><img src="https://img-blog.csdnimg.cn/0c8d4a08e31d40d3a6d8d87bc1f428ba.jpeg" alt="请添加图片描述"><br>笔者使用的OLED的驱动IC型号为SSD1306</p><p>SSD1306 的显存总共为 128*64bit 大小，SSD1306 将这些显存分为了 8 页<br><img src="https://img-blog.csdnimg.cn/75388255e64245479f0734fe41dc570f.png" alt="请添加图片描述"><br>可以看出，SSD1306 的每页包含了 128 个字节（=128*8bit），总共 8 页，这样刚好是 128x64 的点阵大小。</p><p>因为每次写入都是按字节写入的，这就存在一个问题，如果我们使用只写方式操作模块，那么，每次要写 8 个点，这样，我们在画点的时候，就必须把要设置的点所在的字节的每个位都搞清楚当前的状态（0/1？），否则写入的数据就会覆盖掉之前的状态，结果就是有些不需要显示的点，显示出来了，或者该显示的没有显示了。这个问题在能读的模式下，我们可以先读出来要写入的那个字节，得到当前状况，在修改了要改写的位之后再写进 GRAM(可以理解为显存)，这样就不会影响到之前的状况了。但是这样需要能读 GRAM，对于 4 线 SPI 模式/IIC 模式，模块是不支持读的，而且读-&gt;改-&gt;写的方式速度也比较慢。</p><p>所以我们采用的办法是在 STM32F1 的内部建立一个 OLED 的 GRAM（共 128*8 个字节），在每次修改的时候，只是修改 STM32F1 上的 GRAM（实际上就是 SRAM），在修改完了之后，一次性把 STM32F1 上的 GRAM 写入到 OLED 的 GRAM。当然这个方法也有坏处，就是对于那些 SRAM 很小的单片机（比如 51 系列）就比较麻烦了，算是空间换时间了。</p><p>OLED寻址参考：<br><a href="https://blog.csdn.net/wanghualei_bull/article/details/82154031">STM32学习笔记—OLED页寻址方式</a></p><p><strong>SSD1306常用命令：</strong>：</p><p><img src="https://img-blog.csdnimg.cn/5ab4432e6cec4c028b54c861e96f39e0.png#pic_center" alt=""></p><ul><li>第一个命令为 0X81，用于设置对比度的，这个命令包含了两个字节，第一个 0X81 为命令，随后发送的一个字节为要设置的对比度的值。这个值设置得越大屏幕就越亮。</li><li>第二个命令为 0XAE/0XAF。0XAE 为关闭显示命令；0XAF 为开启显示命令。</li><li>第三个命令为 0X8D，该指令也包含 2 个字节，第一个为命令字，第二个为设置值，第二个字节的 BIT2 表示电荷泵的开关状态，该位为 1，则开启电荷泵，为 0 则关闭。在模块初始化的时候，这个必须要开启，否则是看不到屏幕显示的。</li><li>第四个命令为 0XB0~B7，该命令用于设置页地址，其低三位的值对应着 GRAM 的页地址。</li><li>第五个指令为 0X00~0X0F，该指令用于设置显示时的起始列地址低四位。</li><li>第六个指令为 0X10~0X1F，该指令用于设置显示时的起始列地址高四位。</li></ul><p>详细的可以参考：<br><a href="https://blog.csdn.net/keep_moving_tzw/article/details/104877286">【STM32F103笔记】9、I2C通信——玩转OLED（OLED命令详解）</a></p><p><strong>驱动OLED流程：</strong></p><ol><li>复位SSD1306(有引出复位引脚就复位就行了)</li><li>驱动IC初始化代码(命令数组，就是一些列的发送命令，手册上一般会提供厂家的推荐设置)</li><li>开启显示</li><li>清0显存</li><li>开始显示</li></ol><h2 id="8-4-画上一个点">8.4 画上一个点</h2><p>先完成最重要的一步，搭建通信之桥：<br>用我们之前写好的IIC拼图搭建好模型：</p><ol><li>IIC开始信号</li><li>发送从机地址(7位)+读写位(1/0)</li><li>等待相应</li><li>发送从机寄存器地址</li><li>等待响应</li><li>发送数据</li><li>等待响应</li><li>…（发送从机地址+读写位，开始新的一轮）</li><li>直到发送结束地址</li></ol><p>定义一些宏：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> OLED_ADDRESS 0x78</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> OLED_CMD  0<span class="comment">//写命令</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> OLED_DATA 1<span class="comment">//写数据</span></span></span><br></pre></td></tr></table></figure><p>SSD的从机地址是0x78</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//向SSD1306写入一个字节。</span></span><br><span class="line"><span class="comment">//dat:要写入的数据/命令</span></span><br><span class="line"><span class="comment">//cmd:数据/命令标志 0,表示命令;1,表示数据;</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">oled_wr_byte</span><span class="params">(u8 dat,u8 cmd)</span></span><br><span class="line">&#123;</span><br><span class="line">    iic_start();</span><br><span class="line">    iic_send_byte(OLED_ADDRESS);</span><br><span class="line">    iic_wait_ack();</span><br><span class="line">    <span class="keyword">if</span>(cmd == OLED_CMD)</span><br><span class="line">        iic_send_byte(<span class="number">0x00</span>);</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(cmd == OLED_DATA)</span><br><span class="line">        iic_send_byte(<span class="number">0x40</span>);</span><br><span class="line">    iic_wait_ack();</span><br><span class="line">    iic_send_byte(dat);</span><br><span class="line">    iic_wait_ack();</span><br><span class="line">    iic_stop();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>0x00</code>指令寄存器<br><code>0x40</code>数据寄存器</p><p>这样我们的通讯之桥就建好了</p><p>接着编写初始化函数：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">oled_init</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    iic_init();</span><br><span class="line">    oled_wr_byte(<span class="number">0xAE</span>,OLED_CMD); <span class="comment">//关闭显示</span></span><br><span class="line">    oled_wr_byte(<span class="number">0xD5</span>,OLED_CMD); <span class="comment">//设置时钟分频因子,震荡频率</span></span><br><span class="line">    oled_wr_byte(<span class="number">80</span>,OLED_CMD);   <span class="comment">//[3:0],分频因子;[7:4],震荡频率</span></span><br><span class="line">    oled_wr_byte(<span class="number">0xA8</span>,OLED_CMD); <span class="comment">//设置驱动路数</span></span><br><span class="line">    oled_wr_byte(<span class="number">0X3F</span>,OLED_CMD); <span class="comment">//默认0X3F(1/64)</span></span><br><span class="line">    oled_wr_byte(<span class="number">0xD3</span>,OLED_CMD); <span class="comment">//设置显示偏移</span></span><br><span class="line">    oled_wr_byte(<span class="number">0X00</span>,OLED_CMD); <span class="comment">//默认为0</span></span><br><span class="line">    oled_wr_byte(<span class="number">0x40</span>,OLED_CMD); <span class="comment">//设置显示开始行 [5:0],行数.</span></span><br><span class="line">    oled_wr_byte(<span class="number">0x8D</span>,OLED_CMD); <span class="comment">//电荷泵设置</span></span><br><span class="line">    oled_wr_byte(<span class="number">0x14</span>,OLED_CMD); <span class="comment">//bit2，开启/关闭</span></span><br><span class="line">    oled_wr_byte(<span class="number">0x20</span>,OLED_CMD); <span class="comment">//设置内存地址模式</span></span><br><span class="line">    oled_wr_byte(<span class="number">0x02</span>,OLED_CMD); <span class="comment">//[1:0],00，列地址模式;01，行地址模式;10,页地址模式;默认10;</span></span><br><span class="line">    oled_wr_byte(<span class="number">0xA1</span>,OLED_CMD); <span class="comment">//段重定义设置,bit0:0,0-&gt;0;1,0-&gt;127;</span></span><br><span class="line">    oled_wr_byte(<span class="number">0xC0</span>,OLED_CMD); <span class="comment">//设置COM扫描方向;bit3:0,普通模式;1,重定义模式 COM[N-1]-&gt;COM0;N:驱动路数</span></span><br><span class="line">    oled_wr_byte(<span class="number">0xDA</span>,OLED_CMD); <span class="comment">//设置COM硬件引脚配置</span></span><br><span class="line">    oled_wr_byte(<span class="number">0x12</span>,OLED_CMD); <span class="comment">//[5:4]配置</span></span><br><span class="line">    oled_wr_byte(<span class="number">0x81</span>,OLED_CMD); <span class="comment">//对比度设置</span></span><br><span class="line">    oled_wr_byte(<span class="number">0xEF</span>,OLED_CMD); <span class="comment">//1~255;默认0X7F (亮度设置,越大越亮)</span></span><br><span class="line">    oled_wr_byte(<span class="number">0xD9</span>,OLED_CMD); <span class="comment">//设置预充电周期</span></span><br><span class="line">    oled_wr_byte(<span class="number">0xf1</span>,OLED_CMD); <span class="comment">//[3:0],PHASE 1;[7:4],PHASE 2;</span></span><br><span class="line">    oled_wr_byte(<span class="number">0xDB</span>,OLED_CMD); <span class="comment">//设置VCOMH 电压倍率</span></span><br><span class="line">    oled_wr_byte(<span class="number">0x30</span>,OLED_CMD); <span class="comment">//[6:4] 000,0.65*vcc;001,0.77*vcc;011,0.83*vcc;</span></span><br><span class="line">    oled_wr_byte(<span class="number">0xA4</span>,OLED_CMD); <span class="comment">//全局显示开启;bit0:1,开启;0,关闭;(白屏/黑屏)</span></span><br><span class="line">    oled_wr_byte(<span class="number">0xA6</span>,OLED_CMD); <span class="comment">//设置显示方式;bit0:1,反相显示;0,正常显示</span></span><br><span class="line">    oled_wr_byte(<span class="number">0xAF</span>,OLED_CMD); <span class="comment">//开启显示</span></span><br><span class="line">    oled_clear();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里的一长串指令都是选择照搬厂家的推荐设置</p><p>接着完成把数组写进显存的函数：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">oled_refresh_gram</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    u8 i,n;</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;<span class="number">8</span>;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        oled_wr_byte (<span class="number">0xb0</span>+i,OLED_CMD);    <span class="comment">//设置页地址（0~7）</span></span><br><span class="line">        oled_wr_byte (<span class="number">0x00</span>,OLED_CMD);      <span class="comment">//设置显示位置—列低地址</span></span><br><span class="line">        oled_wr_byte (<span class="number">0x10</span>,OLED_CMD);      <span class="comment">//设置显示位置—列高地址</span></span><br><span class="line">        <span class="keyword">for</span>(n=<span class="number">0</span>;n&lt;<span class="number">128</span>;n++)oled_wr_byte(OLED_GRAM[n][i],OLED_DATA);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>并实现clear函数：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">oled_clear</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    u8 i,n;</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;<span class="number">8</span>;i++)<span class="keyword">for</span>(n=<span class="number">0</span>;n&lt;<span class="number">128</span>;n++)OLED_GRAM[n][i]=<span class="number">0X00</span>;</span><br><span class="line">    oled_refresh_gram();<span class="comment">//更新显示</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>还有和画点函数 (笔者这里没有将画点函数自动写进显存) ：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//t:1 填充 0,清空</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">oled_draw_point</span><span class="params">(u8 x,u8 y,u8 t)</span></span><br><span class="line">&#123;</span><br><span class="line">    u8 pos,bx,temp=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span>(x&gt;<span class="number">127</span>||y&gt;<span class="number">63</span>)<span class="keyword">return</span>;<span class="comment">//超出范围了.</span></span><br><span class="line">    pos=<span class="number">7</span>-y/<span class="number">8</span>;</span><br><span class="line">    bx=y%<span class="number">8</span>;</span><br><span class="line">    temp=<span class="number">1</span>&lt;&lt;(<span class="number">7</span>-bx);</span><br><span class="line">    <span class="keyword">if</span>(t)OLED_GRAM[x][pos]|=temp;</span><br><span class="line">    <span class="keyword">else</span> OLED_GRAM[x][pos]&amp;=~temp;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当我们能成功画点和清屏，也就是成功征服一块屏幕了。</p><h2 id="8-5-增加功能函数">8.5 增加功能函数</h2><p>不过，平时我们使用屏幕的时候，需要有像显示字符，显示字符串这类的库函数，才能方便我们使用，于是我们再新建一个oledlib.c， 使用取模软件得到字符的字库，存入oledfont.h里。<br>有朋友会问，什么是字库：</p><p>要显示字符，我们先要有字符的点阵数据，ASCII 常用的字符集总共有 95 个，从空格符开始，分别为：</p><blockquote><p>!&quot;#$%&amp;’()*+,-0123456789:;&lt;=&gt;?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[]^_`abcdefghijklmnopqrstuvwxyz{|}~.</p></blockquote><p>我们先要得到这个字符集的点阵数据，这里我们介绍一个款很好的字符提取软件：<br>PCtoLCD。<br><img src="https://img-blog.csdnimg.cn/7dde3efab9ca475990595ec9eddae486.png" alt=""><br>该软件可以提供各种字符，包括汉字（字体和大小都可以自己设置）阵提取，且取模方式可以设置好几种，常用的取模方式，该软件都支持。该软件还支持图形模式，也就是用户可以自己定义图片的大小，然后画图，根据所画的图形再生成点阵数据，这功能在制作图标或图片的时候很有用。<br>我们按我们写入显存顺序的方式取模，，然后把 ASCII 字符集按 12_6大小、16_8 和 24_12 大小取模出来（对应汉字大小为 12_12、16_16 和 24_24，字符的只有汉字的一半大！），保存在 oledfont.h 里面，每个 12_6 的字符占用 12 个字节，每个 16_8 的字符占用16 个字节，每个 24*12 的字符占用 36 个字节。</p><p>oledfont.h （ 在8.6附上全部代码）</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">ifndef</span> __OLEDFONT_H</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __OLEDFONT_H  </span></span><br><span class="line"><span class="comment">//12*12 ASCII字符集点阵</span></span><br><span class="line"><span class="type">const</span> <span class="type">unsigned</span> <span class="type">char</span> oled_asc2_1206[<span class="number">95</span>][<span class="number">12</span>]=&#123;</span><br><span class="line">&#123;<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>&#125;,<span class="comment">/*&quot; &quot;,0*/</span></span><br><span class="line">&#123;<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x3F</span>,<span class="number">0x40</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>&#125;,<span class="comment">/*&quot;!&quot;,1*/</span></span><br><span class="line">&#123;<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x30</span>,<span class="number">0x00</span>,<span class="number">0x40</span>,<span class="number">0x00</span>,<span class="number">0x30</span>,<span class="number">0x00</span>,<span class="number">0x40</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>&#125;,<span class="comment">/*&quot;&quot;&quot;,2*/</span></span><br><span class="line">&#123;<span class="number">0x09</span>,<span class="number">0x00</span>,<span class="number">0x0B</span>,<span class="number">0xC0</span>,<span class="number">0x3D</span>,<span class="number">0x00</span>,<span class="number">0x0B</span>,<span class="number">0xC0</span>,<span class="number">0x3D</span>,<span class="number">0x00</span>,<span class="number">0x09</span>,<span class="number">0x00</span>&#125;,<span class="comment">/*&quot;#&quot;,3*/</span></span><br><span class="line">...<span class="comment">//省略代码</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>提前定义一些宏：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> OLED_FONT_12  12</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> OLED_FONT_16  16</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> OLED_FONT_24  24</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> OLED_MODE_FILLED    1</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> OLED_MODE_NO_FILLED 0</span></span><br></pre></td></tr></table></figure><p>编写功能函数：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//x1,y1,x2,y2 填充区域的对角坐标</span></span><br><span class="line"><span class="comment">//确保x1&lt;=x2;y1&lt;=y2 0&lt;=x1&lt;=127 0&lt;=y1&lt;=63</span></span><br><span class="line"><span class="comment">//dot:0,清空;1,填充</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">oled_fill</span><span class="params">(u8 x1,u8 y1,u8 x2,u8 y2,u8 dot)</span></span><br><span class="line">&#123;</span><br><span class="line">    u8 x,y;</span><br><span class="line">    <span class="keyword">for</span>(x=x1;x&lt;=x2;x++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span>(y=y1;y&lt;=y2;y++)oled_draw_point(x,y,dot);</span><br><span class="line">    &#125;</span><br><span class="line">    oled_refresh_gram();<span class="comment">//更新显示</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//x:0~127</span></span><br><span class="line"><span class="comment">//y:0~63</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">oled_show_char</span><span class="params">(u8 x, u8 y, u8 chr, u8 size, u8 mode)</span></span><br><span class="line">&#123;</span><br><span class="line">    u8 temp,t,t1;</span><br><span class="line">    u8 y0=y;</span><br><span class="line">    u8 csize=(size/<span class="number">8</span>+((size%<span class="number">8</span>)?<span class="number">1</span>:<span class="number">0</span>))*(size/<span class="number">2</span>);<span class="comment">//得到字体一个字符对应点阵集所占的字节数</span></span><br><span class="line">    chr=chr-<span class="string">&#x27; &#x27;</span>;<span class="comment">//得到偏移后的值</span></span><br><span class="line">    <span class="keyword">for</span>(t=<span class="number">0</span>;t&lt;csize;t++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(size==OLED_FONT_12)temp=oled_asc2_1206[chr][t];  <span class="comment">//调用1206字体</span></span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(size==OLED_FONT_16)temp=oled_asc2_1608[chr][t];<span class="comment">//调用1608字体</span></span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(size==OLED_FONT_24)temp=oled_asc2_2412[chr][t];<span class="comment">//调用2412字体</span></span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">return</span>;<span class="comment">//没有的字库</span></span><br><span class="line">        <span class="keyword">for</span>(t1=<span class="number">0</span>;t1&lt;<span class="number">8</span>;t1++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(temp&amp;<span class="number">0x80</span>)oled_draw_point(x,y,mode);</span><br><span class="line">            <span class="keyword">else</span> oled_draw_point(x,y,!mode);</span><br><span class="line">            temp&lt;&lt;=<span class="number">1</span>;</span><br><span class="line">            y++;</span><br><span class="line">            <span class="keyword">if</span>((y-y0)==size)</span><br><span class="line">            &#123;</span><br><span class="line">                y=y0;</span><br><span class="line">                x++;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//m^n函数</span></span><br><span class="line">u32 <span class="title function_">my_pow</span><span class="params">(u8 m,u8 n)</span></span><br><span class="line">&#123;</span><br><span class="line">    u32 result=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span>(n--)result*=m;</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//len :数字的位数</span></span><br><span class="line"><span class="comment">//num:数值(0~4294967295);</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">oled_show_num</span><span class="params">(u8 x,u8 y,u32 num,u8 len,u8 size)</span></span><br><span class="line">&#123;</span><br><span class="line">    u8 t,temp;</span><br><span class="line">    u8 enshow=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(t=<span class="number">0</span>;t&lt;len;t++)</span><br><span class="line">    &#123;</span><br><span class="line">        temp=(num/my_pow(<span class="number">10</span>,len-t<span class="number">-1</span>))%<span class="number">10</span>;</span><br><span class="line">        <span class="keyword">if</span>(enshow==<span class="number">0</span>&amp;&amp;t&lt;(len<span class="number">-1</span>))</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(temp==<span class="number">0</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                oled_show_char(x+(size/<span class="number">2</span>)*t,y,<span class="string">&#x27; &#x27;</span>,size,<span class="number">1</span>);</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;<span class="keyword">else</span> enshow=<span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        oled_show_char(x+(size/<span class="number">2</span>)*t,y,temp+<span class="string">&#x27;0&#x27;</span>,size,<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">oled_show_string</span><span class="params">(u8 x,u8 y,<span class="type">const</span> u8 *p,u8 size)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">while</span>((*p&lt;=<span class="string">&#x27;~&#x27;</span>)&amp;&amp;(*p&gt;=<span class="string">&#x27; &#x27;</span>))<span class="comment">//判断是不是非法字符!</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(x&gt;(<span class="number">128</span>-(size/<span class="number">2</span>)))&#123;x=<span class="number">0</span>;y+=size;&#125;</span><br><span class="line">        <span class="keyword">if</span>(y&gt;(<span class="number">64</span>-size))&#123;y=x=<span class="number">0</span>;oled_clear();&#125;</span><br><span class="line">        oled_show_char(x,y,*p,size,<span class="number">1</span>);</span><br><span class="line">        x+=size/<span class="number">2</span>;</span><br><span class="line">        p++;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="8-6-用c语言实现默认参数">8.6 用C语言实现默认参数</h2><p>有时候，我们不想更改默认的字体，但是每次都要填入参数，实在比较麻烦，于是，我们可以借鉴高级语言中的默认参数来解决这个问题。</p><p><a href="https://blog.csdn.net/Bluenapa/article/details/123527425">C语言如何定义带“默认参数”的函数？</a></p><p>C语言自然没有支持这种需求的原生语法，但是为了实现这样的目的，可以定义下面这个结构体，请看相关C语言代码：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line">    <span class="type">int</span> i;</span><br><span class="line">    <span class="type">double</span> x;</span><br><span class="line">&#125; f_args;</span><br></pre></td></tr></table></figure><p>接着，定义 f_base() 函数，它的C语言代码实现和 f() 是一样的，目的是让 f_base() 函数具有期望的 f() 函数功能。然后再定义一个函数将 f_base() 封装，相关C语言代码如下，请看：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">double</span> <span class="title function_">var_f</span><span class="params">(f_args in)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> i_out = in.i ? in.i : <span class="number">8</span>;</span><br><span class="line">    <span class="type">double</span> x_out = in.x ? in.x : <span class="number">3.14</span>;</span><br><span class="line">    <span class="keyword">return</span> f_base(i_out, x_out);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>显然，从上述C语言代码来看，var_f() 函数实现了默认参数的功能。现在再定义一个带可变参数的宏，这样一来，调用者就不必知道结构体 f_args 的结构了：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> f(...) var_f((f_args)&#123;__VA_ARGS__&#125;)</span></span><br></pre></td></tr></table></figure><p>改写我们的OLED驱动，<br>最后附上完整的OLED驱动代码：</p><p>oled.h</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// Created by Whisky on 2023/1/11.</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">ifndef</span> HELLOWORLD_OLED_H</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> HELLOWORLD_OLED_H</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;main.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> OLED_ADDRESS 0x78</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> OLED_CMD  0<span class="comment">//写命令</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> OLED_DATA 1<span class="comment">//写数据</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> OLED_FONT_12  12</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> OLED_FONT_16  16</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> OLED_FONT_24  24</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> OLED_MODE_FILLED    1</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> OLED_MODE_NO_FILLED 0</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line">    u8 size;</span><br><span class="line">    u8 mode;</span><br><span class="line">&#125; oled_args;</span><br><span class="line"></span><br><span class="line"><span class="keyword">extern</span> oled_args oled_painter;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> oled_show_char(x, y, chr, ...) _oled_show_char(x, y, chr, (oled_args)&#123;__VA_ARGS__&#125;)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> oled_show_num(x, y, num, len, ...) _oled_show_num(x, y, num, len, (oled_args)&#123;__VA_ARGS__&#125;)</span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">oled_init</span><span class="params">(<span class="type">void</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">oled_draw_point</span><span class="params">(u8 x,u8 y,u8 t)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">oled_refresh_gram</span><span class="params">()</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">oled_clear</span><span class="params">(<span class="type">void</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">oled_display_on</span><span class="params">(<span class="type">void</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">oled_display_off</span><span class="params">(<span class="type">void</span>)</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">oled_fill</span><span class="params">(u8 x1,u8 y1,u8 x2,u8 y2,u8 dot)</span>;</span><br><span class="line"><span class="type">void</span> _oled_show_char(u8 x, u8 y, u8 chr, oled_args in);</span><br><span class="line"><span class="type">void</span> _oled_show_num(u8 x,u8 y,u32 num,u8 len, oled_args in);</span><br><span class="line"><span class="type">void</span> <span class="title function_">oled_show_string</span><span class="params">(u8 x,u8 y,<span class="type">const</span> u8 *p)</span>;</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span> <span class="comment">//HELLOWORLD_OLED_H</span></span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>oled.c</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// Created by Whisky on 2023/1/11.</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;oled.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;myiic.h&quot;</span></span></span><br><span class="line"></span><br><span class="line">oled_args oled_painter;</span><br><span class="line"></span><br><span class="line"><span class="comment">//OLED的显存</span></span><br><span class="line"><span class="comment">//存放格式如下.</span></span><br><span class="line"><span class="comment">//[0]0 1 2 3 ... 127</span></span><br><span class="line"><span class="comment">//[1]0 1 2 3 ... 127</span></span><br><span class="line"><span class="comment">//[2]0 1 2 3 ... 127</span></span><br><span class="line"><span class="comment">//[3]0 1 2 3 ... 127</span></span><br><span class="line"><span class="comment">//[4]0 1 2 3 ... 127</span></span><br><span class="line"><span class="comment">//[5]0 1 2 3 ... 127</span></span><br><span class="line"><span class="comment">//[6]0 1 2 3 ... 127</span></span><br><span class="line"><span class="comment">//[7]0 1 2 3 ... 127</span></span><br><span class="line">u8 OLED_GRAM[<span class="number">128</span>][<span class="number">8</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment">//向SSD1306写入一个字节。</span></span><br><span class="line"><span class="comment">//dat:要写入的数据/命令</span></span><br><span class="line"><span class="comment">//cmd:数据/命令标志 0,表示命令;1,表示数据;</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">oled_wr_byte</span><span class="params">(u8 dat,u8 cmd)</span></span><br><span class="line">&#123;</span><br><span class="line">    iic_start();</span><br><span class="line">    iic_send_byte(OLED_ADDRESS);</span><br><span class="line">    iic_wait_ack();</span><br><span class="line">    <span class="keyword">if</span>(cmd == OLED_CMD)</span><br><span class="line">        iic_send_byte(<span class="number">0x00</span>);</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(cmd == OLED_DATA)</span><br><span class="line">        iic_send_byte(<span class="number">0x40</span>);</span><br><span class="line">    iic_wait_ack();</span><br><span class="line">    iic_send_byte(dat);</span><br><span class="line">    iic_wait_ack();</span><br><span class="line">    iic_stop();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">oled_refresh_gram</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    u8 i,n;</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;<span class="number">8</span>;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        oled_wr_byte (<span class="number">0xb0</span>+i,OLED_CMD);    <span class="comment">//设置页地址（0~7）</span></span><br><span class="line">        oled_wr_byte (<span class="number">0x00</span>,OLED_CMD);      <span class="comment">//设置显示位置—列低地址</span></span><br><span class="line">        oled_wr_byte (<span class="number">0x10</span>,OLED_CMD);      <span class="comment">//设置显示位置—列高地址</span></span><br><span class="line">        <span class="keyword">for</span>(n=<span class="number">0</span>;n&lt;<span class="number">128</span>;n++)oled_wr_byte(OLED_GRAM[n][i],OLED_DATA);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//开启OLED显示</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">oled_display_on</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    oled_wr_byte(<span class="number">0X8D</span>,OLED_CMD);  <span class="comment">//SET DCDC命令</span></span><br><span class="line">    oled_wr_byte(<span class="number">0X14</span>,OLED_CMD);  <span class="comment">//DCDC ON</span></span><br><span class="line">    oled_wr_byte(<span class="number">0XAF</span>,OLED_CMD);  <span class="comment">//DISPLAY ON</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//关闭OLED显示</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">oled_display_off</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    oled_wr_byte(<span class="number">0X8D</span>,OLED_CMD);  <span class="comment">//SET DCDC命令</span></span><br><span class="line">    oled_wr_byte(<span class="number">0X10</span>,OLED_CMD);  <span class="comment">//DCDC OFF</span></span><br><span class="line">    oled_wr_byte(<span class="number">0XAE</span>,OLED_CMD);  <span class="comment">//DISPLAY OFF</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">oled_clear</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    u8 i,n;</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;<span class="number">8</span>;i++)<span class="keyword">for</span>(n=<span class="number">0</span>;n&lt;<span class="number">128</span>;n++)OLED_GRAM[n][i]=<span class="number">0X00</span>;</span><br><span class="line">    oled_refresh_gram();<span class="comment">//更新显示</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//t:1 填充 0,清空</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">oled_draw_point</span><span class="params">(u8 x,u8 y,u8 t)</span></span><br><span class="line">&#123;</span><br><span class="line">    u8 pos,bx,temp=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span>(x&gt;<span class="number">127</span>||y&gt;<span class="number">63</span>)<span class="keyword">return</span>;<span class="comment">//超出范围了.</span></span><br><span class="line">    pos=<span class="number">7</span>-y/<span class="number">8</span>;</span><br><span class="line">    bx=y%<span class="number">8</span>;</span><br><span class="line">    temp=<span class="number">1</span>&lt;&lt;(<span class="number">7</span>-bx);</span><br><span class="line">    <span class="keyword">if</span>(t)OLED_GRAM[x][pos]|=temp;</span><br><span class="line">    <span class="keyword">else</span> OLED_GRAM[x][pos]&amp;=~temp;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">oled_init</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    iic_init();</span><br><span class="line"></span><br><span class="line">    oled_wr_byte(<span class="number">0xAE</span>,OLED_CMD); <span class="comment">//关闭显示</span></span><br><span class="line">    oled_wr_byte(<span class="number">0xD5</span>,OLED_CMD); <span class="comment">//设置时钟分频因子,震荡频率</span></span><br><span class="line">    oled_wr_byte(<span class="number">80</span>,OLED_CMD);   <span class="comment">//[3:0],分频因子;[7:4],震荡频率</span></span><br><span class="line">    oled_wr_byte(<span class="number">0xA8</span>,OLED_CMD); <span class="comment">//设置驱动路数</span></span><br><span class="line">    oled_wr_byte(<span class="number">0X3F</span>,OLED_CMD); <span class="comment">//默认0X3F(1/64)</span></span><br><span class="line">    oled_wr_byte(<span class="number">0xD3</span>,OLED_CMD); <span class="comment">//设置显示偏移</span></span><br><span class="line">    oled_wr_byte(<span class="number">0X00</span>,OLED_CMD); <span class="comment">//默认为0</span></span><br><span class="line">    oled_wr_byte(<span class="number">0x40</span>,OLED_CMD); <span class="comment">//设置显示开始行 [5:0],行数.</span></span><br><span class="line">    oled_wr_byte(<span class="number">0x8D</span>,OLED_CMD); <span class="comment">//电荷泵设置</span></span><br><span class="line">    oled_wr_byte(<span class="number">0x14</span>,OLED_CMD); <span class="comment">//bit2，开启/关闭</span></span><br><span class="line">    oled_wr_byte(<span class="number">0x20</span>,OLED_CMD); <span class="comment">//设置内存地址模式</span></span><br><span class="line">    oled_wr_byte(<span class="number">0x02</span>,OLED_CMD); <span class="comment">//[1:0],00，列地址模式;01，行地址模式;10,页地址模式;默认10;</span></span><br><span class="line">    oled_wr_byte(<span class="number">0xA1</span>,OLED_CMD); <span class="comment">//段重定义设置,bit0:0,0-&gt;0;1,0-&gt;127;</span></span><br><span class="line">    oled_wr_byte(<span class="number">0xC0</span>,OLED_CMD); <span class="comment">//设置COM扫描方向;bit3:0,普通模式;1,重定义模式 COM[N-1]-&gt;COM0;N:驱动路数</span></span><br><span class="line">    oled_wr_byte(<span class="number">0xDA</span>,OLED_CMD); <span class="comment">//设置COM硬件引脚配置</span></span><br><span class="line">    oled_wr_byte(<span class="number">0x12</span>,OLED_CMD); <span class="comment">//[5:4]配置</span></span><br><span class="line">    oled_wr_byte(<span class="number">0x81</span>,OLED_CMD); <span class="comment">//对比度设置</span></span><br><span class="line">    oled_wr_byte(<span class="number">0xEF</span>,OLED_CMD); <span class="comment">//1~255;默认0X7F (亮度设置,越大越亮)</span></span><br><span class="line">    oled_wr_byte(<span class="number">0xD9</span>,OLED_CMD); <span class="comment">//设置预充电周期</span></span><br><span class="line">    oled_wr_byte(<span class="number">0xf1</span>,OLED_CMD); <span class="comment">//[3:0],PHASE 1;[7:4],PHASE 2;</span></span><br><span class="line">    oled_wr_byte(<span class="number">0xDB</span>,OLED_CMD); <span class="comment">//设置VCOMH 电压倍率</span></span><br><span class="line">    oled_wr_byte(<span class="number">0x30</span>,OLED_CMD); <span class="comment">//[6:4] 000,0.65*vcc;001,0.77*vcc;011,0.83*vcc;</span></span><br><span class="line">    oled_wr_byte(<span class="number">0xA4</span>,OLED_CMD); <span class="comment">//全局显示开启;bit0:1,开启;0,关闭;(白屏/黑屏)</span></span><br><span class="line">    oled_wr_byte(<span class="number">0xA6</span>,OLED_CMD); <span class="comment">//设置显示方式;bit0:1,反相显示;0,正常显示</span></span><br><span class="line">    oled_wr_byte(<span class="number">0xAF</span>,OLED_CMD); <span class="comment">//开启显示</span></span><br><span class="line"></span><br><span class="line">    oled_clear();</span><br><span class="line"></span><br><span class="line">    oled_painter.size = OLED_FONT_12;</span><br><span class="line">    oled_painter.mode = OLED_MODE_FILLED;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>oledfont.h</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">ifndef</span> __OLEDFONT_H</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __OLEDFONT_H  </span></span><br><span class="line"><span class="comment">//常用ASCII表</span></span><br><span class="line"><span class="comment">//偏移量32 </span></span><br><span class="line"><span class="comment">//ASCII字符集: !&quot;#$%&amp;&#x27;()*+,-./0123456789:;&lt;=&gt;?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\]^_`abcdefghijklmnopqrstuvwxyz&#123;|&#125;~</span></span><br><span class="line"><span class="comment">//PC2LCD2002取模方式设置：阴码+逐列式+顺向+C51格式</span></span><br><span class="line"><span class="comment">//总共：3个字符集（12*12、16*16和24*24），用户可以自行新增其他分辨率的字符集。</span></span><br><span class="line"><span class="comment">//每个字符所占用的字节数为:(size/8+((size%8)?1:0))*(size/2),其中size:是字库生成时的点阵大小(12/16/24...)</span></span><br><span class="line"> </span><br><span class="line"><span class="comment">//12*12 ASCII字符集点阵</span></span><br><span class="line"><span class="type">const</span> <span class="type">unsigned</span> <span class="type">char</span> oled_asc2_1206[<span class="number">95</span>][<span class="number">12</span>]=&#123;</span><br><span class="line">&#123;<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>&#125;,<span class="comment">/*&quot; &quot;,0*/</span></span><br><span class="line">&#123;<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x3F</span>,<span class="number">0x40</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>&#125;,<span class="comment">/*&quot;!&quot;,1*/</span></span><br><span class="line">&#123;<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x30</span>,<span class="number">0x00</span>,<span class="number">0x40</span>,<span class="number">0x00</span>,<span class="number">0x30</span>,<span class="number">0x00</span>,<span class="number">0x40</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>&#125;,<span class="comment">/*&quot;&quot;&quot;,2*/</span></span><br><span class="line">&#123;<span class="number">0x09</span>,<span class="number">0x00</span>,<span class="number">0x0B</span>,<span class="number">0xC0</span>,<span class="number">0x3D</span>,<span class="number">0x00</span>,<span class="number">0x0B</span>,<span class="number">0xC0</span>,<span class="number">0x3D</span>,<span class="number">0x00</span>,<span class="number">0x09</span>,<span class="number">0x00</span>&#125;,<span class="comment">/*&quot;#&quot;,3*/</span></span><br><span class="line">&#123;<span class="number">0x18</span>,<span class="number">0xC0</span>,<span class="number">0x24</span>,<span class="number">0x40</span>,<span class="number">0x7F</span>,<span class="number">0xE0</span>,<span class="number">0x22</span>,<span class="number">0x40</span>,<span class="number">0x31</span>,<span class="number">0x80</span>,<span class="number">0x00</span>,<span class="number">0x00</span>&#125;,<span class="comment">/*&quot;$&quot;,4*/</span></span><br><span class="line">&#123;<span class="number">0x18</span>,<span class="number">0x00</span>,<span class="number">0x24</span>,<span class="number">0xC0</span>,<span class="number">0x1B</span>,<span class="number">0x00</span>,<span class="number">0x0D</span>,<span class="number">0x80</span>,<span class="number">0x32</span>,<span class="number">0x40</span>,<span class="number">0x01</span>,<span class="number">0x80</span>&#125;,<span class="comment">/*&quot;%&quot;,5*/</span></span><br><span class="line">&#123;<span class="number">0x03</span>,<span class="number">0x80</span>,<span class="number">0x1C</span>,<span class="number">0x40</span>,<span class="number">0x27</span>,<span class="number">0x40</span>,<span class="number">0x1C</span>,<span class="number">0x80</span>,<span class="number">0x07</span>,<span class="number">0x40</span>,<span class="number">0x00</span>,<span class="number">0x40</span>&#125;,<span class="comment">/*&quot;&amp;&quot;,6*/</span></span><br><span class="line">&#123;<span class="number">0x10</span>,<span class="number">0x00</span>,<span class="number">0x60</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>&#125;,<span class="comment">/*&quot;&#x27;&quot;,7*/</span></span><br><span class="line">&#123;<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x1F</span>,<span class="number">0x80</span>,<span class="number">0x20</span>,<span class="number">0x40</span>,<span class="number">0x40</span>,<span class="number">0x20</span>&#125;,<span class="comment">/*&quot;(&quot;,8*/</span></span><br><span class="line">&#123;<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x40</span>,<span class="number">0x20</span>,<span class="number">0x20</span>,<span class="number">0x40</span>,<span class="number">0x1F</span>,<span class="number">0x80</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>&#125;,<span class="comment">/*&quot;)&quot;,9*/</span></span><br><span class="line">&#123;<span class="number">0x09</span>,<span class="number">0x00</span>,<span class="number">0x06</span>,<span class="number">0x00</span>,<span class="number">0x1F</span>,<span class="number">0x80</span>,<span class="number">0x06</span>,<span class="number">0x00</span>,<span class="number">0x09</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>&#125;,<span class="comment">/*&quot;*&quot;,10*/</span></span><br><span class="line">&#123;<span class="number">0x04</span>,<span class="number">0x00</span>,<span class="number">0x04</span>,<span class="number">0x00</span>,<span class="number">0x3F</span>,<span class="number">0x80</span>,<span class="number">0x04</span>,<span class="number">0x00</span>,<span class="number">0x04</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>&#125;,<span class="comment">/*&quot;+&quot;,11*/</span></span><br><span class="line">&#123;<span class="number">0x00</span>,<span class="number">0x10</span>,<span class="number">0x00</span>,<span class="number">0x60</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>&#125;,<span class="comment">/*&quot;,&quot;,12*/</span></span><br><span class="line">&#123;<span class="number">0x04</span>,<span class="number">0x00</span>,<span class="number">0x04</span>,<span class="number">0x00</span>,<span class="number">0x04</span>,<span class="number">0x00</span>,<span class="number">0x04</span>,<span class="number">0x00</span>,<span class="number">0x04</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>&#125;,<span class="comment">/*&quot;-&quot;,13*/</span></span><br><span class="line">&#123;<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x40</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>&#125;,<span class="comment">/*&quot;.&quot;,14*/</span></span><br><span class="line">&#123;<span class="number">0x00</span>,<span class="number">0x20</span>,<span class="number">0x01</span>,<span class="number">0xC0</span>,<span class="number">0x06</span>,<span class="number">0x00</span>,<span class="number">0x38</span>,<span class="number">0x00</span>,<span class="number">0x40</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>&#125;,<span class="comment">/*&quot;/&quot;,15*/</span></span><br><span class="line">&#123;<span class="number">0x1F</span>,<span class="number">0x80</span>,<span class="number">0x20</span>,<span class="number">0x40</span>,<span class="number">0x20</span>,<span class="number">0x40</span>,<span class="number">0x20</span>,<span class="number">0x40</span>,<span class="number">0x1F</span>,<span class="number">0x80</span>,<span class="number">0x00</span>,<span class="number">0x00</span>&#125;,<span class="comment">/*&quot;0&quot;,16*/</span></span><br><span class="line">&#123;<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x10</span>,<span class="number">0x40</span>,<span class="number">0x3F</span>,<span class="number">0xC0</span>,<span class="number">0x00</span>,<span class="number">0x40</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>&#125;,<span class="comment">/*&quot;1&quot;,17*/</span></span><br><span class="line">&#123;<span class="number">0x18</span>,<span class="number">0xC0</span>,<span class="number">0x21</span>,<span class="number">0x40</span>,<span class="number">0x22</span>,<span class="number">0x40</span>,<span class="number">0x24</span>,<span class="number">0x40</span>,<span class="number">0x18</span>,<span class="number">0x40</span>,<span class="number">0x00</span>,<span class="number">0x00</span>&#125;,<span class="comment">/*&quot;2&quot;,18*/</span></span><br><span class="line">&#123;<span class="number">0x10</span>,<span class="number">0x80</span>,<span class="number">0x20</span>,<span class="number">0x40</span>,<span class="number">0x24</span>,<span class="number">0x40</span>,<span class="number">0x24</span>,<span class="number">0x40</span>,<span class="number">0x1B</span>,<span class="number">0x80</span>,<span class="number">0x00</span>,<span class="number">0x00</span>&#125;,<span class="comment">/*&quot;3&quot;,19*/</span></span><br><span class="line">&#123;<span class="number">0x02</span>,<span class="number">0x00</span>,<span class="number">0x0D</span>,<span class="number">0x00</span>,<span class="number">0x11</span>,<span class="number">0x00</span>,<span class="number">0x3F</span>,<span class="number">0xC0</span>,<span class="number">0x01</span>,<span class="number">0x40</span>,<span class="number">0x00</span>,<span class="number">0x00</span>&#125;,<span class="comment">/*&quot;4&quot;,20*/</span></span><br><span class="line">&#123;<span class="number">0x3C</span>,<span class="number">0x80</span>,<span class="number">0x24</span>,<span class="number">0x40</span>,<span class="number">0x24</span>,<span class="number">0x40</span>,<span class="number">0x24</span>,<span class="number">0x40</span>,<span class="number">0x23</span>,<span class="number">0x80</span>,<span class="number">0x00</span>,<span class="number">0x00</span>&#125;,<span class="comment">/*&quot;5&quot;,21*/</span></span><br><span class="line">&#123;<span class="number">0x1F</span>,<span class="number">0x80</span>,<span class="number">0x24</span>,<span class="number">0x40</span>,<span class="number">0x24</span>,<span class="number">0x40</span>,<span class="number">0x34</span>,<span class="number">0x40</span>,<span class="number">0x03</span>,<span class="number">0x80</span>,<span class="number">0x00</span>,<span class="number">0x00</span>&#125;,<span class="comment">/*&quot;6&quot;,22*/</span></span><br><span class="line">&#123;<span class="number">0x30</span>,<span class="number">0x00</span>,<span class="number">0x20</span>,<span class="number">0x00</span>,<span class="number">0x27</span>,<span class="number">0xC0</span>,<span class="number">0x38</span>,<span class="number">0x00</span>,<span class="number">0x20</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>&#125;,<span class="comment">/*&quot;7&quot;,23*/</span></span><br><span class="line">&#123;<span class="number">0x1B</span>,<span class="number">0x80</span>,<span class="number">0x24</span>,<span class="number">0x40</span>,<span class="number">0x24</span>,<span class="number">0x40</span>,<span class="number">0x24</span>,<span class="number">0x40</span>,<span class="number">0x1B</span>,<span class="number">0x80</span>,<span class="number">0x00</span>,<span class="number">0x00</span>&#125;,<span class="comment">/*&quot;8&quot;,24*/</span></span><br><span class="line">&#123;<span class="number">0x1C</span>,<span class="number">0x00</span>,<span class="number">0x22</span>,<span class="number">0xC0</span>,<span class="number">0x22</span>,<span class="number">0x40</span>,<span class="number">0x22</span>,<span class="number">0x40</span>,<span class="number">0x1F</span>,<span class="number">0x80</span>,<span class="number">0x00</span>,<span class="number">0x00</span>&#125;,<span class="comment">/*&quot;9&quot;,25*/</span></span><br><span class="line">&#123;<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x08</span>,<span class="number">0x40</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>&#125;,<span class="comment">/*&quot;:&quot;,26*/</span></span><br><span class="line">&#123;<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x04</span>,<span class="number">0x60</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>&#125;,<span class="comment">/*&quot;;&quot;,27*/</span></span><br><span class="line">&#123;<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x04</span>,<span class="number">0x00</span>,<span class="number">0x0A</span>,<span class="number">0x00</span>,<span class="number">0x11</span>,<span class="number">0x00</span>,<span class="number">0x20</span>,<span class="number">0x80</span>,<span class="number">0x40</span>,<span class="number">0x40</span>&#125;,<span class="comment">/*&quot;&lt;&quot;,28*/</span></span><br><span class="line">&#123;<span class="number">0x09</span>,<span class="number">0x00</span>,<span class="number">0x09</span>,<span class="number">0x00</span>,<span class="number">0x09</span>,<span class="number">0x00</span>,<span class="number">0x09</span>,<span class="number">0x00</span>,<span class="number">0x09</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>&#125;,<span class="comment">/*&quot;=&quot;,29*/</span></span><br><span class="line">&#123;<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x40</span>,<span class="number">0x40</span>,<span class="number">0x20</span>,<span class="number">0x80</span>,<span class="number">0x11</span>,<span class="number">0x00</span>,<span class="number">0x0A</span>,<span class="number">0x00</span>,<span class="number">0x04</span>,<span class="number">0x00</span>&#125;,<span class="comment">/*&quot;&gt;&quot;,30*/</span></span><br><span class="line">&#123;<span class="number">0x18</span>,<span class="number">0x00</span>,<span class="number">0x20</span>,<span class="number">0x00</span>,<span class="number">0x23</span>,<span class="number">0x40</span>,<span class="number">0x24</span>,<span class="number">0x00</span>,<span class="number">0x18</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>&#125;,<span class="comment">/*&quot;?&quot;,31*/</span></span><br><span class="line">&#123;<span class="number">0x1F</span>,<span class="number">0x80</span>,<span class="number">0x20</span>,<span class="number">0x40</span>,<span class="number">0x27</span>,<span class="number">0x40</span>,<span class="number">0x29</span>,<span class="number">0x40</span>,<span class="number">0x1F</span>,<span class="number">0x40</span>,<span class="number">0x00</span>,<span class="number">0x00</span>&#125;,<span class="comment">/*&quot;@&quot;,32*/</span></span><br><span class="line">&#123;<span class="number">0x00</span>,<span class="number">0x40</span>,<span class="number">0x07</span>,<span class="number">0xC0</span>,<span class="number">0x39</span>,<span class="number">0x00</span>,<span class="number">0x0F</span>,<span class="number">0x00</span>,<span class="number">0x01</span>,<span class="number">0xC0</span>,<span class="number">0x00</span>,<span class="number">0x40</span>&#125;,<span class="comment">/*&quot;A&quot;,33*/</span></span><br><span class="line">&#123;<span class="number">0x20</span>,<span class="number">0x40</span>,<span class="number">0x3F</span>,<span class="number">0xC0</span>,<span class="number">0x24</span>,<span class="number">0x40</span>,<span class="number">0x24</span>,<span class="number">0x40</span>,<span class="number">0x1B</span>,<span class="number">0x80</span>,<span class="number">0x00</span>,<span class="number">0x00</span>&#125;,<span class="comment">/*&quot;B&quot;,34*/</span></span><br><span class="line">&#123;<span class="number">0x1F</span>,<span class="number">0x80</span>,<span class="number">0x20</span>,<span class="number">0x40</span>,<span class="number">0x20</span>,<span class="number">0x40</span>,<span class="number">0x20</span>,<span class="number">0x40</span>,<span class="number">0x30</span>,<span class="number">0x80</span>,<span class="number">0x00</span>,<span class="number">0x00</span>&#125;,<span class="comment">/*&quot;C&quot;,35*/</span></span><br><span class="line">&#123;<span class="number">0x20</span>,<span class="number">0x40</span>,<span class="number">0x3F</span>,<span class="number">0xC0</span>,<span class="number">0x20</span>,<span class="number">0x40</span>,<span class="number">0x20</span>,<span class="number">0x40</span>,<span class="number">0x1F</span>,<span class="number">0x80</span>,<span class="number">0x00</span>,<span class="number">0x00</span>&#125;,<span class="comment">/*&quot;D&quot;,36*/</span></span><br><span class="line">&#123;<span class="number">0x20</span>,<span class="number">0x40</span>,<span class="number">0x3F</span>,<span class="number">0xC0</span>,<span class="number">0x24</span>,<span class="number">0x40</span>,<span class="number">0x2E</span>,<span class="number">0x40</span>,<span class="number">0x30</span>,<span class="number">0xC0</span>,<span class="number">0x00</span>,<span class="number">0x00</span>&#125;,<span class="comment">/*&quot;E&quot;,37*/</span></span><br><span class="line">&#123;<span class="number">0x20</span>,<span class="number">0x40</span>,<span class="number">0x3F</span>,<span class="number">0xC0</span>,<span class="number">0x24</span>,<span class="number">0x40</span>,<span class="number">0x2E</span>,<span class="number">0x00</span>,<span class="number">0x30</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>&#125;,<span class="comment">/*&quot;F&quot;,38*/</span></span><br><span class="line">&#123;<span class="number">0x0F</span>,<span class="number">0x00</span>,<span class="number">0x10</span>,<span class="number">0x80</span>,<span class="number">0x20</span>,<span class="number">0x40</span>,<span class="number">0x22</span>,<span class="number">0x40</span>,<span class="number">0x33</span>,<span class="number">0x80</span>,<span class="number">0x02</span>,<span class="number">0x00</span>&#125;,<span class="comment">/*&quot;G&quot;,39*/</span></span><br><span class="line">&#123;<span class="number">0x20</span>,<span class="number">0x40</span>,<span class="number">0x3F</span>,<span class="number">0xC0</span>,<span class="number">0x04</span>,<span class="number">0x00</span>,<span class="number">0x04</span>,<span class="number">0x00</span>,<span class="number">0x3F</span>,<span class="number">0xC0</span>,<span class="number">0x20</span>,<span class="number">0x40</span>&#125;,<span class="comment">/*&quot;H&quot;,40*/</span></span><br><span class="line">&#123;<span class="number">0x20</span>,<span class="number">0x40</span>,<span class="number">0x20</span>,<span class="number">0x40</span>,<span class="number">0x3F</span>,<span class="number">0xC0</span>,<span class="number">0x20</span>,<span class="number">0x40</span>,<span class="number">0x20</span>,<span class="number">0x40</span>,<span class="number">0x00</span>,<span class="number">0x00</span>&#125;,<span class="comment">/*&quot;I&quot;,41*/</span></span><br><span class="line">&#123;<span class="number">0x00</span>,<span class="number">0x60</span>,<span class="number">0x20</span>,<span class="number">0x20</span>,<span class="number">0x20</span>,<span class="number">0x20</span>,<span class="number">0x3F</span>,<span class="number">0xC0</span>,<span class="number">0x20</span>,<span class="number">0x00</span>,<span class="number">0x20</span>,<span class="number">0x00</span>&#125;,<span class="comment">/*&quot;J&quot;,42*/</span></span><br><span class="line">&#123;<span class="number">0x20</span>,<span class="number">0x40</span>,<span class="number">0x3F</span>,<span class="number">0xC0</span>,<span class="number">0x24</span>,<span class="number">0x40</span>,<span class="number">0x0B</span>,<span class="number">0x00</span>,<span class="number">0x30</span>,<span class="number">0xC0</span>,<span class="number">0x20</span>,<span class="number">0x40</span>&#125;,<span class="comment">/*&quot;K&quot;,43*/</span></span><br><span class="line">&#123;<span class="number">0x20</span>,<span class="number">0x40</span>,<span class="number">0x3F</span>,<span class="number">0xC0</span>,<span class="number">0x20</span>,<span class="number">0x40</span>,<span class="number">0x00</span>,<span class="number">0x40</span>,<span class="number">0x00</span>,<span class="number">0x40</span>,<span class="number">0x00</span>,<span class="number">0xC0</span>&#125;,<span class="comment">/*&quot;L&quot;,44*/</span></span><br><span class="line">&#123;<span class="number">0x3F</span>,<span class="number">0xC0</span>,<span class="number">0x3C</span>,<span class="number">0x00</span>,<span class="number">0x03</span>,<span class="number">0xC0</span>,<span class="number">0x3C</span>,<span class="number">0x00</span>,<span class="number">0x3F</span>,<span class="number">0xC0</span>,<span class="number">0x00</span>,<span class="number">0x00</span>&#125;,<span class="comment">/*&quot;M&quot;,45*/</span></span><br><span class="line">&#123;<span class="number">0x20</span>,<span class="number">0x40</span>,<span class="number">0x3F</span>,<span class="number">0xC0</span>,<span class="number">0x0C</span>,<span class="number">0x40</span>,<span class="number">0x23</span>,<span class="number">0x00</span>,<span class="number">0x3F</span>,<span class="number">0xC0</span>,<span class="number">0x20</span>,<span class="number">0x00</span>&#125;,<span class="comment">/*&quot;N&quot;,46*/</span></span><br><span class="line">&#123;<span class="number">0x1F</span>,<span class="number">0x80</span>,<span class="number">0x20</span>,<span class="number">0x40</span>,<span class="number">0x20</span>,<span class="number">0x40</span>,<span class="number">0x20</span>,<span class="number">0x40</span>,<span class="number">0x1F</span>,<span class="number">0x80</span>,<span class="number">0x00</span>,<span class="number">0x00</span>&#125;,<span class="comment">/*&quot;O&quot;,47*/</span></span><br><span class="line">&#123;<span class="number">0x20</span>,<span class="number">0x40</span>,<span class="number">0x3F</span>,<span class="number">0xC0</span>,<span class="number">0x24</span>,<span class="number">0x40</span>,<span class="number">0x24</span>,<span class="number">0x00</span>,<span class="number">0x18</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>&#125;,<span class="comment">/*&quot;P&quot;,48*/</span></span><br><span class="line">&#123;<span class="number">0x1F</span>,<span class="number">0x80</span>,<span class="number">0x21</span>,<span class="number">0x40</span>,<span class="number">0x21</span>,<span class="number">0x40</span>,<span class="number">0x20</span>,<span class="number">0xE0</span>,<span class="number">0x1F</span>,<span class="number">0xA0</span>,<span class="number">0x00</span>,<span class="number">0x00</span>&#125;,<span class="comment">/*&quot;Q&quot;,49*/</span></span><br><span class="line">&#123;<span class="number">0x20</span>,<span class="number">0x40</span>,<span class="number">0x3F</span>,<span class="number">0xC0</span>,<span class="number">0x24</span>,<span class="number">0x40</span>,<span class="number">0x26</span>,<span class="number">0x00</span>,<span class="number">0x19</span>,<span class="number">0xC0</span>,<span class="number">0x00</span>,<span class="number">0x40</span>&#125;,<span class="comment">/*&quot;R&quot;,50*/</span></span><br><span class="line">&#123;<span class="number">0x18</span>,<span class="number">0xC0</span>,<span class="number">0x24</span>,<span class="number">0x40</span>,<span class="number">0x24</span>,<span class="number">0x40</span>,<span class="number">0x22</span>,<span class="number">0x40</span>,<span class="number">0x31</span>,<span class="number">0x80</span>,<span class="number">0x00</span>,<span class="number">0x00</span>&#125;,<span class="comment">/*&quot;S&quot;,51*/</span></span><br><span class="line">&#123;<span class="number">0x30</span>,<span class="number">0x00</span>,<span class="number">0x20</span>,<span class="number">0x40</span>,<span class="number">0x3F</span>,<span class="number">0xC0</span>,<span class="number">0x20</span>,<span class="number">0x40</span>,<span class="number">0x30</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>&#125;,<span class="comment">/*&quot;T&quot;,52*/</span></span><br><span class="line">&#123;<span class="number">0x20</span>,<span class="number">0x00</span>,<span class="number">0x3F</span>,<span class="number">0x80</span>,<span class="number">0x00</span>,<span class="number">0x40</span>,<span class="number">0x00</span>,<span class="number">0x40</span>,<span class="number">0x3F</span>,<span class="number">0x80</span>,<span class="number">0x20</span>,<span class="number">0x00</span>&#125;,<span class="comment">/*&quot;U&quot;,53*/</span></span><br><span class="line">&#123;<span class="number">0x20</span>,<span class="number">0x00</span>,<span class="number">0x3E</span>,<span class="number">0x00</span>,<span class="number">0x01</span>,<span class="number">0xC0</span>,<span class="number">0x07</span>,<span class="number">0x00</span>,<span class="number">0x38</span>,<span class="number">0x00</span>,<span class="number">0x20</span>,<span class="number">0x00</span>&#125;,<span class="comment">/*&quot;V&quot;,54*/</span></span><br><span class="line">&#123;<span class="number">0x38</span>,<span class="number">0x00</span>,<span class="number">0x07</span>,<span class="number">0xC0</span>,<span class="number">0x3C</span>,<span class="number">0x00</span>,<span class="number">0x07</span>,<span class="number">0xC0</span>,<span class="number">0x38</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>&#125;,<span class="comment">/*&quot;W&quot;,55*/</span></span><br><span class="line">&#123;<span class="number">0x20</span>,<span class="number">0x40</span>,<span class="number">0x39</span>,<span class="number">0xC0</span>,<span class="number">0x06</span>,<span class="number">0x00</span>,<span class="number">0x39</span>,<span class="number">0xC0</span>,<span class="number">0x20</span>,<span class="number">0x40</span>,<span class="number">0x00</span>,<span class="number">0x00</span>&#125;,<span class="comment">/*&quot;X&quot;,56*/</span></span><br><span class="line">&#123;<span class="number">0x20</span>,<span class="number">0x00</span>,<span class="number">0x38</span>,<span class="number">0x40</span>,<span class="number">0x07</span>,<span class="number">0xC0</span>,<span class="number">0x38</span>,<span class="number">0x40</span>,<span class="number">0x20</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>&#125;,<span class="comment">/*&quot;Y&quot;,57*/</span></span><br><span class="line">&#123;<span class="number">0x30</span>,<span class="number">0x40</span>,<span class="number">0x21</span>,<span class="number">0xC0</span>,<span class="number">0x26</span>,<span class="number">0x40</span>,<span class="number">0x38</span>,<span class="number">0x40</span>,<span class="number">0x20</span>,<span class="number">0xC0</span>,<span class="number">0x00</span>,<span class="number">0x00</span>&#125;,<span class="comment">/*&quot;Z&quot;,58*/</span></span><br><span class="line">&#123;<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x7F</span>,<span class="number">0xE0</span>,<span class="number">0x40</span>,<span class="number">0x20</span>,<span class="number">0x40</span>,<span class="number">0x20</span>,<span class="number">0x00</span>,<span class="number">0x00</span>&#125;,<span class="comment">/*&quot;[&quot;,59*/</span></span><br><span class="line">&#123;<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x70</span>,<span class="number">0x00</span>,<span class="number">0x0C</span>,<span class="number">0x00</span>,<span class="number">0x03</span>,<span class="number">0x80</span>,<span class="number">0x00</span>,<span class="number">0x40</span>,<span class="number">0x00</span>,<span class="number">0x00</span>&#125;,<span class="comment">/*&quot;\&quot;,60*/</span></span><br><span class="line">&#123;<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x40</span>,<span class="number">0x20</span>,<span class="number">0x40</span>,<span class="number">0x20</span>,<span class="number">0x7F</span>,<span class="number">0xE0</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>&#125;,<span class="comment">/*&quot;]&quot;,61*/</span></span><br><span class="line">&#123;<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x20</span>,<span class="number">0x00</span>,<span class="number">0x40</span>,<span class="number">0x00</span>,<span class="number">0x20</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>&#125;,<span class="comment">/*&quot;^&quot;,62*/</span></span><br><span class="line">&#123;<span class="number">0x00</span>,<span class="number">0x10</span>,<span class="number">0x00</span>,<span class="number">0x10</span>,<span class="number">0x00</span>,<span class="number">0x10</span>,<span class="number">0x00</span>,<span class="number">0x10</span>,<span class="number">0x00</span>,<span class="number">0x10</span>,<span class="number">0x00</span>,<span class="number">0x10</span>&#125;,<span class="comment">/*&quot;_&quot;,63*/</span></span><br><span class="line">&#123;<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x40</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>&#125;,<span class="comment">/*&quot;`&quot;,64*/</span></span><br><span class="line">&#123;<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x02</span>,<span class="number">0x80</span>,<span class="number">0x05</span>,<span class="number">0x40</span>,<span class="number">0x05</span>,<span class="number">0x40</span>,<span class="number">0x03</span>,<span class="number">0xC0</span>,<span class="number">0x00</span>,<span class="number">0x40</span>&#125;,<span class="comment">/*&quot;a&quot;,65*/</span></span><br><span class="line">&#123;<span class="number">0x20</span>,<span class="number">0x00</span>,<span class="number">0x3F</span>,<span class="number">0xC0</span>,<span class="number">0x04</span>,<span class="number">0x40</span>,<span class="number">0x04</span>,<span class="number">0x40</span>,<span class="number">0x03</span>,<span class="number">0x80</span>,<span class="number">0x00</span>,<span class="number">0x00</span>&#125;,<span class="comment">/*&quot;b&quot;,66*/</span></span><br><span class="line">&#123;<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x03</span>,<span class="number">0x80</span>,<span class="number">0x04</span>,<span class="number">0x40</span>,<span class="number">0x04</span>,<span class="number">0x40</span>,<span class="number">0x06</span>,<span class="number">0x40</span>,<span class="number">0x00</span>,<span class="number">0x00</span>&#125;,<span class="comment">/*&quot;c&quot;,67*/</span></span><br><span class="line">&#123;<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x03</span>,<span class="number">0x80</span>,<span class="number">0x04</span>,<span class="number">0x40</span>,<span class="number">0x24</span>,<span class="number">0x40</span>,<span class="number">0x3F</span>,<span class="number">0xC0</span>,<span class="number">0x00</span>,<span class="number">0x40</span>&#125;,<span class="comment">/*&quot;d&quot;,68*/</span></span><br><span class="line">&#123;<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x03</span>,<span class="number">0x80</span>,<span class="number">0x05</span>,<span class="number">0x40</span>,<span class="number">0x05</span>,<span class="number">0x40</span>,<span class="number">0x03</span>,<span class="number">0x40</span>,<span class="number">0x00</span>,<span class="number">0x00</span>&#125;,<span class="comment">/*&quot;e&quot;,69*/</span></span><br><span class="line">&#123;<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x04</span>,<span class="number">0x40</span>,<span class="number">0x1F</span>,<span class="number">0xC0</span>,<span class="number">0x24</span>,<span class="number">0x40</span>,<span class="number">0x24</span>,<span class="number">0x40</span>,<span class="number">0x20</span>,<span class="number">0x00</span>&#125;,<span class="comment">/*&quot;f&quot;,70*/</span></span><br><span class="line">&#123;<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x02</span>,<span class="number">0xE0</span>,<span class="number">0x05</span>,<span class="number">0x50</span>,<span class="number">0x05</span>,<span class="number">0x50</span>,<span class="number">0x06</span>,<span class="number">0x50</span>,<span class="number">0x04</span>,<span class="number">0x20</span>&#125;,<span class="comment">/*&quot;g&quot;,71*/</span></span><br><span class="line">&#123;<span class="number">0x20</span>,<span class="number">0x40</span>,<span class="number">0x3F</span>,<span class="number">0xC0</span>,<span class="number">0x04</span>,<span class="number">0x40</span>,<span class="number">0x04</span>,<span class="number">0x00</span>,<span class="number">0x03</span>,<span class="number">0xC0</span>,<span class="number">0x00</span>,<span class="number">0x40</span>&#125;,<span class="comment">/*&quot;h&quot;,72*/</span></span><br><span class="line">&#123;<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x04</span>,<span class="number">0x40</span>,<span class="number">0x27</span>,<span class="number">0xC0</span>,<span class="number">0x00</span>,<span class="number">0x40</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>&#125;,<span class="comment">/*&quot;i&quot;,73*/</span></span><br><span class="line">&#123;<span class="number">0x00</span>,<span class="number">0x10</span>,<span class="number">0x00</span>,<span class="number">0x10</span>,<span class="number">0x04</span>,<span class="number">0x10</span>,<span class="number">0x27</span>,<span class="number">0xE0</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>&#125;,<span class="comment">/*&quot;j&quot;,74*/</span></span><br><span class="line">&#123;<span class="number">0x20</span>,<span class="number">0x40</span>,<span class="number">0x3F</span>,<span class="number">0xC0</span>,<span class="number">0x01</span>,<span class="number">0x40</span>,<span class="number">0x07</span>,<span class="number">0x00</span>,<span class="number">0x04</span>,<span class="number">0xC0</span>,<span class="number">0x04</span>,<span class="number">0x40</span>&#125;,<span class="comment">/*&quot;k&quot;,75*/</span></span><br><span class="line">&#123;<span class="number">0x20</span>,<span class="number">0x40</span>,<span class="number">0x20</span>,<span class="number">0x40</span>,<span class="number">0x3F</span>,<span class="number">0xC0</span>,<span class="number">0x00</span>,<span class="number">0x40</span>,<span class="number">0x00</span>,<span class="number">0x40</span>,<span class="number">0x00</span>,<span class="number">0x00</span>&#125;,<span class="comment">/*&quot;l&quot;,76*/</span></span><br><span class="line">&#123;<span class="number">0x07</span>,<span class="number">0xC0</span>,<span class="number">0x04</span>,<span class="number">0x00</span>,<span class="number">0x07</span>,<span class="number">0xC0</span>,<span class="number">0x04</span>,<span class="number">0x00</span>,<span class="number">0x03</span>,<span class="number">0xC0</span>,<span class="number">0x00</span>,<span class="number">0x00</span>&#125;,<span class="comment">/*&quot;m&quot;,77*/</span></span><br><span class="line">&#123;<span class="number">0x04</span>,<span class="number">0x40</span>,<span class="number">0x07</span>,<span class="number">0xC0</span>,<span class="number">0x04</span>,<span class="number">0x40</span>,<span class="number">0x04</span>,<span class="number">0x00</span>,<span class="number">0x03</span>,<span class="number">0xC0</span>,<span class="number">0x00</span>,<span class="number">0x40</span>&#125;,<span class="comment">/*&quot;n&quot;,78*/</span></span><br><span class="line">&#123;<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x03</span>,<span class="number">0x80</span>,<span class="number">0x04</span>,<span class="number">0x40</span>,<span class="number">0x04</span>,<span class="number">0x40</span>,<span class="number">0x03</span>,<span class="number">0x80</span>,<span class="number">0x00</span>,<span class="number">0x00</span>&#125;,<span class="comment">/*&quot;o&quot;,79*/</span></span><br><span class="line">&#123;<span class="number">0x04</span>,<span class="number">0x10</span>,<span class="number">0x07</span>,<span class="number">0xF0</span>,<span class="number">0x04</span>,<span class="number">0x50</span>,<span class="number">0x04</span>,<span class="number">0x40</span>,<span class="number">0x03</span>,<span class="number">0x80</span>,<span class="number">0x00</span>,<span class="number">0x00</span>&#125;,<span class="comment">/*&quot;p&quot;,80*/</span></span><br><span class="line">&#123;<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x03</span>,<span class="number">0x80</span>,<span class="number">0x04</span>,<span class="number">0x40</span>,<span class="number">0x04</span>,<span class="number">0x50</span>,<span class="number">0x07</span>,<span class="number">0xF0</span>,<span class="number">0x00</span>,<span class="number">0x10</span>&#125;,<span class="comment">/*&quot;q&quot;,81*/</span></span><br><span class="line">&#123;<span class="number">0x04</span>,<span class="number">0x40</span>,<span class="number">0x07</span>,<span class="number">0xC0</span>,<span class="number">0x02</span>,<span class="number">0x40</span>,<span class="number">0x04</span>,<span class="number">0x00</span>,<span class="number">0x04</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>&#125;,<span class="comment">/*&quot;r&quot;,82*/</span></span><br><span class="line">&#123;<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x06</span>,<span class="number">0x40</span>,<span class="number">0x05</span>,<span class="number">0x40</span>,<span class="number">0x05</span>,<span class="number">0x40</span>,<span class="number">0x04</span>,<span class="number">0xC0</span>,<span class="number">0x00</span>,<span class="number">0x00</span>&#125;,<span class="comment">/*&quot;s&quot;,83*/</span></span><br><span class="line">&#123;<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x04</span>,<span class="number">0x00</span>,<span class="number">0x1F</span>,<span class="number">0x80</span>,<span class="number">0x04</span>,<span class="number">0x40</span>,<span class="number">0x00</span>,<span class="number">0x40</span>,<span class="number">0x00</span>,<span class="number">0x00</span>&#125;,<span class="comment">/*&quot;t&quot;,84*/</span></span><br><span class="line">&#123;<span class="number">0x04</span>,<span class="number">0x00</span>,<span class="number">0x07</span>,<span class="number">0x80</span>,<span class="number">0x00</span>,<span class="number">0x40</span>,<span class="number">0x04</span>,<span class="number">0x40</span>,<span class="number">0x07</span>,<span class="number">0xC0</span>,<span class="number">0x00</span>,<span class="number">0x40</span>&#125;,<span class="comment">/*&quot;u&quot;,85*/</span></span><br><span class="line">&#123;<span class="number">0x04</span>,<span class="number">0x00</span>,<span class="number">0x07</span>,<span class="number">0x00</span>,<span class="number">0x04</span>,<span class="number">0xC0</span>,<span class="number">0x01</span>,<span class="number">0x80</span>,<span class="number">0x06</span>,<span class="number">0x00</span>,<span class="number">0x04</span>,<span class="number">0x00</span>&#125;,<span class="comment">/*&quot;v&quot;,86*/</span></span><br><span class="line">&#123;<span class="number">0x06</span>,<span class="number">0x00</span>,<span class="number">0x01</span>,<span class="number">0xC0</span>,<span class="number">0x07</span>,<span class="number">0x00</span>,<span class="number">0x01</span>,<span class="number">0xC0</span>,<span class="number">0x06</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>&#125;,<span class="comment">/*&quot;w&quot;,87*/</span></span><br><span class="line">&#123;<span class="number">0x04</span>,<span class="number">0x40</span>,<span class="number">0x06</span>,<span class="number">0xC0</span>,<span class="number">0x01</span>,<span class="number">0x00</span>,<span class="number">0x06</span>,<span class="number">0xC0</span>,<span class="number">0x04</span>,<span class="number">0x40</span>,<span class="number">0x00</span>,<span class="number">0x00</span>&#125;,<span class="comment">/*&quot;x&quot;,88*/</span></span><br><span class="line">&#123;<span class="number">0x04</span>,<span class="number">0x10</span>,<span class="number">0x07</span>,<span class="number">0x10</span>,<span class="number">0x04</span>,<span class="number">0xE0</span>,<span class="number">0x01</span>,<span class="number">0x80</span>,<span class="number">0x06</span>,<span class="number">0x00</span>,<span class="number">0x04</span>,<span class="number">0x00</span>&#125;,<span class="comment">/*&quot;y&quot;,89*/</span></span><br><span class="line">&#123;<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x04</span>,<span class="number">0x40</span>,<span class="number">0x05</span>,<span class="number">0xC0</span>,<span class="number">0x06</span>,<span class="number">0x40</span>,<span class="number">0x04</span>,<span class="number">0x40</span>,<span class="number">0x00</span>,<span class="number">0x00</span>&#125;,<span class="comment">/*&quot;z&quot;,90*/</span></span><br><span class="line">&#123;<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x04</span>,<span class="number">0x00</span>,<span class="number">0x7B</span>,<span class="number">0xE0</span>,<span class="number">0x40</span>,<span class="number">0x20</span>,<span class="number">0x00</span>,<span class="number">0x00</span>&#125;,<span class="comment">/*&quot;&#123;&quot;,91*/</span></span><br><span class="line">&#123;<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0xFF</span>,<span class="number">0xF0</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>&#125;,<span class="comment">/*&quot;|&quot;,92*/</span></span><br><span class="line">&#123;<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x40</span>,<span class="number">0x20</span>,<span class="number">0x7B</span>,<span class="number">0xE0</span>,<span class="number">0x04</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>&#125;,<span class="comment">/*&quot;&#125;&quot;,93*/</span></span><br><span class="line">&#123;<span class="number">0x40</span>,<span class="number">0x00</span>,<span class="number">0x80</span>,<span class="number">0x00</span>,<span class="number">0x40</span>,<span class="number">0x00</span>,<span class="number">0x20</span>,<span class="number">0x00</span>,<span class="number">0x20</span>,<span class="number">0x00</span>,<span class="number">0x40</span>,<span class="number">0x00</span>&#125;,<span class="comment">/*&quot;~&quot;,94*/</span></span><br><span class="line">&#125;;  </span><br><span class="line"><span class="comment">//16*16 ASCII字符集点阵</span></span><br><span class="line"><span class="type">const</span> <span class="type">unsigned</span> <span class="type">char</span> oled_asc2_1608[<span class="number">95</span>][<span class="number">16</span>]=&#123;</span><br><span class="line">&#123;<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>&#125;,<span class="comment">/*&quot; &quot;,0*/</span></span><br><span class="line">&#123;<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x1F</span>,<span class="number">0xCC</span>,<span class="number">0x00</span>,<span class="number">0x0C</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>&#125;,<span class="comment">/*&quot;!&quot;,1*/</span></span><br><span class="line">&#123;<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x08</span>,<span class="number">0x00</span>,<span class="number">0x30</span>,<span class="number">0x00</span>,<span class="number">0x60</span>,<span class="number">0x00</span>,<span class="number">0x08</span>,<span class="number">0x00</span>,<span class="number">0x30</span>,<span class="number">0x00</span>,<span class="number">0x60</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>&#125;,<span class="comment">/*&quot;&quot;&quot;,2*/</span></span><br><span class="line">&#123;<span class="number">0x02</span>,<span class="number">0x20</span>,<span class="number">0x03</span>,<span class="number">0xFC</span>,<span class="number">0x1E</span>,<span class="number">0x20</span>,<span class="number">0x02</span>,<span class="number">0x20</span>,<span class="number">0x03</span>,<span class="number">0xFC</span>,<span class="number">0x1E</span>,<span class="number">0x20</span>,<span class="number">0x02</span>,<span class="number">0x20</span>,<span class="number">0x00</span>,<span class="number">0x00</span>&#125;,<span class="comment">/*&quot;#&quot;,3*/</span></span><br><span class="line">&#123;<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x0E</span>,<span class="number">0x18</span>,<span class="number">0x11</span>,<span class="number">0x04</span>,<span class="number">0x3F</span>,<span class="number">0xFF</span>,<span class="number">0x10</span>,<span class="number">0x84</span>,<span class="number">0x0C</span>,<span class="number">0x78</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>&#125;,<span class="comment">/*&quot;$&quot;,4*/</span></span><br><span class="line">&#123;<span class="number">0x0F</span>,<span class="number">0x00</span>,<span class="number">0x10</span>,<span class="number">0x84</span>,<span class="number">0x0F</span>,<span class="number">0x38</span>,<span class="number">0x00</span>,<span class="number">0xC0</span>,<span class="number">0x07</span>,<span class="number">0x78</span>,<span class="number">0x18</span>,<span class="number">0x84</span>,<span class="number">0x00</span>,<span class="number">0x78</span>,<span class="number">0x00</span>,<span class="number">0x00</span>&#125;,<span class="comment">/*&quot;%&quot;,5*/</span></span><br><span class="line">&#123;<span class="number">0x00</span>,<span class="number">0x78</span>,<span class="number">0x0F</span>,<span class="number">0x84</span>,<span class="number">0x10</span>,<span class="number">0xC4</span>,<span class="number">0x11</span>,<span class="number">0x24</span>,<span class="number">0x0E</span>,<span class="number">0x98</span>,<span class="number">0x00</span>,<span class="number">0xE4</span>,<span class="number">0x00</span>,<span class="number">0x84</span>,<span class="number">0x00</span>,<span class="number">0x08</span>&#125;,<span class="comment">/*&quot;&amp;&quot;,6*/</span></span><br><span class="line">&#123;<span class="number">0x08</span>,<span class="number">0x00</span>,<span class="number">0x68</span>,<span class="number">0x00</span>,<span class="number">0x70</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>&#125;,<span class="comment">/*&quot;&#x27;&quot;,7*/</span></span><br><span class="line">&#123;<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x07</span>,<span class="number">0xE0</span>,<span class="number">0x18</span>,<span class="number">0x18</span>,<span class="number">0x20</span>,<span class="number">0x04</span>,<span class="number">0x40</span>,<span class="number">0x02</span>,<span class="number">0x00</span>,<span class="number">0x00</span>&#125;,<span class="comment">/*&quot;(&quot;,8*/</span></span><br><span class="line">&#123;<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x40</span>,<span class="number">0x02</span>,<span class="number">0x20</span>,<span class="number">0x04</span>,<span class="number">0x18</span>,<span class="number">0x18</span>,<span class="number">0x07</span>,<span class="number">0xE0</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>&#125;,<span class="comment">/*&quot;)&quot;,9*/</span></span><br><span class="line">&#123;<span class="number">0x02</span>,<span class="number">0x40</span>,<span class="number">0x02</span>,<span class="number">0x40</span>,<span class="number">0x01</span>,<span class="number">0x80</span>,<span class="number">0x0F</span>,<span class="number">0xF0</span>,<span class="number">0x01</span>,<span class="number">0x80</span>,<span class="number">0x02</span>,<span class="number">0x40</span>,<span class="number">0x02</span>,<span class="number">0x40</span>,<span class="number">0x00</span>,<span class="number">0x00</span>&#125;,<span class="comment">/*&quot;*&quot;,10*/</span></span><br><span class="line">&#123;<span class="number">0x00</span>,<span class="number">0x80</span>,<span class="number">0x00</span>,<span class="number">0x80</span>,<span class="number">0x00</span>,<span class="number">0x80</span>,<span class="number">0x0F</span>,<span class="number">0xF8</span>,<span class="number">0x00</span>,<span class="number">0x80</span>,<span class="number">0x00</span>,<span class="number">0x80</span>,<span class="number">0x00</span>,<span class="number">0x80</span>,<span class="number">0x00</span>,<span class="number">0x00</span>&#125;,<span class="comment">/*&quot;+&quot;,11*/</span></span><br><span class="line">&#123;<span class="number">0x00</span>,<span class="number">0x01</span>,<span class="number">0x00</span>,<span class="number">0x0D</span>,<span class="number">0x00</span>,<span class="number">0x0E</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>&#125;,<span class="comment">/*&quot;,&quot;,12*/</span></span><br><span class="line">&#123;<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x80</span>,<span class="number">0x00</span>,<span class="number">0x80</span>,<span class="number">0x00</span>,<span class="number">0x80</span>,<span class="number">0x00</span>,<span class="number">0x80</span>,<span class="number">0x00</span>,<span class="number">0x80</span>,<span class="number">0x00</span>,<span class="number">0x80</span>,<span class="number">0x00</span>,<span class="number">0x80</span>&#125;,<span class="comment">/*&quot;-&quot;,13*/</span></span><br><span class="line">&#123;<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x0C</span>,<span class="number">0x00</span>,<span class="number">0x0C</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>&#125;,<span class="comment">/*&quot;.&quot;,14*/</span></span><br><span class="line">&#123;<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x06</span>,<span class="number">0x00</span>,<span class="number">0x18</span>,<span class="number">0x00</span>,<span class="number">0x60</span>,<span class="number">0x01</span>,<span class="number">0x80</span>,<span class="number">0x06</span>,<span class="number">0x00</span>,<span class="number">0x18</span>,<span class="number">0x00</span>,<span class="number">0x20</span>,<span class="number">0x00</span>&#125;,<span class="comment">/*&quot;/&quot;,15*/</span></span><br><span class="line">&#123;<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x07</span>,<span class="number">0xF0</span>,<span class="number">0x08</span>,<span class="number">0x08</span>,<span class="number">0x10</span>,<span class="number">0x04</span>,<span class="number">0x10</span>,<span class="number">0x04</span>,<span class="number">0x08</span>,<span class="number">0x08</span>,<span class="number">0x07</span>,<span class="number">0xF0</span>,<span class="number">0x00</span>,<span class="number">0x00</span>&#125;,<span class="comment">/*&quot;0&quot;,16*/</span></span><br><span class="line">&#123;<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x08</span>,<span class="number">0x04</span>,<span class="number">0x08</span>,<span class="number">0x04</span>,<span class="number">0x1F</span>,<span class="number">0xFC</span>,<span class="number">0x00</span>,<span class="number">0x04</span>,<span class="number">0x00</span>,<span class="number">0x04</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>&#125;,<span class="comment">/*&quot;1&quot;,17*/</span></span><br><span class="line">&#123;<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x0E</span>,<span class="number">0x0C</span>,<span class="number">0x10</span>,<span class="number">0x14</span>,<span class="number">0x10</span>,<span class="number">0x24</span>,<span class="number">0x10</span>,<span class="number">0x44</span>,<span class="number">0x11</span>,<span class="number">0x84</span>,<span class="number">0x0E</span>,<span class="number">0x0C</span>,<span class="number">0x00</span>,<span class="number">0x00</span>&#125;,<span class="comment">/*&quot;2&quot;,18*/</span></span><br><span class="line">&#123;<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x0C</span>,<span class="number">0x18</span>,<span class="number">0x10</span>,<span class="number">0x04</span>,<span class="number">0x11</span>,<span class="number">0x04</span>,<span class="number">0x11</span>,<span class="number">0x04</span>,<span class="number">0x12</span>,<span class="number">0x88</span>,<span class="number">0x0C</span>,<span class="number">0x70</span>,<span class="number">0x00</span>,<span class="number">0x00</span>&#125;,<span class="comment">/*&quot;3&quot;,19*/</span></span><br><span class="line">&#123;<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0xE0</span>,<span class="number">0x03</span>,<span class="number">0x20</span>,<span class="number">0x04</span>,<span class="number">0x24</span>,<span class="number">0x08</span>,<span class="number">0x24</span>,<span class="number">0x1F</span>,<span class="number">0xFC</span>,<span class="number">0x00</span>,<span class="number">0x24</span>,<span class="number">0x00</span>,<span class="number">0x00</span>&#125;,<span class="comment">/*&quot;4&quot;,20*/</span></span><br><span class="line">&#123;<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x1F</span>,<span class="number">0x98</span>,<span class="number">0x10</span>,<span class="number">0x84</span>,<span class="number">0x11</span>,<span class="number">0x04</span>,<span class="number">0x11</span>,<span class="number">0x04</span>,<span class="number">0x10</span>,<span class="number">0x88</span>,<span class="number">0x10</span>,<span class="number">0x70</span>,<span class="number">0x00</span>,<span class="number">0x00</span>&#125;,<span class="comment">/*&quot;5&quot;,21*/</span></span><br><span class="line">&#123;<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x07</span>,<span class="number">0xF0</span>,<span class="number">0x08</span>,<span class="number">0x88</span>,<span class="number">0x11</span>,<span class="number">0x04</span>,<span class="number">0x11</span>,<span class="number">0x04</span>,<span class="number">0x18</span>,<span class="number">0x88</span>,<span class="number">0x00</span>,<span class="number">0x70</span>,<span class="number">0x00</span>,<span class="number">0x00</span>&#125;,<span class="comment">/*&quot;6&quot;,22*/</span></span><br><span class="line">&#123;<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x1C</span>,<span class="number">0x00</span>,<span class="number">0x10</span>,<span class="number">0x00</span>,<span class="number">0x10</span>,<span class="number">0xFC</span>,<span class="number">0x13</span>,<span class="number">0x00</span>,<span class="number">0x1C</span>,<span class="number">0x00</span>,<span class="number">0x10</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>&#125;,<span class="comment">/*&quot;7&quot;,23*/</span></span><br><span class="line">&#123;<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x0E</span>,<span class="number">0x38</span>,<span class="number">0x11</span>,<span class="number">0x44</span>,<span class="number">0x10</span>,<span class="number">0x84</span>,<span class="number">0x10</span>,<span class="number">0x84</span>,<span class="number">0x11</span>,<span class="number">0x44</span>,<span class="number">0x0E</span>,<span class="number">0x38</span>,<span class="number">0x00</span>,<span class="number">0x00</span>&#125;,<span class="comment">/*&quot;8&quot;,24*/</span></span><br><span class="line">&#123;<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x07</span>,<span class="number">0x00</span>,<span class="number">0x08</span>,<span class="number">0x8C</span>,<span class="number">0x10</span>,<span class="number">0x44</span>,<span class="number">0x10</span>,<span class="number">0x44</span>,<span class="number">0x08</span>,<span class="number">0x88</span>,<span class="number">0x07</span>,<span class="number">0xF0</span>,<span class="number">0x00</span>,<span class="number">0x00</span>&#125;,<span class="comment">/*&quot;9&quot;,25*/</span></span><br><span class="line">&#123;<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x03</span>,<span class="number">0x0C</span>,<span class="number">0x03</span>,<span class="number">0x0C</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>&#125;,<span class="comment">/*&quot;:&quot;,26*/</span></span><br><span class="line">&#123;<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x01</span>,<span class="number">0x01</span>,<span class="number">0x06</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>&#125;,<span class="comment">/*&quot;;&quot;,27*/</span></span><br><span class="line">&#123;<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x80</span>,<span class="number">0x01</span>,<span class="number">0x40</span>,<span class="number">0x02</span>,<span class="number">0x20</span>,<span class="number">0x04</span>,<span class="number">0x10</span>,<span class="number">0x08</span>,<span class="number">0x08</span>,<span class="number">0x10</span>,<span class="number">0x04</span>,<span class="number">0x00</span>,<span class="number">0x00</span>&#125;,<span class="comment">/*&quot;&lt;&quot;,28*/</span></span><br><span class="line">&#123;<span class="number">0x02</span>,<span class="number">0x20</span>,<span class="number">0x02</span>,<span class="number">0x20</span>,<span class="number">0x02</span>,<span class="number">0x20</span>,<span class="number">0x02</span>,<span class="number">0x20</span>,<span class="number">0x02</span>,<span class="number">0x20</span>,<span class="number">0x02</span>,<span class="number">0x20</span>,<span class="number">0x02</span>,<span class="number">0x20</span>,<span class="number">0x00</span>,<span class="number">0x00</span>&#125;,<span class="comment">/*&quot;=&quot;,29*/</span></span><br><span class="line">&#123;<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x10</span>,<span class="number">0x04</span>,<span class="number">0x08</span>,<span class="number">0x08</span>,<span class="number">0x04</span>,<span class="number">0x10</span>,<span class="number">0x02</span>,<span class="number">0x20</span>,<span class="number">0x01</span>,<span class="number">0x40</span>,<span class="number">0x00</span>,<span class="number">0x80</span>,<span class="number">0x00</span>,<span class="number">0x00</span>&#125;,<span class="comment">/*&quot;&gt;&quot;,30*/</span></span><br><span class="line">&#123;<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x0E</span>,<span class="number">0x00</span>,<span class="number">0x12</span>,<span class="number">0x00</span>,<span class="number">0x10</span>,<span class="number">0x0C</span>,<span class="number">0x10</span>,<span class="number">0x6C</span>,<span class="number">0x10</span>,<span class="number">0x80</span>,<span class="number">0x0F</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>&#125;,<span class="comment">/*&quot;?&quot;,31*/</span></span><br><span class="line">&#123;<span class="number">0x03</span>,<span class="number">0xE0</span>,<span class="number">0x0C</span>,<span class="number">0x18</span>,<span class="number">0x13</span>,<span class="number">0xE4</span>,<span class="number">0x14</span>,<span class="number">0x24</span>,<span class="number">0x17</span>,<span class="number">0xC4</span>,<span class="number">0x08</span>,<span class="number">0x28</span>,<span class="number">0x07</span>,<span class="number">0xD0</span>,<span class="number">0x00</span>,<span class="number">0x00</span>&#125;,<span class="comment">/*&quot;@&quot;,32*/</span></span><br><span class="line">&#123;<span class="number">0x00</span>,<span class="number">0x04</span>,<span class="number">0x00</span>,<span class="number">0x3C</span>,<span class="number">0x03</span>,<span class="number">0xC4</span>,<span class="number">0x1C</span>,<span class="number">0x40</span>,<span class="number">0x07</span>,<span class="number">0x40</span>,<span class="number">0x00</span>,<span class="number">0xE4</span>,<span class="number">0x00</span>,<span class="number">0x1C</span>,<span class="number">0x00</span>,<span class="number">0x04</span>&#125;,<span class="comment">/*&quot;A&quot;,33*/</span></span><br><span class="line">&#123;<span class="number">0x10</span>,<span class="number">0x04</span>,<span class="number">0x1F</span>,<span class="number">0xFC</span>,<span class="number">0x11</span>,<span class="number">0x04</span>,<span class="number">0x11</span>,<span class="number">0x04</span>,<span class="number">0x11</span>,<span class="number">0x04</span>,<span class="number">0x0E</span>,<span class="number">0x88</span>,<span class="number">0x00</span>,<span class="number">0x70</span>,<span class="number">0x00</span>,<span class="number">0x00</span>&#125;,<span class="comment">/*&quot;B&quot;,34*/</span></span><br><span class="line">&#123;<span class="number">0x03</span>,<span class="number">0xE0</span>,<span class="number">0x0C</span>,<span class="number">0x18</span>,<span class="number">0x10</span>,<span class="number">0x04</span>,<span class="number">0x10</span>,<span class="number">0x04</span>,<span class="number">0x10</span>,<span class="number">0x04</span>,<span class="number">0x10</span>,<span class="number">0x08</span>,<span class="number">0x1C</span>,<span class="number">0x10</span>,<span class="number">0x00</span>,<span class="number">0x00</span>&#125;,<span class="comment">/*&quot;C&quot;,35*/</span></span><br><span class="line">&#123;<span class="number">0x10</span>,<span class="number">0x04</span>,<span class="number">0x1F</span>,<span class="number">0xFC</span>,<span class="number">0x10</span>,<span class="number">0x04</span>,<span class="number">0x10</span>,<span class="number">0x04</span>,<span class="number">0x10</span>,<span class="number">0x04</span>,<span class="number">0x08</span>,<span class="number">0x08</span>,<span class="number">0x07</span>,<span class="number">0xF0</span>,<span class="number">0x00</span>,<span class="number">0x00</span>&#125;,<span class="comment">/*&quot;D&quot;,36*/</span></span><br><span class="line">&#123;<span class="number">0x10</span>,<span class="number">0x04</span>,<span class="number">0x1F</span>,<span class="number">0xFC</span>,<span class="number">0x11</span>,<span class="number">0x04</span>,<span class="number">0x11</span>,<span class="number">0x04</span>,<span class="number">0x17</span>,<span class="number">0xC4</span>,<span class="number">0x10</span>,<span class="number">0x04</span>,<span class="number">0x08</span>,<span class="number">0x18</span>,<span class="number">0x00</span>,<span class="number">0x00</span>&#125;,<span class="comment">/*&quot;E&quot;,37*/</span></span><br><span class="line">&#123;<span class="number">0x10</span>,<span class="number">0x04</span>,<span class="number">0x1F</span>,<span class="number">0xFC</span>,<span class="number">0x11</span>,<span class="number">0x04</span>,<span class="number">0x11</span>,<span class="number">0x00</span>,<span class="number">0x17</span>,<span class="number">0xC0</span>,<span class="number">0x10</span>,<span class="number">0x00</span>,<span class="number">0x08</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>&#125;,<span class="comment">/*&quot;F&quot;,38*/</span></span><br><span class="line">&#123;<span class="number">0x03</span>,<span class="number">0xE0</span>,<span class="number">0x0C</span>,<span class="number">0x18</span>,<span class="number">0x10</span>,<span class="number">0x04</span>,<span class="number">0x10</span>,<span class="number">0x04</span>,<span class="number">0x10</span>,<span class="number">0x44</span>,<span class="number">0x1C</span>,<span class="number">0x78</span>,<span class="number">0x00</span>,<span class="number">0x40</span>,<span class="number">0x00</span>,<span class="number">0x00</span>&#125;,<span class="comment">/*&quot;G&quot;,39*/</span></span><br><span class="line">&#123;<span class="number">0x10</span>,<span class="number">0x04</span>,<span class="number">0x1F</span>,<span class="number">0xFC</span>,<span class="number">0x10</span>,<span class="number">0x84</span>,<span class="number">0x00</span>,<span class="number">0x80</span>,<span class="number">0x00</span>,<span class="number">0x80</span>,<span class="number">0x10</span>,<span class="number">0x84</span>,<span class="number">0x1F</span>,<span class="number">0xFC</span>,<span class="number">0x10</span>,<span class="number">0x04</span>&#125;,<span class="comment">/*&quot;H&quot;,40*/</span></span><br><span class="line">&#123;<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x10</span>,<span class="number">0x04</span>,<span class="number">0x10</span>,<span class="number">0x04</span>,<span class="number">0x1F</span>,<span class="number">0xFC</span>,<span class="number">0x10</span>,<span class="number">0x04</span>,<span class="number">0x10</span>,<span class="number">0x04</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>&#125;,<span class="comment">/*&quot;I&quot;,41*/</span></span><br><span class="line">&#123;<span class="number">0x00</span>,<span class="number">0x03</span>,<span class="number">0x00</span>,<span class="number">0x01</span>,<span class="number">0x10</span>,<span class="number">0x01</span>,<span class="number">0x10</span>,<span class="number">0x01</span>,<span class="number">0x1F</span>,<span class="number">0xFE</span>,<span class="number">0x10</span>,<span class="number">0x00</span>,<span class="number">0x10</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>&#125;,<span class="comment">/*&quot;J&quot;,42*/</span></span><br><span class="line">&#123;<span class="number">0x10</span>,<span class="number">0x04</span>,<span class="number">0x1F</span>,<span class="number">0xFC</span>,<span class="number">0x11</span>,<span class="number">0x04</span>,<span class="number">0x03</span>,<span class="number">0x80</span>,<span class="number">0x14</span>,<span class="number">0x64</span>,<span class="number">0x18</span>,<span class="number">0x1C</span>,<span class="number">0x10</span>,<span class="number">0x04</span>,<span class="number">0x00</span>,<span class="number">0x00</span>&#125;,<span class="comment">/*&quot;K&quot;,43*/</span></span><br><span class="line">&#123;<span class="number">0x10</span>,<span class="number">0x04</span>,<span class="number">0x1F</span>,<span class="number">0xFC</span>,<span class="number">0x10</span>,<span class="number">0x04</span>,<span class="number">0x00</span>,<span class="number">0x04</span>,<span class="number">0x00</span>,<span class="number">0x04</span>,<span class="number">0x00</span>,<span class="number">0x04</span>,<span class="number">0x00</span>,<span class="number">0x0C</span>,<span class="number">0x00</span>,<span class="number">0x00</span>&#125;,<span class="comment">/*&quot;L&quot;,44*/</span></span><br><span class="line">&#123;<span class="number">0x10</span>,<span class="number">0x04</span>,<span class="number">0x1F</span>,<span class="number">0xFC</span>,<span class="number">0x1F</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0xFC</span>,<span class="number">0x1F</span>,<span class="number">0x00</span>,<span class="number">0x1F</span>,<span class="number">0xFC</span>,<span class="number">0x10</span>,<span class="number">0x04</span>,<span class="number">0x00</span>,<span class="number">0x00</span>&#125;,<span class="comment">/*&quot;M&quot;,45*/</span></span><br><span class="line">&#123;<span class="number">0x10</span>,<span class="number">0x04</span>,<span class="number">0x1F</span>,<span class="number">0xFC</span>,<span class="number">0x0C</span>,<span class="number">0x04</span>,<span class="number">0x03</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0xE0</span>,<span class="number">0x10</span>,<span class="number">0x18</span>,<span class="number">0x1F</span>,<span class="number">0xFC</span>,<span class="number">0x10</span>,<span class="number">0x00</span>&#125;,<span class="comment">/*&quot;N&quot;,46*/</span></span><br><span class="line">&#123;<span class="number">0x07</span>,<span class="number">0xF0</span>,<span class="number">0x08</span>,<span class="number">0x08</span>,<span class="number">0x10</span>,<span class="number">0x04</span>,<span class="number">0x10</span>,<span class="number">0x04</span>,<span class="number">0x10</span>,<span class="number">0x04</span>,<span class="number">0x08</span>,<span class="number">0x08</span>,<span class="number">0x07</span>,<span class="number">0xF0</span>,<span class="number">0x00</span>,<span class="number">0x00</span>&#125;,<span class="comment">/*&quot;O&quot;,47*/</span></span><br><span class="line">&#123;<span class="number">0x10</span>,<span class="number">0x04</span>,<span class="number">0x1F</span>,<span class="number">0xFC</span>,<span class="number">0x10</span>,<span class="number">0x84</span>,<span class="number">0x10</span>,<span class="number">0x80</span>,<span class="number">0x10</span>,<span class="number">0x80</span>,<span class="number">0x10</span>,<span class="number">0x80</span>,<span class="number">0x0F</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>&#125;,<span class="comment">/*&quot;P&quot;,48*/</span></span><br><span class="line">&#123;<span class="number">0x07</span>,<span class="number">0xF0</span>,<span class="number">0x08</span>,<span class="number">0x18</span>,<span class="number">0x10</span>,<span class="number">0x24</span>,<span class="number">0x10</span>,<span class="number">0x24</span>,<span class="number">0x10</span>,<span class="number">0x1C</span>,<span class="number">0x08</span>,<span class="number">0x0A</span>,<span class="number">0x07</span>,<span class="number">0xF2</span>,<span class="number">0x00</span>,<span class="number">0x00</span>&#125;,<span class="comment">/*&quot;Q&quot;,49*/</span></span><br><span class="line">&#123;<span class="number">0x10</span>,<span class="number">0x04</span>,<span class="number">0x1F</span>,<span class="number">0xFC</span>,<span class="number">0x11</span>,<span class="number">0x04</span>,<span class="number">0x11</span>,<span class="number">0x00</span>,<span class="number">0x11</span>,<span class="number">0xC0</span>,<span class="number">0x11</span>,<span class="number">0x30</span>,<span class="number">0x0E</span>,<span class="number">0x0C</span>,<span class="number">0x00</span>,<span class="number">0x04</span>&#125;,<span class="comment">/*&quot;R&quot;,50*/</span></span><br><span class="line">&#123;<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x0E</span>,<span class="number">0x1C</span>,<span class="number">0x11</span>,<span class="number">0x04</span>,<span class="number">0x10</span>,<span class="number">0x84</span>,<span class="number">0x10</span>,<span class="number">0x84</span>,<span class="number">0x10</span>,<span class="number">0x44</span>,<span class="number">0x1C</span>,<span class="number">0x38</span>,<span class="number">0x00</span>,<span class="number">0x00</span>&#125;,<span class="comment">/*&quot;S&quot;,51*/</span></span><br><span class="line">&#123;<span class="number">0x18</span>,<span class="number">0x00</span>,<span class="number">0x10</span>,<span class="number">0x00</span>,<span class="number">0x10</span>,<span class="number">0x04</span>,<span class="number">0x1F</span>,<span class="number">0xFC</span>,<span class="number">0x10</span>,<span class="number">0x04</span>,<span class="number">0x10</span>,<span class="number">0x00</span>,<span class="number">0x18</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>&#125;,<span class="comment">/*&quot;T&quot;,52*/</span></span><br><span class="line">&#123;<span class="number">0x10</span>,<span class="number">0x00</span>,<span class="number">0x1F</span>,<span class="number">0xF8</span>,<span class="number">0x10</span>,<span class="number">0x04</span>,<span class="number">0x00</span>,<span class="number">0x04</span>,<span class="number">0x00</span>,<span class="number">0x04</span>,<span class="number">0x10</span>,<span class="number">0x04</span>,<span class="number">0x1F</span>,<span class="number">0xF8</span>,<span class="number">0x10</span>,<span class="number">0x00</span>&#125;,<span class="comment">/*&quot;U&quot;,53*/</span></span><br><span class="line">&#123;<span class="number">0x10</span>,<span class="number">0x00</span>,<span class="number">0x1E</span>,<span class="number">0x00</span>,<span class="number">0x11</span>,<span class="number">0xE0</span>,<span class="number">0x00</span>,<span class="number">0x1C</span>,<span class="number">0x00</span>,<span class="number">0x70</span>,<span class="number">0x13</span>,<span class="number">0x80</span>,<span class="number">0x1C</span>,<span class="number">0x00</span>,<span class="number">0x10</span>,<span class="number">0x00</span>&#125;,<span class="comment">/*&quot;V&quot;,54*/</span></span><br><span class="line">&#123;<span class="number">0x1F</span>,<span class="number">0xC0</span>,<span class="number">0x10</span>,<span class="number">0x3C</span>,<span class="number">0x00</span>,<span class="number">0xE0</span>,<span class="number">0x1F</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0xE0</span>,<span class="number">0x10</span>,<span class="number">0x3C</span>,<span class="number">0x1F</span>,<span class="number">0xC0</span>,<span class="number">0x00</span>,<span class="number">0x00</span>&#125;,<span class="comment">/*&quot;W&quot;,55*/</span></span><br><span class="line">&#123;<span class="number">0x10</span>,<span class="number">0x04</span>,<span class="number">0x18</span>,<span class="number">0x0C</span>,<span class="number">0x16</span>,<span class="number">0x34</span>,<span class="number">0x01</span>,<span class="number">0xC0</span>,<span class="number">0x01</span>,<span class="number">0xC0</span>,<span class="number">0x16</span>,<span class="number">0x34</span>,<span class="number">0x18</span>,<span class="number">0x0C</span>,<span class="number">0x10</span>,<span class="number">0x04</span>&#125;,<span class="comment">/*&quot;X&quot;,56*/</span></span><br><span class="line">&#123;<span class="number">0x10</span>,<span class="number">0x00</span>,<span class="number">0x1C</span>,<span class="number">0x00</span>,<span class="number">0x13</span>,<span class="number">0x04</span>,<span class="number">0x00</span>,<span class="number">0xFC</span>,<span class="number">0x13</span>,<span class="number">0x04</span>,<span class="number">0x1C</span>,<span class="number">0x00</span>,<span class="number">0x10</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>&#125;,<span class="comment">/*&quot;Y&quot;,57*/</span></span><br><span class="line">&#123;<span class="number">0x08</span>,<span class="number">0x04</span>,<span class="number">0x10</span>,<span class="number">0x1C</span>,<span class="number">0x10</span>,<span class="number">0x64</span>,<span class="number">0x10</span>,<span class="number">0x84</span>,<span class="number">0x13</span>,<span class="number">0x04</span>,<span class="number">0x1C</span>,<span class="number">0x04</span>,<span class="number">0x10</span>,<span class="number">0x18</span>,<span class="number">0x00</span>,<span class="number">0x00</span>&#125;,<span class="comment">/*&quot;Z&quot;,58*/</span></span><br><span class="line">&#123;<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x7F</span>,<span class="number">0xFE</span>,<span class="number">0x40</span>,<span class="number">0x02</span>,<span class="number">0x40</span>,<span class="number">0x02</span>,<span class="number">0x40</span>,<span class="number">0x02</span>,<span class="number">0x00</span>,<span class="number">0x00</span>&#125;,<span class="comment">/*&quot;[&quot;,59*/</span></span><br><span class="line">&#123;<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x30</span>,<span class="number">0x00</span>,<span class="number">0x0C</span>,<span class="number">0x00</span>,<span class="number">0x03</span>,<span class="number">0x80</span>,<span class="number">0x00</span>,<span class="number">0x60</span>,<span class="number">0x00</span>,<span class="number">0x1C</span>,<span class="number">0x00</span>,<span class="number">0x03</span>,<span class="number">0x00</span>,<span class="number">0x00</span>&#125;,<span class="comment">/*&quot;\&quot;,60*/</span></span><br><span class="line">&#123;<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x40</span>,<span class="number">0x02</span>,<span class="number">0x40</span>,<span class="number">0x02</span>,<span class="number">0x40</span>,<span class="number">0x02</span>,<span class="number">0x7F</span>,<span class="number">0xFE</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>&#125;,<span class="comment">/*&quot;]&quot;,61*/</span></span><br><span class="line">&#123;<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x20</span>,<span class="number">0x00</span>,<span class="number">0x40</span>,<span class="number">0x00</span>,<span class="number">0x40</span>,<span class="number">0x00</span>,<span class="number">0x40</span>,<span class="number">0x00</span>,<span class="number">0x20</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>&#125;,<span class="comment">/*&quot;^&quot;,62*/</span></span><br><span class="line">&#123;<span class="number">0x00</span>,<span class="number">0x01</span>,<span class="number">0x00</span>,<span class="number">0x01</span>,<span class="number">0x00</span>,<span class="number">0x01</span>,<span class="number">0x00</span>,<span class="number">0x01</span>,<span class="number">0x00</span>,<span class="number">0x01</span>,<span class="number">0x00</span>,<span class="number">0x01</span>,<span class="number">0x00</span>,<span class="number">0x01</span>,<span class="number">0x00</span>,<span class="number">0x01</span>&#125;,<span class="comment">/*&quot;_&quot;,63*/</span></span><br><span class="line">&#123;<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x40</span>,<span class="number">0x00</span>,<span class="number">0x40</span>,<span class="number">0x00</span>,<span class="number">0x20</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>&#125;,<span class="comment">/*&quot;`&quot;,64*/</span></span><br><span class="line">&#123;<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x98</span>,<span class="number">0x01</span>,<span class="number">0x24</span>,<span class="number">0x01</span>,<span class="number">0x44</span>,<span class="number">0x01</span>,<span class="number">0x44</span>,<span class="number">0x01</span>,<span class="number">0x44</span>,<span class="number">0x00</span>,<span class="number">0xFC</span>,<span class="number">0x00</span>,<span class="number">0x04</span>&#125;,<span class="comment">/*&quot;a&quot;,65*/</span></span><br><span class="line">&#123;<span class="number">0x10</span>,<span class="number">0x00</span>,<span class="number">0x1F</span>,<span class="number">0xFC</span>,<span class="number">0x00</span>,<span class="number">0x88</span>,<span class="number">0x01</span>,<span class="number">0x04</span>,<span class="number">0x01</span>,<span class="number">0x04</span>,<span class="number">0x00</span>,<span class="number">0x88</span>,<span class="number">0x00</span>,<span class="number">0x70</span>,<span class="number">0x00</span>,<span class="number">0x00</span>&#125;,<span class="comment">/*&quot;b&quot;,66*/</span></span><br><span class="line">&#123;<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x70</span>,<span class="number">0x00</span>,<span class="number">0x88</span>,<span class="number">0x01</span>,<span class="number">0x04</span>,<span class="number">0x01</span>,<span class="number">0x04</span>,<span class="number">0x01</span>,<span class="number">0x04</span>,<span class="number">0x00</span>,<span class="number">0x88</span>,<span class="number">0x00</span>,<span class="number">0x00</span>&#125;,<span class="comment">/*&quot;c&quot;,67*/</span></span><br><span class="line">&#123;<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x70</span>,<span class="number">0x00</span>,<span class="number">0x88</span>,<span class="number">0x01</span>,<span class="number">0x04</span>,<span class="number">0x01</span>,<span class="number">0x04</span>,<span class="number">0x11</span>,<span class="number">0x08</span>,<span class="number">0x1F</span>,<span class="number">0xFC</span>,<span class="number">0x00</span>,<span class="number">0x04</span>&#125;,<span class="comment">/*&quot;d&quot;,68*/</span></span><br><span class="line">&#123;<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0xF8</span>,<span class="number">0x01</span>,<span class="number">0x44</span>,<span class="number">0x01</span>,<span class="number">0x44</span>,<span class="number">0x01</span>,<span class="number">0x44</span>,<span class="number">0x01</span>,<span class="number">0x44</span>,<span class="number">0x00</span>,<span class="number">0xC8</span>,<span class="number">0x00</span>,<span class="number">0x00</span>&#125;,<span class="comment">/*&quot;e&quot;,69*/</span></span><br><span class="line">&#123;<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x01</span>,<span class="number">0x04</span>,<span class="number">0x01</span>,<span class="number">0x04</span>,<span class="number">0x0F</span>,<span class="number">0xFC</span>,<span class="number">0x11</span>,<span class="number">0x04</span>,<span class="number">0x11</span>,<span class="number">0x04</span>,<span class="number">0x11</span>,<span class="number">0x00</span>,<span class="number">0x18</span>,<span class="number">0x00</span>&#125;,<span class="comment">/*&quot;f&quot;,70*/</span></span><br><span class="line">&#123;<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0xD6</span>,<span class="number">0x01</span>,<span class="number">0x29</span>,<span class="number">0x01</span>,<span class="number">0x29</span>,<span class="number">0x01</span>,<span class="number">0x29</span>,<span class="number">0x01</span>,<span class="number">0xC9</span>,<span class="number">0x01</span>,<span class="number">0x06</span>,<span class="number">0x00</span>,<span class="number">0x00</span>&#125;,<span class="comment">/*&quot;g&quot;,71*/</span></span><br><span class="line">&#123;<span class="number">0x10</span>,<span class="number">0x04</span>,<span class="number">0x1F</span>,<span class="number">0xFC</span>,<span class="number">0x00</span>,<span class="number">0x84</span>,<span class="number">0x01</span>,<span class="number">0x00</span>,<span class="number">0x01</span>,<span class="number">0x00</span>,<span class="number">0x01</span>,<span class="number">0x04</span>,<span class="number">0x00</span>,<span class="number">0xFC</span>,<span class="number">0x00</span>,<span class="number">0x04</span>&#125;,<span class="comment">/*&quot;h&quot;,72*/</span></span><br><span class="line">&#123;<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x01</span>,<span class="number">0x04</span>,<span class="number">0x19</span>,<span class="number">0x04</span>,<span class="number">0x19</span>,<span class="number">0xFC</span>,<span class="number">0x00</span>,<span class="number">0x04</span>,<span class="number">0x00</span>,<span class="number">0x04</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>&#125;,<span class="comment">/*&quot;i&quot;,73*/</span></span><br><span class="line">&#123;<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x03</span>,<span class="number">0x00</span>,<span class="number">0x01</span>,<span class="number">0x01</span>,<span class="number">0x01</span>,<span class="number">0x19</span>,<span class="number">0x01</span>,<span class="number">0x19</span>,<span class="number">0xFE</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>&#125;,<span class="comment">/*&quot;j&quot;,74*/</span></span><br><span class="line">&#123;<span class="number">0x10</span>,<span class="number">0x04</span>,<span class="number">0x1F</span>,<span class="number">0xFC</span>,<span class="number">0x00</span>,<span class="number">0x24</span>,<span class="number">0x00</span>,<span class="number">0x40</span>,<span class="number">0x01</span>,<span class="number">0xB4</span>,<span class="number">0x01</span>,<span class="number">0x0C</span>,<span class="number">0x01</span>,<span class="number">0x04</span>,<span class="number">0x00</span>,<span class="number">0x00</span>&#125;,<span class="comment">/*&quot;k&quot;,75*/</span></span><br><span class="line">&#123;<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x10</span>,<span class="number">0x04</span>,<span class="number">0x10</span>,<span class="number">0x04</span>,<span class="number">0x1F</span>,<span class="number">0xFC</span>,<span class="number">0x00</span>,<span class="number">0x04</span>,<span class="number">0x00</span>,<span class="number">0x04</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>&#125;,<span class="comment">/*&quot;l&quot;,76*/</span></span><br><span class="line">&#123;<span class="number">0x01</span>,<span class="number">0x04</span>,<span class="number">0x01</span>,<span class="number">0xFC</span>,<span class="number">0x01</span>,<span class="number">0x04</span>,<span class="number">0x01</span>,<span class="number">0x00</span>,<span class="number">0x01</span>,<span class="number">0xFC</span>,<span class="number">0x01</span>,<span class="number">0x04</span>,<span class="number">0x01</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0xFC</span>&#125;,<span class="comment">/*&quot;m&quot;,77*/</span></span><br><span class="line">&#123;<span class="number">0x01</span>,<span class="number">0x04</span>,<span class="number">0x01</span>,<span class="number">0xFC</span>,<span class="number">0x00</span>,<span class="number">0x84</span>,<span class="number">0x01</span>,<span class="number">0x00</span>,<span class="number">0x01</span>,<span class="number">0x00</span>,<span class="number">0x01</span>,<span class="number">0x04</span>,<span class="number">0x00</span>,<span class="number">0xFC</span>,<span class="number">0x00</span>,<span class="number">0x04</span>&#125;,<span class="comment">/*&quot;n&quot;,78*/</span></span><br><span class="line">&#123;<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0xF8</span>,<span class="number">0x01</span>,<span class="number">0x04</span>,<span class="number">0x01</span>,<span class="number">0x04</span>,<span class="number">0x01</span>,<span class="number">0x04</span>,<span class="number">0x01</span>,<span class="number">0x04</span>,<span class="number">0x00</span>,<span class="number">0xF8</span>,<span class="number">0x00</span>,<span class="number">0x00</span>&#125;,<span class="comment">/*&quot;o&quot;,79*/</span></span><br><span class="line">&#123;<span class="number">0x01</span>,<span class="number">0x01</span>,<span class="number">0x01</span>,<span class="number">0xFF</span>,<span class="number">0x00</span>,<span class="number">0x85</span>,<span class="number">0x01</span>,<span class="number">0x04</span>,<span class="number">0x01</span>,<span class="number">0x04</span>,<span class="number">0x00</span>,<span class="number">0x88</span>,<span class="number">0x00</span>,<span class="number">0x70</span>,<span class="number">0x00</span>,<span class="number">0x00</span>&#125;,<span class="comment">/*&quot;p&quot;,80*/</span></span><br><span class="line">&#123;<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x70</span>,<span class="number">0x00</span>,<span class="number">0x88</span>,<span class="number">0x01</span>,<span class="number">0x04</span>,<span class="number">0x01</span>,<span class="number">0x04</span>,<span class="number">0x01</span>,<span class="number">0x05</span>,<span class="number">0x01</span>,<span class="number">0xFF</span>,<span class="number">0x00</span>,<span class="number">0x01</span>&#125;,<span class="comment">/*&quot;q&quot;,81*/</span></span><br><span class="line">&#123;<span class="number">0x01</span>,<span class="number">0x04</span>,<span class="number">0x01</span>,<span class="number">0x04</span>,<span class="number">0x01</span>,<span class="number">0xFC</span>,<span class="number">0x00</span>,<span class="number">0x84</span>,<span class="number">0x01</span>,<span class="number">0x04</span>,<span class="number">0x01</span>,<span class="number">0x00</span>,<span class="number">0x01</span>,<span class="number">0x80</span>,<span class="number">0x00</span>,<span class="number">0x00</span>&#125;,<span class="comment">/*&quot;r&quot;,82*/</span></span><br><span class="line">&#123;<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0xCC</span>,<span class="number">0x01</span>,<span class="number">0x24</span>,<span class="number">0x01</span>,<span class="number">0x24</span>,<span class="number">0x01</span>,<span class="number">0x24</span>,<span class="number">0x01</span>,<span class="number">0x24</span>,<span class="number">0x01</span>,<span class="number">0x98</span>,<span class="number">0x00</span>,<span class="number">0x00</span>&#125;,<span class="comment">/*&quot;s&quot;,83*/</span></span><br><span class="line">&#123;<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x01</span>,<span class="number">0x00</span>,<span class="number">0x01</span>,<span class="number">0x00</span>,<span class="number">0x07</span>,<span class="number">0xF8</span>,<span class="number">0x01</span>,<span class="number">0x04</span>,<span class="number">0x01</span>,<span class="number">0x04</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>&#125;,<span class="comment">/*&quot;t&quot;,84*/</span></span><br><span class="line">&#123;<span class="number">0x01</span>,<span class="number">0x00</span>,<span class="number">0x01</span>,<span class="number">0xF8</span>,<span class="number">0x00</span>,<span class="number">0x04</span>,<span class="number">0x00</span>,<span class="number">0x04</span>,<span class="number">0x00</span>,<span class="number">0x04</span>,<span class="number">0x01</span>,<span class="number">0x08</span>,<span class="number">0x01</span>,<span class="number">0xFC</span>,<span class="number">0x00</span>,<span class="number">0x04</span>&#125;,<span class="comment">/*&quot;u&quot;,85*/</span></span><br><span class="line">&#123;<span class="number">0x01</span>,<span class="number">0x00</span>,<span class="number">0x01</span>,<span class="number">0x80</span>,<span class="number">0x01</span>,<span class="number">0x70</span>,<span class="number">0x00</span>,<span class="number">0x0C</span>,<span class="number">0x00</span>,<span class="number">0x10</span>,<span class="number">0x01</span>,<span class="number">0x60</span>,<span class="number">0x01</span>,<span class="number">0x80</span>,<span class="number">0x01</span>,<span class="number">0x00</span>&#125;,<span class="comment">/*&quot;v&quot;,86*/</span></span><br><span class="line">&#123;<span class="number">0x01</span>,<span class="number">0xF0</span>,<span class="number">0x01</span>,<span class="number">0x0C</span>,<span class="number">0x00</span>,<span class="number">0x30</span>,<span class="number">0x01</span>,<span class="number">0xC0</span>,<span class="number">0x00</span>,<span class="number">0x30</span>,<span class="number">0x01</span>,<span class="number">0x0C</span>,<span class="number">0x01</span>,<span class="number">0xF0</span>,<span class="number">0x01</span>,<span class="number">0x00</span>&#125;,<span class="comment">/*&quot;w&quot;,87*/</span></span><br><span class="line">&#123;<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x01</span>,<span class="number">0x04</span>,<span class="number">0x01</span>,<span class="number">0x8C</span>,<span class="number">0x00</span>,<span class="number">0x74</span>,<span class="number">0x01</span>,<span class="number">0x70</span>,<span class="number">0x01</span>,<span class="number">0x8C</span>,<span class="number">0x01</span>,<span class="number">0x04</span>,<span class="number">0x00</span>,<span class="number">0x00</span>&#125;,<span class="comment">/*&quot;x&quot;,88*/</span></span><br><span class="line">&#123;<span class="number">0x01</span>,<span class="number">0x01</span>,<span class="number">0x01</span>,<span class="number">0x81</span>,<span class="number">0x01</span>,<span class="number">0x71</span>,<span class="number">0x00</span>,<span class="number">0x0E</span>,<span class="number">0x00</span>,<span class="number">0x18</span>,<span class="number">0x01</span>,<span class="number">0x60</span>,<span class="number">0x01</span>,<span class="number">0x80</span>,<span class="number">0x01</span>,<span class="number">0x00</span>&#125;,<span class="comment">/*&quot;y&quot;,89*/</span></span><br><span class="line">&#123;<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x01</span>,<span class="number">0x84</span>,<span class="number">0x01</span>,<span class="number">0x0C</span>,<span class="number">0x01</span>,<span class="number">0x34</span>,<span class="number">0x01</span>,<span class="number">0x44</span>,<span class="number">0x01</span>,<span class="number">0x84</span>,<span class="number">0x01</span>,<span class="number">0x0C</span>,<span class="number">0x00</span>,<span class="number">0x00</span>&#125;,<span class="comment">/*&quot;z&quot;,90*/</span></span><br><span class="line">&#123;<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x01</span>,<span class="number">0x00</span>,<span class="number">0x3E</span>,<span class="number">0xFC</span>,<span class="number">0x40</span>,<span class="number">0x02</span>,<span class="number">0x40</span>,<span class="number">0x02</span>&#125;,<span class="comment">/*&quot;&#123;&quot;,91*/</span></span><br><span class="line">&#123;<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0xFF</span>,<span class="number">0xFF</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>&#125;,<span class="comment">/*&quot;|&quot;,92*/</span></span><br><span class="line">&#123;<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x40</span>,<span class="number">0x02</span>,<span class="number">0x40</span>,<span class="number">0x02</span>,<span class="number">0x3E</span>,<span class="number">0xFC</span>,<span class="number">0x01</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>&#125;,<span class="comment">/*&quot;&#125;&quot;,93*/</span></span><br><span class="line">&#123;<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x60</span>,<span class="number">0x00</span>,<span class="number">0x80</span>,<span class="number">0x00</span>,<span class="number">0x80</span>,<span class="number">0x00</span>,<span class="number">0x40</span>,<span class="number">0x00</span>,<span class="number">0x40</span>,<span class="number">0x00</span>,<span class="number">0x20</span>,<span class="number">0x00</span>,<span class="number">0x20</span>,<span class="number">0x00</span>&#125;,<span class="comment">/*&quot;~&quot;,94*/</span></span><br><span class="line">&#125;;  </span><br><span class="line"><span class="comment">//24*24 ASICII字符集点阵</span></span><br><span class="line"><span class="type">const</span> <span class="type">unsigned</span> <span class="type">char</span> oled_asc2_2412[<span class="number">95</span>][<span class="number">36</span>]=&#123;</span><br><span class="line">&#123;<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>&#125;,<span class="comment">/*&quot; &quot;,0*/</span></span><br><span class="line">&#123;<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x0F</span>,<span class="number">0x80</span>,<span class="number">0x38</span>,<span class="number">0x0F</span>,<span class="number">0xFE</span>,<span class="number">0x38</span>,<span class="number">0x0F</span>,<span class="number">0x80</span>,<span class="number">0x38</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>&#125;,<span class="comment">/*&quot;!&quot;,1*/</span></span><br><span class="line">&#123;<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x01</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x06</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x0C</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x38</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x31</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x06</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x0C</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x38</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x30</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>&#125;,<span class="comment">/*&quot;&quot;&quot;,2*/</span></span><br><span class="line">&#123;<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x61</span>,<span class="number">0x80</span>,<span class="number">0x00</span>,<span class="number">0x67</span>,<span class="number">0xF8</span>,<span class="number">0x07</span>,<span class="number">0xF9</span>,<span class="number">0x80</span>,<span class="number">0x00</span>,<span class="number">0x61</span>,<span class="number">0x80</span>,<span class="number">0x00</span>,<span class="number">0x61</span>,<span class="number">0x80</span>,<span class="number">0x00</span>,<span class="number">0x61</span>,<span class="number">0x80</span>,<span class="number">0x00</span>,<span class="number">0x61</span>,<span class="number">0x80</span>,<span class="number">0x00</span>,<span class="number">0x67</span>,<span class="number">0xF8</span>,<span class="number">0x07</span>,<span class="number">0xF9</span>,<span class="number">0x80</span>,<span class="number">0x00</span>,<span class="number">0x61</span>,<span class="number">0x80</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>&#125;,<span class="comment">/*&quot;#&quot;,3*/</span></span><br><span class="line">&#123;<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x01</span>,<span class="number">0xC0</span>,<span class="number">0xE0</span>,<span class="number">0x03</span>,<span class="number">0xE0</span>,<span class="number">0xF0</span>,<span class="number">0x06</span>,<span class="number">0x30</span>,<span class="number">0x08</span>,<span class="number">0x04</span>,<span class="number">0x18</span>,<span class="number">0x08</span>,<span class="number">0x1F</span>,<span class="number">0xFF</span>,<span class="number">0xFE</span>,<span class="number">0x04</span>,<span class="number">0x0E</span>,<span class="number">0x08</span>,<span class="number">0x07</span>,<span class="number">0x87</span>,<span class="number">0xF0</span>,<span class="number">0x03</span>,<span class="number">0x81</span>,<span class="number">0xE0</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>&#125;,<span class="comment">/*&quot;$&quot;,4*/</span></span><br><span class="line">&#123;<span class="number">0x01</span>,<span class="number">0xF0</span>,<span class="number">0x00</span>,<span class="number">0x06</span>,<span class="number">0x0C</span>,<span class="number">0x00</span>,<span class="number">0x04</span>,<span class="number">0x04</span>,<span class="number">0x08</span>,<span class="number">0x06</span>,<span class="number">0x0C</span>,<span class="number">0x70</span>,<span class="number">0x01</span>,<span class="number">0xF9</span>,<span class="number">0xC0</span>,<span class="number">0x00</span>,<span class="number">0x0E</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x3B</span>,<span class="number">0xE0</span>,<span class="number">0x00</span>,<span class="number">0xEC</span>,<span class="number">0x18</span>,<span class="number">0x07</span>,<span class="number">0x08</span>,<span class="number">0x08</span>,<span class="number">0x04</span>,<span class="number">0x0C</span>,<span class="number">0x18</span>,<span class="number">0x00</span>,<span class="number">0x03</span>,<span class="number">0xE0</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>&#125;,<span class="comment">/*&quot;%&quot;,5*/</span></span><br><span class="line">&#123;<span class="number">0x00</span>,<span class="number">0x01</span>,<span class="number">0xE0</span>,<span class="number">0x00</span>,<span class="number">0x07</span>,<span class="number">0xF0</span>,<span class="number">0x03</span>,<span class="number">0xF8</span>,<span class="number">0x18</span>,<span class="number">0x04</span>,<span class="number">0x1C</span>,<span class="number">0x08</span>,<span class="number">0x04</span>,<span class="number">0x17</span>,<span class="number">0x08</span>,<span class="number">0x07</span>,<span class="number">0xE1</span>,<span class="number">0xD0</span>,<span class="number">0x03</span>,<span class="number">0xC0</span>,<span class="number">0xE0</span>,<span class="number">0x00</span>,<span class="number">0x23</span>,<span class="number">0xB0</span>,<span class="number">0x00</span>,<span class="number">0x3C</span>,<span class="number">0x08</span>,<span class="number">0x00</span>,<span class="number">0x20</span>,<span class="number">0x08</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x10</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>&#125;,<span class="comment">/*&quot;&amp;&quot;,6*/</span></span><br><span class="line">&#123;<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x01</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x31</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x32</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x1C</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>&#125;,<span class="comment">/*&quot;&#x27;&quot;,7*/</span></span><br><span class="line">&#123;<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x7F</span>,<span class="number">0x00</span>,<span class="number">0x01</span>,<span class="number">0xFF</span>,<span class="number">0xC0</span>,<span class="number">0x07</span>,<span class="number">0x80</span>,<span class="number">0xF0</span>,<span class="number">0x0C</span>,<span class="number">0x00</span>,<span class="number">0x18</span>,<span class="number">0x10</span>,<span class="number">0x00</span>,<span class="number">0x04</span>,<span class="number">0x20</span>,<span class="number">0x00</span>,<span class="number">0x02</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>&#125;,<span class="comment">/*&quot;(&quot;,8*/</span></span><br><span class="line">&#123;<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x20</span>,<span class="number">0x00</span>,<span class="number">0x02</span>,<span class="number">0x10</span>,<span class="number">0x00</span>,<span class="number">0x04</span>,<span class="number">0x0C</span>,<span class="number">0x00</span>,<span class="number">0x18</span>,<span class="number">0x07</span>,<span class="number">0x80</span>,<span class="number">0xF0</span>,<span class="number">0x01</span>,<span class="number">0xFF</span>,<span class="number">0xC0</span>,<span class="number">0x00</span>,<span class="number">0x7F</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>&#125;,<span class="comment">/*&quot;)&quot;,9*/</span></span><br><span class="line">&#123;<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x42</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x66</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x66</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x3C</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x18</span>,<span class="number">0x00</span>,<span class="number">0x03</span>,<span class="number">0xFF</span>,<span class="number">0xC0</span>,<span class="number">0x00</span>,<span class="number">0x18</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x3C</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x66</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x66</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x42</span>,<span class="number">0x00</span>&#125;,<span class="comment">/*&quot;*&quot;,10*/</span></span><br><span class="line">&#123;<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x08</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x08</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x08</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x08</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x08</span>,<span class="number">0x00</span>,<span class="number">0x01</span>,<span class="number">0xFF</span>,<span class="number">0xC0</span>,<span class="number">0x00</span>,<span class="number">0x08</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x08</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x08</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x08</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x08</span>,<span class="number">0x00</span>&#125;,<span class="comment">/*&quot;+&quot;,11*/</span></span><br><span class="line">&#123;<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x01</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x31</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x32</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x1C</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>&#125;,<span class="comment">/*&quot;,&quot;,12*/</span></span><br><span class="line">&#123;<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x08</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x08</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x08</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x08</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x08</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x08</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x08</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x08</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x08</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x08</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>&#125;,<span class="comment">/*&quot;-&quot;,13*/</span></span><br><span class="line">&#123;<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x38</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x38</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x38</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>&#125;,<span class="comment">/*&quot;.&quot;,14*/</span></span><br><span class="line">&#123;<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x06</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x1C</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x70</span>,<span class="number">0x00</span>,<span class="number">0x01</span>,<span class="number">0x80</span>,<span class="number">0x00</span>,<span class="number">0x0E</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x38</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0xC0</span>,<span class="number">0x00</span>,<span class="number">0x07</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x1C</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x30</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>&#125;,<span class="comment">/*&quot;/&quot;,15*/</span></span><br><span class="line">&#123;<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x7F</span>,<span class="number">0x80</span>,<span class="number">0x01</span>,<span class="number">0xFF</span>,<span class="number">0xE0</span>,<span class="number">0x03</span>,<span class="number">0x80</span>,<span class="number">0x70</span>,<span class="number">0x06</span>,<span class="number">0x00</span>,<span class="number">0x18</span>,<span class="number">0x04</span>,<span class="number">0x00</span>,<span class="number">0x08</span>,<span class="number">0x04</span>,<span class="number">0x00</span>,<span class="number">0x08</span>,<span class="number">0x06</span>,<span class="number">0x00</span>,<span class="number">0x18</span>,<span class="number">0x03</span>,<span class="number">0x80</span>,<span class="number">0x70</span>,<span class="number">0x01</span>,<span class="number">0xFF</span>,<span class="number">0xE0</span>,<span class="number">0x00</span>,<span class="number">0x7F</span>,<span class="number">0x80</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>&#125;,<span class="comment">/*&quot;0&quot;,16*/</span></span><br><span class="line">&#123;<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x01</span>,<span class="number">0x00</span>,<span class="number">0x08</span>,<span class="number">0x01</span>,<span class="number">0x00</span>,<span class="number">0x08</span>,<span class="number">0x01</span>,<span class="number">0x00</span>,<span class="number">0x08</span>,<span class="number">0x03</span>,<span class="number">0xFF</span>,<span class="number">0xF8</span>,<span class="number">0x07</span>,<span class="number">0xFF</span>,<span class="number">0xF8</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x08</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x08</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x08</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>&#125;,<span class="comment">/*&quot;1&quot;,17*/</span></span><br><span class="line">&#123;<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x01</span>,<span class="number">0xC0</span>,<span class="number">0x38</span>,<span class="number">0x02</span>,<span class="number">0xC0</span>,<span class="number">0x58</span>,<span class="number">0x04</span>,<span class="number">0x00</span>,<span class="number">0x98</span>,<span class="number">0x04</span>,<span class="number">0x01</span>,<span class="number">0x18</span>,<span class="number">0x04</span>,<span class="number">0x02</span>,<span class="number">0x18</span>,<span class="number">0x04</span>,<span class="number">0x04</span>,<span class="number">0x18</span>,<span class="number">0x06</span>,<span class="number">0x1C</span>,<span class="number">0x18</span>,<span class="number">0x03</span>,<span class="number">0xF8</span>,<span class="number">0x18</span>,<span class="number">0x01</span>,<span class="number">0xE0</span>,<span class="number">0xF8</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>&#125;,<span class="comment">/*&quot;2&quot;,18*/</span></span><br><span class="line">&#123;<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x01</span>,<span class="number">0xC0</span>,<span class="number">0xE0</span>,<span class="number">0x03</span>,<span class="number">0xC0</span>,<span class="number">0xF0</span>,<span class="number">0x04</span>,<span class="number">0x00</span>,<span class="number">0x08</span>,<span class="number">0x04</span>,<span class="number">0x08</span>,<span class="number">0x08</span>,<span class="number">0x04</span>,<span class="number">0x08</span>,<span class="number">0x08</span>,<span class="number">0x06</span>,<span class="number">0x18</span>,<span class="number">0x08</span>,<span class="number">0x03</span>,<span class="number">0xF4</span>,<span class="number">0x18</span>,<span class="number">0x01</span>,<span class="number">0xE7</span>,<span class="number">0xF0</span>,<span class="number">0x00</span>,<span class="number">0x01</span>,<span class="number">0xE0</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>&#125;,<span class="comment">/*&quot;3&quot;,19*/</span></span><br><span class="line">&#123;<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x03</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x0D</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x11</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x61</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x81</span>,<span class="number">0x08</span>,<span class="number">0x03</span>,<span class="number">0x01</span>,<span class="number">0x08</span>,<span class="number">0x07</span>,<span class="number">0xFF</span>,<span class="number">0xF8</span>,<span class="number">0x0F</span>,<span class="number">0xFF</span>,<span class="number">0xF8</span>,<span class="number">0x00</span>,<span class="number">0x01</span>,<span class="number">0x08</span>,<span class="number">0x00</span>,<span class="number">0x01</span>,<span class="number">0x08</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>&#125;,<span class="comment">/*&quot;4&quot;,20*/</span></span><br><span class="line">&#123;<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0xE0</span>,<span class="number">0x07</span>,<span class="number">0xFC</span>,<span class="number">0xD0</span>,<span class="number">0x06</span>,<span class="number">0x08</span>,<span class="number">0x08</span>,<span class="number">0x06</span>,<span class="number">0x10</span>,<span class="number">0x08</span>,<span class="number">0x06</span>,<span class="number">0x10</span>,<span class="number">0x08</span>,<span class="number">0x06</span>,<span class="number">0x10</span>,<span class="number">0x08</span>,<span class="number">0x06</span>,<span class="number">0x18</span>,<span class="number">0x38</span>,<span class="number">0x06</span>,<span class="number">0x0F</span>,<span class="number">0xF0</span>,<span class="number">0x06</span>,<span class="number">0x07</span>,<span class="number">0xC0</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>&#125;,<span class="comment">/*&quot;5&quot;,21*/</span></span><br><span class="line">&#123;<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x3F</span>,<span class="number">0x80</span>,<span class="number">0x01</span>,<span class="number">0xFF</span>,<span class="number">0xE0</span>,<span class="number">0x03</span>,<span class="number">0x84</span>,<span class="number">0x30</span>,<span class="number">0x02</span>,<span class="number">0x08</span>,<span class="number">0x18</span>,<span class="number">0x04</span>,<span class="number">0x10</span>,<span class="number">0x08</span>,<span class="number">0x04</span>,<span class="number">0x10</span>,<span class="number">0x08</span>,<span class="number">0x04</span>,<span class="number">0x10</span>,<span class="number">0x08</span>,<span class="number">0x07</span>,<span class="number">0x18</span>,<span class="number">0x10</span>,<span class="number">0x03</span>,<span class="number">0x0F</span>,<span class="number">0xF0</span>,<span class="number">0x00</span>,<span class="number">0x07</span>,<span class="number">0xC0</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>&#125;,<span class="comment">/*&quot;6&quot;,22*/</span></span><br><span class="line">&#123;<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x03</span>,<span class="number">0xC0</span>,<span class="number">0x00</span>,<span class="number">0x07</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x06</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x06</span>,<span class="number">0x00</span>,<span class="number">0xF8</span>,<span class="number">0x06</span>,<span class="number">0x07</span>,<span class="number">0xF8</span>,<span class="number">0x06</span>,<span class="number">0x18</span>,<span class="number">0x00</span>,<span class="number">0x06</span>,<span class="number">0xE0</span>,<span class="number">0x00</span>,<span class="number">0x07</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x06</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>&#125;,<span class="comment">/*&quot;7&quot;,23*/</span></span><br><span class="line">&#123;<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x01</span>,<span class="number">0xE1</span>,<span class="number">0xE0</span>,<span class="number">0x03</span>,<span class="number">0xF7</span>,<span class="number">0xF0</span>,<span class="number">0x06</span>,<span class="number">0x34</span>,<span class="number">0x10</span>,<span class="number">0x04</span>,<span class="number">0x18</span>,<span class="number">0x08</span>,<span class="number">0x04</span>,<span class="number">0x18</span>,<span class="number">0x08</span>,<span class="number">0x04</span>,<span class="number">0x0C</span>,<span class="number">0x08</span>,<span class="number">0x04</span>,<span class="number">0x0C</span>,<span class="number">0x08</span>,<span class="number">0x06</span>,<span class="number">0x16</span>,<span class="number">0x18</span>,<span class="number">0x03</span>,<span class="number">0xF3</span>,<span class="number">0xF0</span>,<span class="number">0x01</span>,<span class="number">0xC1</span>,<span class="number">0xE0</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>&#125;,<span class="comment">/*&quot;8&quot;,24*/</span></span><br><span class="line">&#123;<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0xF8</span>,<span class="number">0x00</span>,<span class="number">0x03</span>,<span class="number">0xFC</span>,<span class="number">0x30</span>,<span class="number">0x03</span>,<span class="number">0x06</span>,<span class="number">0x38</span>,<span class="number">0x04</span>,<span class="number">0x02</span>,<span class="number">0x08</span>,<span class="number">0x04</span>,<span class="number">0x02</span>,<span class="number">0x08</span>,<span class="number">0x04</span>,<span class="number">0x02</span>,<span class="number">0x08</span>,<span class="number">0x04</span>,<span class="number">0x04</span>,<span class="number">0x10</span>,<span class="number">0x03</span>,<span class="number">0x08</span>,<span class="number">0xF0</span>,<span class="number">0x01</span>,<span class="number">0xFF</span>,<span class="number">0xC0</span>,<span class="number">0x00</span>,<span class="number">0x7F</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>&#125;,<span class="comment">/*&quot;9&quot;,25*/</span></span><br><span class="line">&#123;<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x70</span>,<span class="number">0x38</span>,<span class="number">0x00</span>,<span class="number">0x70</span>,<span class="number">0x38</span>,<span class="number">0x00</span>,<span class="number">0x70</span>,<span class="number">0x38</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>&#125;,<span class="comment">/*&quot;:&quot;,26*/</span></span><br><span class="line">&#123;<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x30</span>,<span class="number">0x1A</span>,<span class="number">0x00</span>,<span class="number">0x30</span>,<span class="number">0x1C</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>&#125;,<span class="comment">/*&quot;;&quot;,27*/</span></span><br><span class="line">&#123;<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x08</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x14</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x22</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x41</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x80</span>,<span class="number">0x80</span>,<span class="number">0x01</span>,<span class="number">0x00</span>,<span class="number">0x40</span>,<span class="number">0x02</span>,<span class="number">0x00</span>,<span class="number">0x20</span>,<span class="number">0x04</span>,<span class="number">0x00</span>,<span class="number">0x10</span>,<span class="number">0x08</span>,<span class="number">0x00</span>,<span class="number">0x08</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>&#125;,<span class="comment">/*&quot;&lt;&quot;,28*/</span></span><br><span class="line">&#123;<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x21</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x21</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x21</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x21</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x21</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x21</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x21</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x21</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x21</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x21</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>&#125;,<span class="comment">/*&quot;=&quot;,29*/</span></span><br><span class="line">&#123;<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x08</span>,<span class="number">0x00</span>,<span class="number">0x08</span>,<span class="number">0x04</span>,<span class="number">0x00</span>,<span class="number">0x10</span>,<span class="number">0x02</span>,<span class="number">0x00</span>,<span class="number">0x20</span>,<span class="number">0x01</span>,<span class="number">0x00</span>,<span class="number">0x40</span>,<span class="number">0x00</span>,<span class="number">0x80</span>,<span class="number">0x80</span>,<span class="number">0x00</span>,<span class="number">0x41</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x22</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x14</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x08</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>&#125;,<span class="comment">/*&quot;&gt;&quot;,30*/</span></span><br><span class="line">&#123;<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x03</span>,<span class="number">0xC0</span>,<span class="number">0x00</span>,<span class="number">0x04</span>,<span class="number">0xC0</span>,<span class="number">0x00</span>,<span class="number">0x04</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x08</span>,<span class="number">0x00</span>,<span class="number">0x38</span>,<span class="number">0x08</span>,<span class="number">0x0F</span>,<span class="number">0x38</span>,<span class="number">0x08</span>,<span class="number">0x08</span>,<span class="number">0x38</span>,<span class="number">0x08</span>,<span class="number">0x10</span>,<span class="number">0x00</span>,<span class="number">0x0C</span>,<span class="number">0x30</span>,<span class="number">0x00</span>,<span class="number">0x07</span>,<span class="number">0xE0</span>,<span class="number">0x00</span>,<span class="number">0x03</span>,<span class="number">0xC0</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>&#125;,<span class="comment">/*&quot;?&quot;,31*/</span></span><br><span class="line">&#123;<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x3F</span>,<span class="number">0x80</span>,<span class="number">0x00</span>,<span class="number">0xFF</span>,<span class="number">0xE0</span>,<span class="number">0x03</span>,<span class="number">0x80</span>,<span class="number">0x70</span>,<span class="number">0x02</span>,<span class="number">0x0F</span>,<span class="number">0x10</span>,<span class="number">0x06</span>,<span class="number">0x70</span>,<span class="number">0x88</span>,<span class="number">0x04</span>,<span class="number">0xC0</span>,<span class="number">0x88</span>,<span class="number">0x04</span>,<span class="number">0x83</span>,<span class="number">0x08</span>,<span class="number">0x04</span>,<span class="number">0x7F</span>,<span class="number">0x88</span>,<span class="number">0x02</span>,<span class="number">0xC0</span>,<span class="number">0x90</span>,<span class="number">0x03</span>,<span class="number">0x01</span>,<span class="number">0x20</span>,<span class="number">0x00</span>,<span class="number">0xFE</span>,<span class="number">0x40</span>&#125;,<span class="comment">/*&quot;@&quot;,32*/</span></span><br><span class="line">&#123;<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x08</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x18</span>,<span class="number">0x00</span>,<span class="number">0x01</span>,<span class="number">0xF8</span>,<span class="number">0x00</span>,<span class="number">0x3E</span>,<span class="number">0x08</span>,<span class="number">0x01</span>,<span class="number">0xC2</span>,<span class="number">0x00</span>,<span class="number">0x07</span>,<span class="number">0x02</span>,<span class="number">0x00</span>,<span class="number">0x07</span>,<span class="number">0xE2</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0xFE</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x1F</span>,<span class="number">0xC8</span>,<span class="number">0x00</span>,<span class="number">0x01</span>,<span class="number">0xF8</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x38</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x08</span>&#125;,<span class="comment">/*&quot;A&quot;,33*/</span></span><br><span class="line">&#123;<span class="number">0x04</span>,<span class="number">0x00</span>,<span class="number">0x08</span>,<span class="number">0x07</span>,<span class="number">0xFF</span>,<span class="number">0xF8</span>,<span class="number">0x07</span>,<span class="number">0xFF</span>,<span class="number">0xF8</span>,<span class="number">0x04</span>,<span class="number">0x08</span>,<span class="number">0x08</span>,<span class="number">0x04</span>,<span class="number">0x08</span>,<span class="number">0x08</span>,<span class="number">0x04</span>,<span class="number">0x08</span>,<span class="number">0x08</span>,<span class="number">0x04</span>,<span class="number">0x08</span>,<span class="number">0x08</span>,<span class="number">0x06</span>,<span class="number">0x18</span>,<span class="number">0x08</span>,<span class="number">0x03</span>,<span class="number">0xF4</span>,<span class="number">0x18</span>,<span class="number">0x01</span>,<span class="number">0xE7</span>,<span class="number">0xF0</span>,<span class="number">0x00</span>,<span class="number">0x01</span>,<span class="number">0xE0</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>&#125;,<span class="comment">/*&quot;B&quot;,34*/</span></span><br><span class="line">&#123;<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x3F</span>,<span class="number">0x80</span>,<span class="number">0x01</span>,<span class="number">0xFF</span>,<span class="number">0xE0</span>,<span class="number">0x03</span>,<span class="number">0x80</span>,<span class="number">0x70</span>,<span class="number">0x02</span>,<span class="number">0x00</span>,<span class="number">0x18</span>,<span class="number">0x04</span>,<span class="number">0x00</span>,<span class="number">0x08</span>,<span class="number">0x04</span>,<span class="number">0x00</span>,<span class="number">0x08</span>,<span class="number">0x04</span>,<span class="number">0x00</span>,<span class="number">0x08</span>,<span class="number">0x04</span>,<span class="number">0x00</span>,<span class="number">0x10</span>,<span class="number">0x06</span>,<span class="number">0x00</span>,<span class="number">0x20</span>,<span class="number">0x07</span>,<span class="number">0x80</span>,<span class="number">0xC0</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>&#125;,<span class="comment">/*&quot;C&quot;,35*/</span></span><br><span class="line">&#123;<span class="number">0x04</span>,<span class="number">0x00</span>,<span class="number">0x08</span>,<span class="number">0x07</span>,<span class="number">0xFF</span>,<span class="number">0xF8</span>,<span class="number">0x07</span>,<span class="number">0xFF</span>,<span class="number">0xF8</span>,<span class="number">0x04</span>,<span class="number">0x00</span>,<span class="number">0x08</span>,<span class="number">0x04</span>,<span class="number">0x00</span>,<span class="number">0x08</span>,<span class="number">0x04</span>,<span class="number">0x00</span>,<span class="number">0x08</span>,<span class="number">0x04</span>,<span class="number">0x00</span>,<span class="number">0x18</span>,<span class="number">0x02</span>,<span class="number">0x00</span>,<span class="number">0x10</span>,<span class="number">0x03</span>,<span class="number">0x80</span>,<span class="number">0x70</span>,<span class="number">0x01</span>,<span class="number">0xFF</span>,<span class="number">0xE0</span>,<span class="number">0x00</span>,<span class="number">0x7F</span>,<span class="number">0x80</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>&#125;,<span class="comment">/*&quot;D&quot;,36*/</span></span><br><span class="line">&#123;<span class="number">0x04</span>,<span class="number">0x00</span>,<span class="number">0x08</span>,<span class="number">0x07</span>,<span class="number">0xFF</span>,<span class="number">0xF8</span>,<span class="number">0x07</span>,<span class="number">0xFF</span>,<span class="number">0xF8</span>,<span class="number">0x04</span>,<span class="number">0x08</span>,<span class="number">0x08</span>,<span class="number">0x04</span>,<span class="number">0x08</span>,<span class="number">0x08</span>,<span class="number">0x04</span>,<span class="number">0x08</span>,<span class="number">0x08</span>,<span class="number">0x04</span>,<span class="number">0x08</span>,<span class="number">0x08</span>,<span class="number">0x04</span>,<span class="number">0x3E</span>,<span class="number">0x08</span>,<span class="number">0x04</span>,<span class="number">0x00</span>,<span class="number">0x08</span>,<span class="number">0x06</span>,<span class="number">0x00</span>,<span class="number">0x18</span>,<span class="number">0x01</span>,<span class="number">0x00</span>,<span class="number">0x60</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>&#125;,<span class="comment">/*&quot;E&quot;,37*/</span></span><br><span class="line">&#123;<span class="number">0x04</span>,<span class="number">0x00</span>,<span class="number">0x08</span>,<span class="number">0x07</span>,<span class="number">0xFF</span>,<span class="number">0xF8</span>,<span class="number">0x07</span>,<span class="number">0xFF</span>,<span class="number">0xF8</span>,<span class="number">0x04</span>,<span class="number">0x08</span>,<span class="number">0x08</span>,<span class="number">0x04</span>,<span class="number">0x08</span>,<span class="number">0x00</span>,<span class="number">0x04</span>,<span class="number">0x08</span>,<span class="number">0x00</span>,<span class="number">0x04</span>,<span class="number">0x08</span>,<span class="number">0x00</span>,<span class="number">0x04</span>,<span class="number">0x3E</span>,<span class="number">0x00</span>,<span class="number">0x06</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x06</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x01</span>,<span class="number">0x80</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>&#125;,<span class="comment">/*&quot;F&quot;,38*/</span></span><br><span class="line">&#123;<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x3F</span>,<span class="number">0x80</span>,<span class="number">0x01</span>,<span class="number">0xFF</span>,<span class="number">0xE0</span>,<span class="number">0x03</span>,<span class="number">0x80</span>,<span class="number">0x70</span>,<span class="number">0x06</span>,<span class="number">0x00</span>,<span class="number">0x18</span>,<span class="number">0x04</span>,<span class="number">0x00</span>,<span class="number">0x08</span>,<span class="number">0x04</span>,<span class="number">0x02</span>,<span class="number">0x08</span>,<span class="number">0x04</span>,<span class="number">0x02</span>,<span class="number">0x08</span>,<span class="number">0x02</span>,<span class="number">0x03</span>,<span class="number">0xF0</span>,<span class="number">0x07</span>,<span class="number">0x83</span>,<span class="number">0xF0</span>,<span class="number">0x00</span>,<span class="number">0x02</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x02</span>,<span class="number">0x00</span>&#125;,<span class="comment">/*&quot;G&quot;,39*/</span></span><br><span class="line">&#123;<span class="number">0x04</span>,<span class="number">0x00</span>,<span class="number">0x08</span>,<span class="number">0x07</span>,<span class="number">0xFF</span>,<span class="number">0xF8</span>,<span class="number">0x07</span>,<span class="number">0xFF</span>,<span class="number">0xF8</span>,<span class="number">0x04</span>,<span class="number">0x08</span>,<span class="number">0x08</span>,<span class="number">0x00</span>,<span class="number">0x08</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x08</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x08</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x08</span>,<span class="number">0x00</span>,<span class="number">0x04</span>,<span class="number">0x08</span>,<span class="number">0x08</span>,<span class="number">0x07</span>,<span class="number">0xFF</span>,<span class="number">0xF8</span>,<span class="number">0x07</span>,<span class="number">0xFF</span>,<span class="number">0xF8</span>,<span class="number">0x04</span>,<span class="number">0x00</span>,<span class="number">0x08</span>&#125;,<span class="comment">/*&quot;H&quot;,40*/</span></span><br><span class="line">&#123;<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x04</span>,<span class="number">0x00</span>,<span class="number">0x08</span>,<span class="number">0x04</span>,<span class="number">0x00</span>,<span class="number">0x08</span>,<span class="number">0x04</span>,<span class="number">0x00</span>,<span class="number">0x08</span>,<span class="number">0x07</span>,<span class="number">0xFF</span>,<span class="number">0xF8</span>,<span class="number">0x07</span>,<span class="number">0xFF</span>,<span class="number">0xF8</span>,<span class="number">0x04</span>,<span class="number">0x00</span>,<span class="number">0x08</span>,<span class="number">0x04</span>,<span class="number">0x00</span>,<span class="number">0x08</span>,<span class="number">0x04</span>,<span class="number">0x00</span>,<span class="number">0x08</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>&#125;,<span class="comment">/*&quot;I&quot;,41*/</span></span><br><span class="line">&#123;<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x06</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x07</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x01</span>,<span class="number">0x04</span>,<span class="number">0x00</span>,<span class="number">0x01</span>,<span class="number">0x04</span>,<span class="number">0x00</span>,<span class="number">0x01</span>,<span class="number">0x04</span>,<span class="number">0x00</span>,<span class="number">0x03</span>,<span class="number">0x07</span>,<span class="number">0xFF</span>,<span class="number">0xFE</span>,<span class="number">0x07</span>,<span class="number">0xFF</span>,<span class="number">0xFC</span>,<span class="number">0x04</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x04</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x04</span>,<span class="number">0x00</span>,<span class="number">0x00</span>&#125;,<span class="comment">/*&quot;J&quot;,42*/</span></span><br><span class="line">&#123;<span class="number">0x04</span>,<span class="number">0x00</span>,<span class="number">0x08</span>,<span class="number">0x07</span>,<span class="number">0xFF</span>,<span class="number">0xF8</span>,<span class="number">0x07</span>,<span class="number">0xFF</span>,<span class="number">0xF8</span>,<span class="number">0x04</span>,<span class="number">0x0C</span>,<span class="number">0x08</span>,<span class="number">0x00</span>,<span class="number">0x18</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x3E</span>,<span class="number">0x00</span>,<span class="number">0x04</span>,<span class="number">0xC7</span>,<span class="number">0x80</span>,<span class="number">0x05</span>,<span class="number">0x03</span>,<span class="number">0xC8</span>,<span class="number">0x06</span>,<span class="number">0x00</span>,<span class="number">0xF8</span>,<span class="number">0x04</span>,<span class="number">0x00</span>,<span class="number">0x38</span>,<span class="number">0x04</span>,<span class="number">0x00</span>,<span class="number">0x18</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x08</span>&#125;,<span class="comment">/*&quot;K&quot;,43*/</span></span><br><span class="line">&#123;<span class="number">0x04</span>,<span class="number">0x00</span>,<span class="number">0x08</span>,<span class="number">0x07</span>,<span class="number">0xFF</span>,<span class="number">0xF8</span>,<span class="number">0x07</span>,<span class="number">0xFF</span>,<span class="number">0xF8</span>,<span class="number">0x04</span>,<span class="number">0x00</span>,<span class="number">0x08</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x08</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x08</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x08</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x08</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x08</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x18</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x60</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>&#125;,<span class="comment">/*&quot;L&quot;,44*/</span></span><br><span class="line">&#123;<span class="number">0x04</span>,<span class="number">0x00</span>,<span class="number">0x08</span>,<span class="number">0x07</span>,<span class="number">0xFF</span>,<span class="number">0xF8</span>,<span class="number">0x07</span>,<span class="number">0x80</span>,<span class="number">0x08</span>,<span class="number">0x07</span>,<span class="number">0xFC</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x7F</span>,<span class="number">0xC0</span>,<span class="number">0x00</span>,<span class="number">0x03</span>,<span class="number">0xF8</span>,<span class="number">0x00</span>,<span class="number">0x07</span>,<span class="number">0xC0</span>,<span class="number">0x00</span>,<span class="number">0x78</span>,<span class="number">0x00</span>,<span class="number">0x07</span>,<span class="number">0x80</span>,<span class="number">0x08</span>,<span class="number">0x07</span>,<span class="number">0xFF</span>,<span class="number">0xF8</span>,<span class="number">0x07</span>,<span class="number">0xFF</span>,<span class="number">0xF8</span>,<span class="number">0x04</span>,<span class="number">0x00</span>,<span class="number">0x08</span>&#125;,<span class="comment">/*&quot;M&quot;,45*/</span></span><br><span class="line">&#123;<span class="number">0x04</span>,<span class="number">0x00</span>,<span class="number">0x08</span>,<span class="number">0x07</span>,<span class="number">0xFF</span>,<span class="number">0xF8</span>,<span class="number">0x07</span>,<span class="number">0x00</span>,<span class="number">0x08</span>,<span class="number">0x03</span>,<span class="number">0xC0</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0xE0</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x38</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x1E</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x07</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x01</span>,<span class="number">0xC0</span>,<span class="number">0x04</span>,<span class="number">0x00</span>,<span class="number">0xF0</span>,<span class="number">0x07</span>,<span class="number">0xFF</span>,<span class="number">0xF8</span>,<span class="number">0x04</span>,<span class="number">0x00</span>,<span class="number">0x00</span>&#125;,<span class="comment">/*&quot;N&quot;,46*/</span></span><br><span class="line">&#123;<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x7F</span>,<span class="number">0x80</span>,<span class="number">0x01</span>,<span class="number">0xFF</span>,<span class="number">0xE0</span>,<span class="number">0x03</span>,<span class="number">0x80</span>,<span class="number">0x70</span>,<span class="number">0x06</span>,<span class="number">0x00</span>,<span class="number">0x18</span>,<span class="number">0x04</span>,<span class="number">0x00</span>,<span class="number">0x08</span>,<span class="number">0x04</span>,<span class="number">0x00</span>,<span class="number">0x08</span>,<span class="number">0x06</span>,<span class="number">0x00</span>,<span class="number">0x18</span>,<span class="number">0x03</span>,<span class="number">0x00</span>,<span class="number">0x30</span>,<span class="number">0x01</span>,<span class="number">0xFF</span>,<span class="number">0xE0</span>,<span class="number">0x00</span>,<span class="number">0x7F</span>,<span class="number">0x80</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>&#125;,<span class="comment">/*&quot;O&quot;,47*/</span></span><br><span class="line">&#123;<span class="number">0x04</span>,<span class="number">0x00</span>,<span class="number">0x08</span>,<span class="number">0x07</span>,<span class="number">0xFF</span>,<span class="number">0xF8</span>,<span class="number">0x07</span>,<span class="number">0xFF</span>,<span class="number">0xF8</span>,<span class="number">0x04</span>,<span class="number">0x04</span>,<span class="number">0x08</span>,<span class="number">0x04</span>,<span class="number">0x04</span>,<span class="number">0x00</span>,<span class="number">0x04</span>,<span class="number">0x04</span>,<span class="number">0x00</span>,<span class="number">0x04</span>,<span class="number">0x04</span>,<span class="number">0x00</span>,<span class="number">0x04</span>,<span class="number">0x04</span>,<span class="number">0x00</span>,<span class="number">0x06</span>,<span class="number">0x0C</span>,<span class="number">0x00</span>,<span class="number">0x03</span>,<span class="number">0xF8</span>,<span class="number">0x00</span>,<span class="number">0x01</span>,<span class="number">0xF0</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>&#125;,<span class="comment">/*&quot;P&quot;,48*/</span></span><br><span class="line">&#123;<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x7F</span>,<span class="number">0x80</span>,<span class="number">0x01</span>,<span class="number">0xFF</span>,<span class="number">0xE0</span>,<span class="number">0x03</span>,<span class="number">0x80</span>,<span class="number">0x70</span>,<span class="number">0x06</span>,<span class="number">0x00</span>,<span class="number">0x88</span>,<span class="number">0x04</span>,<span class="number">0x00</span>,<span class="number">0x88</span>,<span class="number">0x04</span>,<span class="number">0x00</span>,<span class="number">0xC8</span>,<span class="number">0x06</span>,<span class="number">0x00</span>,<span class="number">0x3C</span>,<span class="number">0x03</span>,<span class="number">0x00</span>,<span class="number">0x3E</span>,<span class="number">0x01</span>,<span class="number">0xFF</span>,<span class="number">0xE6</span>,<span class="number">0x00</span>,<span class="number">0x7F</span>,<span class="number">0x84</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>&#125;,<span class="comment">/*&quot;Q&quot;,49*/</span></span><br><span class="line">&#123;<span class="number">0x04</span>,<span class="number">0x00</span>,<span class="number">0x08</span>,<span class="number">0x07</span>,<span class="number">0xFF</span>,<span class="number">0xF8</span>,<span class="number">0x07</span>,<span class="number">0xFF</span>,<span class="number">0xF8</span>,<span class="number">0x04</span>,<span class="number">0x08</span>,<span class="number">0x08</span>,<span class="number">0x04</span>,<span class="number">0x08</span>,<span class="number">0x00</span>,<span class="number">0x04</span>,<span class="number">0x0C</span>,<span class="number">0x00</span>,<span class="number">0x04</span>,<span class="number">0x0F</span>,<span class="number">0x00</span>,<span class="number">0x04</span>,<span class="number">0x0B</span>,<span class="number">0xC0</span>,<span class="number">0x06</span>,<span class="number">0x10</span>,<span class="number">0xF0</span>,<span class="number">0x03</span>,<span class="number">0xF0</span>,<span class="number">0x38</span>,<span class="number">0x01</span>,<span class="number">0xE0</span>,<span class="number">0x08</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x08</span>&#125;,<span class="comment">/*&quot;R&quot;,50*/</span></span><br><span class="line">&#123;<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x01</span>,<span class="number">0xE0</span>,<span class="number">0xF8</span>,<span class="number">0x03</span>,<span class="number">0xF0</span>,<span class="number">0x30</span>,<span class="number">0x06</span>,<span class="number">0x30</span>,<span class="number">0x10</span>,<span class="number">0x04</span>,<span class="number">0x18</span>,<span class="number">0x08</span>,<span class="number">0x04</span>,<span class="number">0x18</span>,<span class="number">0x08</span>,<span class="number">0x04</span>,<span class="number">0x0C</span>,<span class="number">0x08</span>,<span class="number">0x04</span>,<span class="number">0x0C</span>,<span class="number">0x08</span>,<span class="number">0x02</span>,<span class="number">0x06</span>,<span class="number">0x18</span>,<span class="number">0x02</span>,<span class="number">0x07</span>,<span class="number">0xF0</span>,<span class="number">0x07</span>,<span class="number">0x81</span>,<span class="number">0xE0</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>&#125;,<span class="comment">/*&quot;S&quot;,51*/</span></span><br><span class="line">&#123;<span class="number">0x01</span>,<span class="number">0x80</span>,<span class="number">0x00</span>,<span class="number">0x06</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x04</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x04</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x04</span>,<span class="number">0x00</span>,<span class="number">0x08</span>,<span class="number">0x07</span>,<span class="number">0xFF</span>,<span class="number">0xF8</span>,<span class="number">0x07</span>,<span class="number">0xFF</span>,<span class="number">0xF8</span>,<span class="number">0x04</span>,<span class="number">0x00</span>,<span class="number">0x08</span>,<span class="number">0x04</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x04</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x06</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x01</span>,<span class="number">0x80</span>,<span class="number">0x00</span>&#125;,<span class="comment">/*&quot;T&quot;,52*/</span></span><br><span class="line">&#123;<span class="number">0x04</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x07</span>,<span class="number">0xFF</span>,<span class="number">0xE0</span>,<span class="number">0x07</span>,<span class="number">0xFF</span>,<span class="number">0xF0</span>,<span class="number">0x04</span>,<span class="number">0x00</span>,<span class="number">0x18</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x08</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x08</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x08</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x08</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x08</span>,<span class="number">0x04</span>,<span class="number">0x00</span>,<span class="number">0x10</span>,<span class="number">0x07</span>,<span class="number">0xFF</span>,<span class="number">0xE0</span>,<span class="number">0x04</span>,<span class="number">0x00</span>,<span class="number">0x00</span>&#125;,<span class="comment">/*&quot;U&quot;,53*/</span></span><br><span class="line">&#123;<span class="number">0x04</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x06</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x07</span>,<span class="number">0xE0</span>,<span class="number">0x00</span>,<span class="number">0x07</span>,<span class="number">0xFE</span>,<span class="number">0x00</span>,<span class="number">0x04</span>,<span class="number">0x1F</span>,<span class="number">0xE0</span>,<span class="number">0x00</span>,<span class="number">0x01</span>,<span class="number">0xF8</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x38</span>,<span class="number">0x00</span>,<span class="number">0x01</span>,<span class="number">0xE0</span>,<span class="number">0x04</span>,<span class="number">0x3E</span>,<span class="number">0x00</span>,<span class="number">0x07</span>,<span class="number">0xC0</span>,<span class="number">0x00</span>,<span class="number">0x06</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x04</span>,<span class="number">0x00</span>,<span class="number">0x00</span>&#125;,<span class="comment">/*&quot;V&quot;,54*/</span></span><br><span class="line">&#123;<span class="number">0x04</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x07</span>,<span class="number">0xE0</span>,<span class="number">0x00</span>,<span class="number">0x07</span>,<span class="number">0xFF</span>,<span class="number">0xC0</span>,<span class="number">0x04</span>,<span class="number">0x1F</span>,<span class="number">0xF8</span>,<span class="number">0x00</span>,<span class="number">0x07</span>,<span class="number">0xC0</span>,<span class="number">0x07</span>,<span class="number">0xF8</span>,<span class="number">0x00</span>,<span class="number">0x07</span>,<span class="number">0xFF</span>,<span class="number">0x80</span>,<span class="number">0x04</span>,<span class="number">0x3F</span>,<span class="number">0xF8</span>,<span class="number">0x00</span>,<span class="number">0x07</span>,<span class="number">0xC0</span>,<span class="number">0x04</span>,<span class="number">0xF8</span>,<span class="number">0x00</span>,<span class="number">0x07</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x04</span>,<span class="number">0x00</span>,<span class="number">0x00</span>&#125;,<span class="comment">/*&quot;W&quot;,55*/</span></span><br><span class="line">&#123;<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x04</span>,<span class="number">0x00</span>,<span class="number">0x08</span>,<span class="number">0x06</span>,<span class="number">0x00</span>,<span class="number">0x18</span>,<span class="number">0x07</span>,<span class="number">0xC0</span>,<span class="number">0x78</span>,<span class="number">0x05</span>,<span class="number">0xF1</span>,<span class="number">0xC8</span>,<span class="number">0x00</span>,<span class="number">0x3E</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x1F</span>,<span class="number">0x80</span>,<span class="number">0x04</span>,<span class="number">0x63</span>,<span class="number">0xE8</span>,<span class="number">0x07</span>,<span class="number">0x80</span>,<span class="number">0xF8</span>,<span class="number">0x06</span>,<span class="number">0x00</span>,<span class="number">0x18</span>,<span class="number">0x04</span>,<span class="number">0x00</span>,<span class="number">0x08</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>&#125;,<span class="comment">/*&quot;X&quot;,56*/</span></span><br><span class="line">&#123;<span class="number">0x04</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x06</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x07</span>,<span class="number">0x80</span>,<span class="number">0x00</span>,<span class="number">0x07</span>,<span class="number">0xE0</span>,<span class="number">0x08</span>,<span class="number">0x04</span>,<span class="number">0x7C</span>,<span class="number">0x08</span>,<span class="number">0x00</span>,<span class="number">0x1F</span>,<span class="number">0xF8</span>,<span class="number">0x00</span>,<span class="number">0x07</span>,<span class="number">0xF8</span>,<span class="number">0x00</span>,<span class="number">0x18</span>,<span class="number">0x08</span>,<span class="number">0x04</span>,<span class="number">0xE0</span>,<span class="number">0x08</span>,<span class="number">0x07</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x06</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x04</span>,<span class="number">0x00</span>,<span class="number">0x00</span>&#125;,<span class="comment">/*&quot;Y&quot;,57*/</span></span><br><span class="line">&#123;<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x01</span>,<span class="number">0x00</span>,<span class="number">0x08</span>,<span class="number">0x06</span>,<span class="number">0x00</span>,<span class="number">0x38</span>,<span class="number">0x04</span>,<span class="number">0x00</span>,<span class="number">0xF8</span>,<span class="number">0x04</span>,<span class="number">0x03</span>,<span class="number">0xE8</span>,<span class="number">0x04</span>,<span class="number">0x0F</span>,<span class="number">0x08</span>,<span class="number">0x04</span>,<span class="number">0x7C</span>,<span class="number">0x08</span>,<span class="number">0x05</span>,<span class="number">0xF0</span>,<span class="number">0x08</span>,<span class="number">0x07</span>,<span class="number">0xC0</span>,<span class="number">0x08</span>,<span class="number">0x07</span>,<span class="number">0x00</span>,<span class="number">0x18</span>,<span class="number">0x04</span>,<span class="number">0x00</span>,<span class="number">0x60</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>&#125;,<span class="comment">/*&quot;Z&quot;,58*/</span></span><br><span class="line">&#123;<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x3F</span>,<span class="number">0xFF</span>,<span class="number">0xFE</span>,<span class="number">0x20</span>,<span class="number">0x00</span>,<span class="number">0x02</span>,<span class="number">0x20</span>,<span class="number">0x00</span>,<span class="number">0x02</span>,<span class="number">0x20</span>,<span class="number">0x00</span>,<span class="number">0x02</span>,<span class="number">0x20</span>,<span class="number">0x00</span>,<span class="number">0x02</span>,<span class="number">0x20</span>,<span class="number">0x00</span>,<span class="number">0x02</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>&#125;,<span class="comment">/*&quot;[&quot;,59*/</span></span><br><span class="line">&#123;<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x08</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x07</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0xC0</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x38</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x06</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x01</span>,<span class="number">0xC0</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x30</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x0E</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x01</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>&#125;,<span class="comment">/*&quot;\&quot;,60*/</span></span><br><span class="line">&#123;<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x20</span>,<span class="number">0x00</span>,<span class="number">0x02</span>,<span class="number">0x20</span>,<span class="number">0x00</span>,<span class="number">0x02</span>,<span class="number">0x20</span>,<span class="number">0x00</span>,<span class="number">0x02</span>,<span class="number">0x20</span>,<span class="number">0x00</span>,<span class="number">0x02</span>,<span class="number">0x20</span>,<span class="number">0x00</span>,<span class="number">0x02</span>,<span class="number">0x3F</span>,<span class="number">0xFF</span>,<span class="number">0xFE</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>&#125;,<span class="comment">/*&quot;]&quot;,61*/</span></span><br><span class="line">&#123;<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x08</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x10</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x30</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x20</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x30</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x10</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x08</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>&#125;,<span class="comment">/*&quot;^&quot;,62*/</span></span><br><span class="line">&#123;<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x01</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x01</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x01</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x01</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x01</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x01</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x01</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x01</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x01</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x01</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x01</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x01</span>&#125;,<span class="comment">/*&quot;_&quot;,63*/</span></span><br><span class="line">&#123;<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x20</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x20</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x10</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x10</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>&#125;,<span class="comment">/*&quot;`&quot;,64*/</span></span><br><span class="line">&#123;<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0xF0</span>,<span class="number">0x00</span>,<span class="number">0x19</span>,<span class="number">0xF8</span>,<span class="number">0x00</span>,<span class="number">0x1B</span>,<span class="number">0x18</span>,<span class="number">0x00</span>,<span class="number">0x22</span>,<span class="number">0x08</span>,<span class="number">0x00</span>,<span class="number">0x26</span>,<span class="number">0x08</span>,<span class="number">0x00</span>,<span class="number">0x24</span>,<span class="number">0x08</span>,<span class="number">0x00</span>,<span class="number">0x24</span>,<span class="number">0x10</span>,<span class="number">0x00</span>,<span class="number">0x3F</span>,<span class="number">0xF8</span>,<span class="number">0x00</span>,<span class="number">0x1F</span>,<span class="number">0xF8</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x08</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x18</span>&#125;,<span class="comment">/*&quot;a&quot;,65*/</span></span><br><span class="line">&#123;<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x04</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x07</span>,<span class="number">0xFF</span>,<span class="number">0xF8</span>,<span class="number">0x0F</span>,<span class="number">0xFF</span>,<span class="number">0xF0</span>,<span class="number">0x00</span>,<span class="number">0x18</span>,<span class="number">0x18</span>,<span class="number">0x00</span>,<span class="number">0x10</span>,<span class="number">0x08</span>,<span class="number">0x00</span>,<span class="number">0x20</span>,<span class="number">0x08</span>,<span class="number">0x00</span>,<span class="number">0x20</span>,<span class="number">0x08</span>,<span class="number">0x00</span>,<span class="number">0x30</span>,<span class="number">0x18</span>,<span class="number">0x00</span>,<span class="number">0x1F</span>,<span class="number">0xF0</span>,<span class="number">0x00</span>,<span class="number">0x0F</span>,<span class="number">0xC0</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>&#125;,<span class="comment">/*&quot;b&quot;,66*/</span></span><br><span class="line">&#123;<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x07</span>,<span class="number">0xC0</span>,<span class="number">0x00</span>,<span class="number">0x1F</span>,<span class="number">0xF0</span>,<span class="number">0x00</span>,<span class="number">0x18</span>,<span class="number">0x30</span>,<span class="number">0x00</span>,<span class="number">0x20</span>,<span class="number">0x08</span>,<span class="number">0x00</span>,<span class="number">0x20</span>,<span class="number">0x08</span>,<span class="number">0x00</span>,<span class="number">0x20</span>,<span class="number">0x08</span>,<span class="number">0x00</span>,<span class="number">0x3C</span>,<span class="number">0x08</span>,<span class="number">0x00</span>,<span class="number">0x1C</span>,<span class="number">0x10</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x60</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>&#125;,<span class="comment">/*&quot;c&quot;,67*/</span></span><br><span class="line">&#123;<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x07</span>,<span class="number">0xC0</span>,<span class="number">0x00</span>,<span class="number">0x1F</span>,<span class="number">0xF0</span>,<span class="number">0x00</span>,<span class="number">0x38</span>,<span class="number">0x18</span>,<span class="number">0x00</span>,<span class="number">0x20</span>,<span class="number">0x08</span>,<span class="number">0x00</span>,<span class="number">0x20</span>,<span class="number">0x08</span>,<span class="number">0x00</span>,<span class="number">0x20</span>,<span class="number">0x08</span>,<span class="number">0x04</span>,<span class="number">0x10</span>,<span class="number">0x10</span>,<span class="number">0x07</span>,<span class="number">0xFF</span>,<span class="number">0xF8</span>,<span class="number">0x0F</span>,<span class="number">0xFF</span>,<span class="number">0xF0</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x10</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>&#125;,<span class="comment">/*&quot;d&quot;,68*/</span></span><br><span class="line">&#123;<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x07</span>,<span class="number">0xC0</span>,<span class="number">0x00</span>,<span class="number">0x1F</span>,<span class="number">0xF0</span>,<span class="number">0x00</span>,<span class="number">0x12</span>,<span class="number">0x30</span>,<span class="number">0x00</span>,<span class="number">0x22</span>,<span class="number">0x18</span>,<span class="number">0x00</span>,<span class="number">0x22</span>,<span class="number">0x08</span>,<span class="number">0x00</span>,<span class="number">0x22</span>,<span class="number">0x08</span>,<span class="number">0x00</span>,<span class="number">0x32</span>,<span class="number">0x08</span>,<span class="number">0x00</span>,<span class="number">0x1E</span>,<span class="number">0x10</span>,<span class="number">0x00</span>,<span class="number">0x0E</span>,<span class="number">0x20</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>&#125;,<span class="comment">/*&quot;e&quot;,69*/</span></span><br><span class="line">&#123;<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x20</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x20</span>,<span class="number">0x08</span>,<span class="number">0x00</span>,<span class="number">0x20</span>,<span class="number">0x08</span>,<span class="number">0x01</span>,<span class="number">0xFF</span>,<span class="number">0xF8</span>,<span class="number">0x03</span>,<span class="number">0xFF</span>,<span class="number">0xF8</span>,<span class="number">0x06</span>,<span class="number">0x20</span>,<span class="number">0x08</span>,<span class="number">0x04</span>,<span class="number">0x20</span>,<span class="number">0x08</span>,<span class="number">0x04</span>,<span class="number">0x20</span>,<span class="number">0x08</span>,<span class="number">0x07</span>,<span class="number">0x20</span>,<span class="number">0x00</span>,<span class="number">0x03</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>&#125;,<span class="comment">/*&quot;f&quot;,70*/</span></span><br><span class="line">&#123;<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x0E</span>,<span class="number">0x00</span>,<span class="number">0x0E</span>,<span class="number">0x6E</span>,<span class="number">0x00</span>,<span class="number">0x1F</span>,<span class="number">0xF3</span>,<span class="number">0x00</span>,<span class="number">0x31</span>,<span class="number">0xB1</span>,<span class="number">0x00</span>,<span class="number">0x20</span>,<span class="number">0xB1</span>,<span class="number">0x00</span>,<span class="number">0x20</span>,<span class="number">0xB1</span>,<span class="number">0x00</span>,<span class="number">0x31</span>,<span class="number">0x91</span>,<span class="number">0x00</span>,<span class="number">0x1F</span>,<span class="number">0x13</span>,<span class="number">0x00</span>,<span class="number">0x2E</span>,<span class="number">0x1E</span>,<span class="number">0x00</span>,<span class="number">0x20</span>,<span class="number">0x0E</span>,<span class="number">0x00</span>,<span class="number">0x30</span>,<span class="number">0x00</span>&#125;,<span class="comment">/*&quot;g&quot;,71*/</span></span><br><span class="line">&#123;<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x04</span>,<span class="number">0x00</span>,<span class="number">0x08</span>,<span class="number">0x07</span>,<span class="number">0xFF</span>,<span class="number">0xF8</span>,<span class="number">0x0F</span>,<span class="number">0xFF</span>,<span class="number">0xF8</span>,<span class="number">0x00</span>,<span class="number">0x10</span>,<span class="number">0x08</span>,<span class="number">0x00</span>,<span class="number">0x20</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x20</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x20</span>,<span class="number">0x08</span>,<span class="number">0x00</span>,<span class="number">0x3F</span>,<span class="number">0xF8</span>,<span class="number">0x00</span>,<span class="number">0x1F</span>,<span class="number">0xF8</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x08</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>&#125;,<span class="comment">/*&quot;h&quot;,72*/</span></span><br><span class="line">&#123;<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x20</span>,<span class="number">0x08</span>,<span class="number">0x00</span>,<span class="number">0x20</span>,<span class="number">0x08</span>,<span class="number">0x00</span>,<span class="number">0x20</span>,<span class="number">0x08</span>,<span class="number">0x06</span>,<span class="number">0x3F</span>,<span class="number">0xF8</span>,<span class="number">0x06</span>,<span class="number">0x3F</span>,<span class="number">0xF8</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x08</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x08</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x08</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>&#125;,<span class="comment">/*&quot;i&quot;,73*/</span></span><br><span class="line">&#123;<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x03</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x03</span>,<span class="number">0x00</span>,<span class="number">0x20</span>,<span class="number">0x01</span>,<span class="number">0x00</span>,<span class="number">0x20</span>,<span class="number">0x01</span>,<span class="number">0x00</span>,<span class="number">0x20</span>,<span class="number">0x03</span>,<span class="number">0x06</span>,<span class="number">0x3F</span>,<span class="number">0xFE</span>,<span class="number">0x06</span>,<span class="number">0x3F</span>,<span class="number">0xFC</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>&#125;,<span class="comment">/*&quot;j&quot;,74*/</span></span><br><span class="line">&#123;<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x04</span>,<span class="number">0x00</span>,<span class="number">0x08</span>,<span class="number">0x07</span>,<span class="number">0xFF</span>,<span class="number">0xF8</span>,<span class="number">0x0F</span>,<span class="number">0xFF</span>,<span class="number">0xF8</span>,<span class="number">0x00</span>,<span class="number">0x01</span>,<span class="number">0x88</span>,<span class="number">0x00</span>,<span class="number">0x03</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x2F</span>,<span class="number">0xC0</span>,<span class="number">0x00</span>,<span class="number">0x38</span>,<span class="number">0xF8</span>,<span class="number">0x00</span>,<span class="number">0x20</span>,<span class="number">0x38</span>,<span class="number">0x00</span>,<span class="number">0x20</span>,<span class="number">0x08</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x08</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>&#125;,<span class="comment">/*&quot;k&quot;,75*/</span></span><br><span class="line">&#123;<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x04</span>,<span class="number">0x00</span>,<span class="number">0x08</span>,<span class="number">0x04</span>,<span class="number">0x00</span>,<span class="number">0x08</span>,<span class="number">0x04</span>,<span class="number">0x00</span>,<span class="number">0x08</span>,<span class="number">0x07</span>,<span class="number">0xFF</span>,<span class="number">0xF8</span>,<span class="number">0x0F</span>,<span class="number">0xFF</span>,<span class="number">0xF8</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x08</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x08</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x08</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>&#125;,<span class="comment">/*&quot;l&quot;,76*/</span></span><br><span class="line">&#123;<span class="number">0x00</span>,<span class="number">0x20</span>,<span class="number">0x08</span>,<span class="number">0x00</span>,<span class="number">0x3F</span>,<span class="number">0xF8</span>,<span class="number">0x00</span>,<span class="number">0x3F</span>,<span class="number">0xF8</span>,<span class="number">0x00</span>,<span class="number">0x10</span>,<span class="number">0x08</span>,<span class="number">0x00</span>,<span class="number">0x20</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x3F</span>,<span class="number">0xF8</span>,<span class="number">0x00</span>,<span class="number">0x3F</span>,<span class="number">0xF8</span>,<span class="number">0x00</span>,<span class="number">0x10</span>,<span class="number">0x08</span>,<span class="number">0x00</span>,<span class="number">0x20</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x3F</span>,<span class="number">0xF8</span>,<span class="number">0x00</span>,<span class="number">0x3F</span>,<span class="number">0xF8</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x08</span>&#125;,<span class="comment">/*&quot;m&quot;,77*/</span></span><br><span class="line">&#123;<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x20</span>,<span class="number">0x08</span>,<span class="number">0x00</span>,<span class="number">0x3F</span>,<span class="number">0xF8</span>,<span class="number">0x00</span>,<span class="number">0x3F</span>,<span class="number">0xF8</span>,<span class="number">0x00</span>,<span class="number">0x10</span>,<span class="number">0x08</span>,<span class="number">0x00</span>,<span class="number">0x10</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x20</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x20</span>,<span class="number">0x08</span>,<span class="number">0x00</span>,<span class="number">0x3F</span>,<span class="number">0xF8</span>,<span class="number">0x00</span>,<span class="number">0x1F</span>,<span class="number">0xF8</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x08</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>&#125;,<span class="comment">/*&quot;n&quot;,78*/</span></span><br><span class="line">&#123;<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x07</span>,<span class="number">0xC0</span>,<span class="number">0x00</span>,<span class="number">0x0F</span>,<span class="number">0xF0</span>,<span class="number">0x00</span>,<span class="number">0x18</span>,<span class="number">0x30</span>,<span class="number">0x00</span>,<span class="number">0x30</span>,<span class="number">0x08</span>,<span class="number">0x00</span>,<span class="number">0x20</span>,<span class="number">0x08</span>,<span class="number">0x00</span>,<span class="number">0x20</span>,<span class="number">0x08</span>,<span class="number">0x00</span>,<span class="number">0x30</span>,<span class="number">0x08</span>,<span class="number">0x00</span>,<span class="number">0x18</span>,<span class="number">0x30</span>,<span class="number">0x00</span>,<span class="number">0x0F</span>,<span class="number">0xF0</span>,<span class="number">0x00</span>,<span class="number">0x07</span>,<span class="number">0xC0</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>&#125;,<span class="comment">/*&quot;o&quot;,79*/</span></span><br><span class="line">&#123;<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x20</span>,<span class="number">0x01</span>,<span class="number">0x00</span>,<span class="number">0x3F</span>,<span class="number">0xFF</span>,<span class="number">0x00</span>,<span class="number">0x3F</span>,<span class="number">0xFF</span>,<span class="number">0x00</span>,<span class="number">0x10</span>,<span class="number">0x11</span>,<span class="number">0x00</span>,<span class="number">0x20</span>,<span class="number">0x09</span>,<span class="number">0x00</span>,<span class="number">0x20</span>,<span class="number">0x08</span>,<span class="number">0x00</span>,<span class="number">0x20</span>,<span class="number">0x08</span>,<span class="number">0x00</span>,<span class="number">0x30</span>,<span class="number">0x38</span>,<span class="number">0x00</span>,<span class="number">0x1F</span>,<span class="number">0xF0</span>,<span class="number">0x00</span>,<span class="number">0x0F</span>,<span class="number">0xC0</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>&#125;,<span class="comment">/*&quot;p&quot;,80*/</span></span><br><span class="line">&#123;<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x07</span>,<span class="number">0xC0</span>,<span class="number">0x00</span>,<span class="number">0x1F</span>,<span class="number">0xF0</span>,<span class="number">0x00</span>,<span class="number">0x38</span>,<span class="number">0x18</span>,<span class="number">0x00</span>,<span class="number">0x20</span>,<span class="number">0x08</span>,<span class="number">0x00</span>,<span class="number">0x20</span>,<span class="number">0x08</span>,<span class="number">0x00</span>,<span class="number">0x20</span>,<span class="number">0x09</span>,<span class="number">0x00</span>,<span class="number">0x10</span>,<span class="number">0x11</span>,<span class="number">0x00</span>,<span class="number">0x1F</span>,<span class="number">0xFF</span>,<span class="number">0x00</span>,<span class="number">0x3F</span>,<span class="number">0xFF</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x01</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>&#125;,<span class="comment">/*&quot;q&quot;,81*/</span></span><br><span class="line">&#123;<span class="number">0x00</span>,<span class="number">0x20</span>,<span class="number">0x08</span>,<span class="number">0x00</span>,<span class="number">0x20</span>,<span class="number">0x08</span>,<span class="number">0x00</span>,<span class="number">0x20</span>,<span class="number">0x08</span>,<span class="number">0x00</span>,<span class="number">0x3F</span>,<span class="number">0xF8</span>,<span class="number">0x00</span>,<span class="number">0x3F</span>,<span class="number">0xF8</span>,<span class="number">0x00</span>,<span class="number">0x08</span>,<span class="number">0x08</span>,<span class="number">0x00</span>,<span class="number">0x10</span>,<span class="number">0x08</span>,<span class="number">0x00</span>,<span class="number">0x20</span>,<span class="number">0x08</span>,<span class="number">0x00</span>,<span class="number">0x20</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x30</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x30</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>&#125;,<span class="comment">/*&quot;r&quot;,82*/</span></span><br><span class="line">&#123;<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x0C</span>,<span class="number">0x78</span>,<span class="number">0x00</span>,<span class="number">0x1E</span>,<span class="number">0x18</span>,<span class="number">0x00</span>,<span class="number">0x33</span>,<span class="number">0x08</span>,<span class="number">0x00</span>,<span class="number">0x23</span>,<span class="number">0x08</span>,<span class="number">0x00</span>,<span class="number">0x21</span>,<span class="number">0x08</span>,<span class="number">0x00</span>,<span class="number">0x21</span>,<span class="number">0x88</span>,<span class="number">0x00</span>,<span class="number">0x21</span>,<span class="number">0x98</span>,<span class="number">0x00</span>,<span class="number">0x30</span>,<span class="number">0xF0</span>,<span class="number">0x00</span>,<span class="number">0x38</span>,<span class="number">0x60</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>&#125;,<span class="comment">/*&quot;s&quot;,83*/</span></span><br><span class="line">&#123;<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x20</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x20</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x20</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0xFF</span>,<span class="number">0xF0</span>,<span class="number">0x03</span>,<span class="number">0xFF</span>,<span class="number">0xF8</span>,<span class="number">0x00</span>,<span class="number">0x20</span>,<span class="number">0x08</span>,<span class="number">0x00</span>,<span class="number">0x20</span>,<span class="number">0x08</span>,<span class="number">0x00</span>,<span class="number">0x20</span>,<span class="number">0x08</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x30</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>&#125;,<span class="comment">/*&quot;t&quot;,84*/</span></span><br><span class="line">&#123;<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x20</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x3F</span>,<span class="number">0xF0</span>,<span class="number">0x00</span>,<span class="number">0x7F</span>,<span class="number">0xF8</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x18</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x08</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x08</span>,<span class="number">0x00</span>,<span class="number">0x20</span>,<span class="number">0x10</span>,<span class="number">0x00</span>,<span class="number">0x3F</span>,<span class="number">0xF8</span>,<span class="number">0x00</span>,<span class="number">0x7F</span>,<span class="number">0xF0</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x10</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>&#125;,<span class="comment">/*&quot;u&quot;,85*/</span></span><br><span class="line">&#123;<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x20</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x30</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x3C</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x3F</span>,<span class="number">0x80</span>,<span class="number">0x00</span>,<span class="number">0x23</span>,<span class="number">0xF0</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x78</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x70</span>,<span class="number">0x00</span>,<span class="number">0x23</span>,<span class="number">0x80</span>,<span class="number">0x00</span>,<span class="number">0x3C</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x30</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x20</span>,<span class="number">0x00</span>&#125;,<span class="comment">/*&quot;v&quot;,86*/</span></span><br><span class="line">&#123;<span class="number">0x00</span>,<span class="number">0x20</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x3C</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x3F</span>,<span class="number">0xE0</span>,<span class="number">0x00</span>,<span class="number">0x23</span>,<span class="number">0xF8</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0xE0</span>,<span class="number">0x00</span>,<span class="number">0x27</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x3E</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x3F</span>,<span class="number">0xE0</span>,<span class="number">0x00</span>,<span class="number">0x21</span>,<span class="number">0xF8</span>,<span class="number">0x00</span>,<span class="number">0x01</span>,<span class="number">0xE0</span>,<span class="number">0x00</span>,<span class="number">0x3E</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x20</span>,<span class="number">0x00</span>&#125;,<span class="comment">/*&quot;w&quot;,87*/</span></span><br><span class="line">&#123;<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x20</span>,<span class="number">0x08</span>,<span class="number">0x00</span>,<span class="number">0x20</span>,<span class="number">0x08</span>,<span class="number">0x00</span>,<span class="number">0x38</span>,<span class="number">0x38</span>,<span class="number">0x00</span>,<span class="number">0x3E</span>,<span class="number">0x68</span>,<span class="number">0x00</span>,<span class="number">0x27</span>,<span class="number">0x80</span>,<span class="number">0x00</span>,<span class="number">0x03</span>,<span class="number">0xC8</span>,<span class="number">0x00</span>,<span class="number">0x2C</span>,<span class="number">0xF8</span>,<span class="number">0x00</span>,<span class="number">0x38</span>,<span class="number">0x38</span>,<span class="number">0x00</span>,<span class="number">0x20</span>,<span class="number">0x18</span>,<span class="number">0x00</span>,<span class="number">0x20</span>,<span class="number">0x08</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>&#125;,<span class="comment">/*&quot;x&quot;,88*/</span></span><br><span class="line">&#123;<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x20</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x30</span>,<span class="number">0x03</span>,<span class="number">0x00</span>,<span class="number">0x3C</span>,<span class="number">0x01</span>,<span class="number">0x00</span>,<span class="number">0x3F</span>,<span class="number">0x83</span>,<span class="number">0x00</span>,<span class="number">0x23</span>,<span class="number">0xEC</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x70</span>,<span class="number">0x00</span>,<span class="number">0x23</span>,<span class="number">0x80</span>,<span class="number">0x00</span>,<span class="number">0x3C</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x20</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x20</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>&#125;,<span class="comment">/*&quot;y&quot;,89*/</span></span><br><span class="line">&#123;<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x38</span>,<span class="number">0x08</span>,<span class="number">0x00</span>,<span class="number">0x20</span>,<span class="number">0x38</span>,<span class="number">0x00</span>,<span class="number">0x20</span>,<span class="number">0xF8</span>,<span class="number">0x00</span>,<span class="number">0x23</span>,<span class="number">0xE8</span>,<span class="number">0x00</span>,<span class="number">0x2F</span>,<span class="number">0x88</span>,<span class="number">0x00</span>,<span class="number">0x3E</span>,<span class="number">0x08</span>,<span class="number">0x00</span>,<span class="number">0x38</span>,<span class="number">0x08</span>,<span class="number">0x00</span>,<span class="number">0x20</span>,<span class="number">0x18</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x70</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>&#125;,<span class="comment">/*&quot;z&quot;,90*/</span></span><br><span class="line">&#123;<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x08</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x14</span>,<span class="number">0x00</span>,<span class="number">0x1F</span>,<span class="number">0xF7</span>,<span class="number">0xFC</span>,<span class="number">0x30</span>,<span class="number">0x00</span>,<span class="number">0x06</span>,<span class="number">0x20</span>,<span class="number">0x00</span>,<span class="number">0x02</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>&#125;,<span class="comment">/*&quot;&#123;&quot;,91*/</span></span><br><span class="line">&#123;<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0xFF</span>,<span class="number">0xFF</span>,<span class="number">0xFF</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>&#125;,<span class="comment">/*&quot;|&quot;,92*/</span></span><br><span class="line">&#123;<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x20</span>,<span class="number">0x00</span>,<span class="number">0x02</span>,<span class="number">0x30</span>,<span class="number">0x00</span>,<span class="number">0x06</span>,<span class="number">0x1F</span>,<span class="number">0xF7</span>,<span class="number">0xFC</span>,<span class="number">0x00</span>,<span class="number">0x14</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x08</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>&#125;,<span class="comment">/*&quot;&#125;&quot;,93*/</span></span><br><span class="line">&#123;<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x18</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x60</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x40</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x40</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x20</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x10</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x08</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x04</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x04</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x0C</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x10</span>,<span class="number">0x00</span>,<span class="number">0x00</span>&#125;,<span class="comment">/*&quot;~&quot;,94*/</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>oledlib.c</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// Created by Whisky on 2023/1/11.</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;oled.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;oledfont.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">//x1,y1,x2,y2 填充区域的对角坐标</span></span><br><span class="line"><span class="comment">//确保x1&lt;=x2;y1&lt;=y2 0&lt;=x1&lt;=127 0&lt;=y1&lt;=63</span></span><br><span class="line"><span class="comment">//dot:0,清空;1,填充</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">oled_fill</span><span class="params">(u8 x1,u8 y1,u8 x2,u8 y2,u8 dot)</span></span><br><span class="line">&#123;</span><br><span class="line">    u8 x,y;</span><br><span class="line">    <span class="keyword">for</span>(x=x1;x&lt;=x2;x++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span>(y=y1;y&lt;=y2;y++)oled_draw_point(x,y,dot);</span><br><span class="line">    &#125;</span><br><span class="line">    oled_refresh_gram();<span class="comment">//更新显示</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//x:0~127</span></span><br><span class="line"><span class="comment">//y:0~63</span></span><br><span class="line"><span class="type">void</span> _oled_show_char(u8 x, u8 y, u8 chr,oled_args in)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//默认参数</span></span><br><span class="line">    u8 size = in.size ? in.size : oled_painter.size;</span><br><span class="line">    u8 mode = in.mode ? in.mode : oled_painter.mode;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    u8 temp,t,t1;</span><br><span class="line">    u8 y0=y;</span><br><span class="line">    u8 csize=(size/<span class="number">8</span>+((size%<span class="number">8</span>)?<span class="number">1</span>:<span class="number">0</span>))*(size/<span class="number">2</span>);<span class="comment">//得到字体一个字符对应点阵集所占的字节数</span></span><br><span class="line">    chr=chr-<span class="string">&#x27; &#x27;</span>;<span class="comment">//得到偏移后的值</span></span><br><span class="line">    <span class="keyword">for</span>(t=<span class="number">0</span>;t&lt;csize;t++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(size==OLED_FONT_12)temp=oled_asc2_1206[chr][t];  <span class="comment">//调用1206字体</span></span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(size==OLED_FONT_16)temp=oled_asc2_1608[chr][t];<span class="comment">//调用1608字体</span></span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(size==OLED_FONT_24)temp=oled_asc2_2412[chr][t];<span class="comment">//调用2412字体</span></span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">return</span>;<span class="comment">//没有的字库</span></span><br><span class="line">        <span class="keyword">for</span>(t1=<span class="number">0</span>;t1&lt;<span class="number">8</span>;t1++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(temp&amp;<span class="number">0x80</span>)oled_draw_point(x,y,mode);</span><br><span class="line">            <span class="keyword">else</span> oled_draw_point(x,y,!mode);</span><br><span class="line">            temp&lt;&lt;=<span class="number">1</span>;</span><br><span class="line">            y++;</span><br><span class="line">            <span class="keyword">if</span>((y-y0)==size)</span><br><span class="line">            &#123;</span><br><span class="line">                y=y0;</span><br><span class="line">                x++;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//m^n函数</span></span><br><span class="line">u32 <span class="title function_">my_pow</span><span class="params">(u8 m,u8 n)</span></span><br><span class="line">&#123;</span><br><span class="line">    u32 result=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span>(n--)result*=m;</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//len :数字的位数</span></span><br><span class="line"><span class="comment">//num:数值(0~4294967295);</span></span><br><span class="line"><span class="type">void</span> _oled_show_num(u8 x,u8 y,u32 num,u8 len, oled_args in)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//默认参数</span></span><br><span class="line">    u8 size = in.size ? in.size : oled_painter.size;</span><br><span class="line">    u8 mode = in.mode ? in.mode : oled_painter.mode;</span><br><span class="line"></span><br><span class="line">    u8 t,temp;</span><br><span class="line">    u8 enshow=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(t=<span class="number">0</span>;t&lt;len;t++)</span><br><span class="line">    &#123;</span><br><span class="line">        temp=(num/my_pow(<span class="number">10</span>,len-t<span class="number">-1</span>))%<span class="number">10</span>;</span><br><span class="line">        <span class="keyword">if</span>(enshow==<span class="number">0</span>&amp;&amp;t&lt;(len<span class="number">-1</span>))</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(temp==<span class="number">0</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                oled_show_char(x+(size/<span class="number">2</span>)*t,y,<span class="string">&#x27; &#x27;</span>,.size = size, .mode = mode);</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;<span class="keyword">else</span> enshow=<span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        oled_show_char(x+(size/<span class="number">2</span>)*t,y,temp+<span class="string">&#x27;0&#x27;</span>,.size = size, .mode = mode);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">oled_show_string</span><span class="params">(u8 x,u8 y,<span class="type">const</span> u8 *p)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//默认参数</span></span><br><span class="line">    u8 size =  oled_painter.size;</span><br><span class="line">    u8 mode =  oled_painter.mode;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span>((*p&lt;=<span class="string">&#x27;~&#x27;</span>)&amp;&amp;(*p&gt;=<span class="string">&#x27; &#x27;</span>))<span class="comment">//判断是不是非法字符!</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(x&gt;(<span class="number">128</span>-(size/<span class="number">2</span>)))&#123;x=<span class="number">0</span>;y+=size;&#125;</span><br><span class="line">        <span class="keyword">if</span>(y&gt;(<span class="number">64</span>-size))&#123;y=x=<span class="number">0</span>;oled_clear();&#125;</span><br><span class="line">        oled_show_char(x,y,*p,.size = size, .mode = mode);</span><br><span class="line">        x+=size/<span class="number">2</span>;</span><br><span class="line">        p++;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当然，你也可以去实现显示汉字，显示图片等效果。</p><p>可以参考：<br><a href="https://blog.csdn.net/XiaoCaiDaYong/article/details/106251696">【STM32学习】（24）STM32完成模拟IIC实现OLED显示</a></p><h2 id="8-7-硬件iic">8.7 硬件IIC</h2><p>当然，有时候我们也有对速率要求很高的时候，于是要用到硬件IIC。<br>其实也很简单：</p><p>就是把通讯之桥换成HAL库函数的版本就行了（<code>hi2c1</code>就是HAL配置生成的)<br>(这里主要把最重要的 写命令 和 写数据 展示出来，而其他部分的驱动基本大同小异）</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">OLED_WR_CMD</span><span class="params">(<span class="type">uint8_t</span> cmd)</span></span><br><span class="line">&#123;</span><br><span class="line">HAL_I2C_Mem_Write(&amp;hi2c1 ,<span class="number">0x78</span>,<span class="number">0x00</span>,I2C_MEMADD_SIZE_8BIT,&amp;cmd,<span class="number">1</span>,<span class="number">0x100</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">OLED_WR_DATA</span><span class="params">(<span class="type">uint8_t</span> data)</span></span><br><span class="line">&#123;</span><br><span class="line">HAL_I2C_Mem_Write(&amp;hi2c1 ,<span class="number">0x78</span>,<span class="number">0x40</span>,I2C_MEMADD_SIZE_8BIT,&amp;data,<span class="number">1</span>,<span class="number">0x100</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/6948fba3e6bf45e0bd56dbd5708acf35.png" alt=""><br>配置上全部保持默认参数都行。</p>]]></content>
      
      
      <categories>
          
          <category> 跟我一起写STM32 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> stm32 </tag>
            
            <tag> 嵌入式 </tag>
            
            <tag> c语言 </tag>
            
            <tag> 单片机 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>串口(含DMA)——跟我一起写STM32(第五期)</title>
      <link href="/2023/01/11/STM32/%E4%B8%B2%E5%8F%A3(%E5%90%ABDMA)%E2%80%94%E2%80%94%E8%B7%9F%E6%88%91%E4%B8%80%E8%B5%B7%E5%86%99STM32(%E7%AC%AC%E4%BA%94%E6%9C%9F)/"/>
      <url>/2023/01/11/STM32/%E4%B8%B2%E5%8F%A3(%E5%90%ABDMA)%E2%80%94%E2%80%94%E8%B7%9F%E6%88%91%E4%B8%80%E8%B5%B7%E5%86%99STM32(%E7%AC%AC%E4%BA%94%E6%9C%9F)/</url>
      
        <content type="html"><![CDATA[<span id="more"></span><h3 id="文章目录">文章目录</h3><ul><li><a href="#7-%E4%B8%B2%E5%8F%A3%E9%80%9A%E4%BF%A1">7 串口通信</a><ul><li><a href="#71-%E8%AE%A4%E8%AF%86%E4%B8%B2%E5%8F%A3">7.1 认识串口</a></li><li><a href="#72-%E9%85%8D%E7%BD%AE%E4%B8%B2%E5%8F%A3">7.2 配置串口</a></li><li><a href="#73-%E7%AE%80%E5%8D%95%E7%9A%84%E4%B8%B2%E5%8F%A3%E6%94%B6%E5%8F%91">7.3 简单的串口收发</a></li><li><a href="#74-%E6%8E%A5%E6%94%B6%E4%B8%8D%E5%AE%9A%E9%95%BF%E7%9A%84%E6%95%B0%E6%8D%AE">7.4 接收不定长的数据</a></li><li><a href="#75-%E7%94%A8dma%E6%9D%A5%E4%B8%8D%E5%AE%9A%E9%95%BF%E6%8E%A5%E6%94%B6">7.5 用DMA来不定长接收</a><ul><li><a href="#751-%E8%AE%A4%E8%AF%86dma">7.5.1 认识DMA</a></li><li><a href="#752-%E9%85%8D%E7%BD%AEdma">7.5.2 配置DMA</a></li><li><a href="#753-dma%E5%AE%9E%E7%8E%B0uart%E6%8E%A5%E6%94%B6">7.5.3 DMA实现UART接收</a></li></ul></li><li><a href="#76-%E6%94%B9%E5%86%99printf-%E8%BF%9B%E5%85%A5%E5%8F%98%E5%8F%82%E5%87%BD%E6%95%B0%E7%9A%84%E4%B8%96%E7%95%8C">7.6 改写printf 进入变参函数的世界</a><ul><li><a href="#761-%E8%87%AA%E5%B7%B1%E7%9A%84print%E5%87%BD%E6%95%B0">7.6.1 自己的print函数</a></li><li><a href="#762-%E8%B0%83%E7%94%A8%E9%87%8D%E5%AE%9A%E5%90%91%E7%9A%84printf%E5%92%8Cscanf">7.6.2 调用重定向的printf和scanf</a></li></ul></li></ul></li></ul><h1 id="7-串口通信">7 串口通信</h1><h2 id="7-1-认识串口">7.1 认识串口</h2><p>谈到单品机通信，不得不提及的三种通信方式：<br>UART、I2C、SPI<br>补课视频推荐(b站)：<br><img src="https://img-blog.csdnimg.cn/4498bcd4dabb4783a4be942f059e92d9.png" alt=""><br>在STM32的参考手册中，串口被描述成通用同步异步收发器(USART)。<br>串口通信是一种设备间非常常用的串行通行方式，其简单便捷，大部分电子设备都支持。<br>串口作为 MCU 的重要外部接口，同时也是软件开发重要的调试手段，其重要性不言而喻。</p><p>普通串口一般两个接口，Rx，Tx。连接上就是Rx接上Tx，Tx接上Rx即可完成物理层面没有硬件流控制的连接。因为笔者一般也就是使用无硬件流控制的连接方式，所以我们的笔墨也会放在此处。</p><p>还有一点就是，</p><blockquote><p>USART：通用同步和异步收发器<br>UART：通用异步收发器</p></blockquote><p>当进行异步通信时,这两者是没有区别的。区别在于USART比UART多了同步通信功能。<br>这个同步通信功能可以把USART当作SPI来用，比如用USART来驱动SPI设备。</p><h2 id="7-2-配置串口">7.2 配置串口</h2><p>在串口的协议中，有几个东西尤其重要：</p><p><strong>1. 波特率</strong><br>异步通信中由于没有时钟信号，所以2个通信设备需约定好波特率，常见的有4800、9600、115200等。</p><p><strong>2. 通信的起始和停止信号</strong><br>串口通信的一个数据包从起始信号开始，知道停止信号结束。数据包的起始信号由一个逻辑0的数据位表示，而数据包的停止信号可由0.5、1、1.5或2个逻辑1的数据位表示，只要双方约定一致即可。<br><strong>3. 有效数据</strong><br>在数据包的起始位之后紧接着的就是要传输的主体数据内容，也称为有效数据，有效<br>数据的长度常被约定为 5、6、7或 8位长<br><strong>4. 数据校验</strong><br>在有效数据之后，有一个可选的数据校验位。由于数据通信相对容易受到外部干扰导致传输数据出现偏差，可以在传输过程加上校验位来解决这个问题。校验方法有奇校验(odd)、偶校验(even)、0校验(space)、1校验(mark)以及无校验(noparity)。<br>奇校验要求有效数据和校验位中“1”的个数为奇数，比如一个 8 位长的有效数据为：01101001，此时总共有 4 个“1”，为达到奇校验效果，校验位为“1”，最后传输的数据将是 8 位的有效数据加上 1 位的校验位总共 9 位。<br>偶校验与奇校验要求刚好相反，要求帧数据和校验位中“1”的个数为偶数，比如数据帧：11001010，此时数据帧“1”的个数为 4 个，所以偶校验位为“0”。<br>0 校验是不管有效数据中的内容是什么，校验位总为“0”，1 校验是校验位总为“1”。</p><p>当然这些重要的配置都有相应的寄存器，像：</p><p>每个串口都有一个自己独立的波特率寄存器 USART_BRR，通过设置该寄存器就可以达到配置不同波特率的目的；</p><p>STM32 的发送与接收是通过数据寄存器 USART_DR 来实现的，这是一个双寄存器，包含了 TDR 和 RDR。当向该寄存器写数据的时候，串口就会自动发送，当收到数据的时候，也是存在该寄存器内；</p><p><img src="https://img-blog.csdnimg.cn/e491c7a1ffaf469eb051882733aa39f8.png#pic_center" alt=""><br>可以看出，虽然是一个 32 位寄存器，但是只用了低 9 位（DR[8：0]），其他都是保留。<br>DR[8：0]为串口数据，包含了发送或接收的数据。由于它是由两个寄存器组成的，一个给发送用(TDR)，一个给接收用(RDR)，该寄存器兼具读和写的功能。TDR 寄存器提供了内部总线和输出移位寄存器之间的并行接口。RDR 寄存器提供了输入移位寄存器和内部总线之间的并行接口。<br>当使能校验位(USART_CR1 中 PCE 位被置位)进行发送时，写到 MSB 的值(根据数据的长<br>度不同，MSB 是第 7 位或者第 8 位)会被后来的校验位取代。<br>当使能校验位进行接收时，读到的 MSB 位是接收到的校验位。</p><p>串口的状态可以通过状态寄存器 USART_SR 读取。USART_SR 的各位描述：</p><p><img src="https://img-blog.csdnimg.cn/6c2cd823f6b44af0b8b3f6f68f4d251a.png#pic_center" alt=""><br>这里我们关注一下两个位，第 5、6 位 RXNE 和 TC。<br>RXNE（读数据寄存器非空），当该位被置 1 的时候，就是提示已经有数据被接收到了，并<br>且可以读出来了。这时候我们要做的就是尽快去读取 USART_DR，通过读 USART_DR 可以将<br>该位清零，也可以向该位写 0，直接清除。<br>TC（发送完成），当该位被置位的时候，表示 USART_DR 内的数据已经被发送完成了。如<br>果设置了这个位的中断，则会产生中断。该位也有两种清零方式：1）读 USART_SR，写<br>USART_DR。2）直接向该位写 0。<br>通过以上一些寄存器的操作外加一下 IO 口的配置，我们就可以达到串口最基本的配置了，关于串口更详细的介绍，请参考《STM32 中文参考手册》。</p><p>关于串口设置的一般步骤可以总结为如下几个步骤：</p><ol><li>串口时钟使能，GPIO 时钟使能。</li><li>设置引脚复用器映射：调用 GPIO_PinAFConfig 函数。</li><li>GPIO 初始化设置：要设置模式为复用功能。</li><li>串口参数初始化：设置波特率，字长，奇偶校验等参数。</li><li>开启中断并且初始化 NVIC，使能中断（如果需要开启中断才需要这个步骤）。</li><li>使能串口。</li><li>编写中断处理函数：函数名格式为 USARTxIRQHandler(x 对应串口号)。</li></ol><p>不过，这里笔者还是使用图形化配置的方式。<br><img src="https://img-blog.csdnimg.cn/89a85c8b5a554bc4940358867ac9d22c.png" alt=""><br>这里配置模式为异步<br>比特率为115200Bits/s（常用）<br>无校验<br>停止位为1（常设置为1）<br>然后我们生成工程</p><h2 id="7-3-简单的串口收发">7.3 简单的串口收发</h2><p>我们来认识一下API</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">HAL_StatusTypeDef <span class="title function_">HAL_UART_Transmit</span><span class="params">(UART_HandleTypeDef *huart, <span class="type">uint8_t</span> *pData, <span class="type">uint16_t</span> Size, <span class="type">uint32_t</span> Timeout)</span></span><br></pre></td></tr></table></figure><p><code>UART_HandleTypeDef *huart</code> ：结构体指针，这个结构体的成员的值已经被HAL库通过刚刚我们的图形化配置配置好了，这里是/Core/Src/usart.c里面的内容</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">UART_HandleTypeDef huart1;</span><br><span class="line"><span class="type">void</span> <span class="title function_">MX_USART1_UART_Init</span><span class="params">(<span class="type">void</span>)</span>&#123;</span><br><span class="line">  huart1.Instance = USART1;</span><br><span class="line">  huart1.Init.BaudRate = <span class="number">115200</span>;</span><br><span class="line">  huart1.Init.WordLength = UART_WORDLENGTH_8B;</span><br><span class="line">  huart1.Init.StopBits = UART_STOPBITS_1;</span><br><span class="line">  huart1.Init.Parity = UART_PARITY_NONE;</span><br><span class="line">  huart1.Init.Mode = UART_MODE_TX_RX;</span><br><span class="line">  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;</span><br><span class="line">  huart1.Init.OverSampling = UART_OVERSAMPLING_16;</span><br><span class="line">  <span class="keyword">if</span> (HAL_UART_Init(&amp;huart1) != HAL_OK)&#123;</span><br><span class="line">    Error_Handler();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>可以看出，我们只需要把得到的<code>huart1</code>的值传给这个函数<code>HAL_UART_Transmit</code>即可，不过因为是指针，<strong>所以不要忘记加上&amp;哦</strong>。<br>其他的参数就是<br><code>pData</code>：要传入的数据<br><code>Size</code>： 数据的大小<br><code>Timeout</code>：轮询等候的时间<br>这里我不得不再介绍再一下轮询的概念了。<br>轮询就是程序运行到了这里，一直等，直到数据完整发送或者轮询时间超过了，才执行下一条语句。<br><img src="https://img-blog.csdnimg.cn/f22df6f60dc647de9fd4ed8e0a7384bb.png" alt="">相应的方式就是后面带_DMA的DMA运输方式和后面带_IT中断方式。<br>在没学DMA之前，一般发送用轮询，接收用中断。<br>于是我们有了下面的代码</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> TIMEOUT 0xffff</span></span><br><span class="line"><span class="comment">/* USER CODE BEGIN WHILE */</span></span><br><span class="line"><span class="type">uint8_t</span> tx_dat[] = &#123;<span class="string">&quot;Hello World!&quot;</span>&#125;; </span><br><span class="line">  <span class="keyword">while</span> (<span class="number">1</span>)</span><br><span class="line">  &#123;</span><br><span class="line">  HAL_UART_Transmit(&amp;huart1,tx_dat, <span class="built_in">strlen</span>((<span class="type">char</span> *)tx_dat), TIMEOUT);</span><br><span class="line">HAL_Delay(<span class="number">1000</span>);</span><br><span class="line"><span class="comment">/* USER CODE END WHILE */</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>然后，我们烧入程序测试一下<br>测试方法的话：<br>首先，需要朋友们下载一个串口调试助手，这种东西网上一搜一大堆。（这里笔者使用的是野火多功能调试助手）<br>并把参数调整至和我们程序设计的一样<br><img src="https://img-blog.csdnimg.cn/20f58ddfaabf4b69828be494b6398be4.png" alt=""></p><p>然后，准备一个CH340，将CH340的Rx，Tx与STM32的Rx，Tx交叉连接，连接电脑。<br><img src="https://img-blog.csdnimg.cn/570146f94f3644fdb1a46a634996d256.png" alt=""><br>电脑上下载CH340的驱动并安装。</p><p><a href="https://blog.csdn.net/qq_52102933/article/details/126839474">CH340串口驱动的官网下载链接地址（包含各大操作系统平台）</a></p><p>接下来，让我们来看看结果吧</p><p><img src="https://img-blog.csdnimg.cn/ca3e559476a4403c98a8045d9e67663b.png" alt=""><br>看来是可以成功发送了</p><p>我们试试收信息呢<br>打开中断，重建工程<br><img src="https://img-blog.csdnimg.cn/1befe1f75a284036a2197167555008d9.png" alt="在这里插入图片描述"><br>在/Core/Src/stm32xxxx.it中找到USART1_IRQHandler<br>然后逐层深入，<br><img src="https://img-blog.csdnimg.cn/0b5ab59f622d422f93b02e57f702c68a.png" alt="在这里插入图片描述"><img src="https://img-blog.csdnimg.cn/4ab020f416244ece9efaae8c8340fa5d.png" alt=""><br>这里我们不选择事件中断，我们选择了完成中断(即UART接收完成再触发中断)，并选择自己重写回调函数。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">uint8_t</span> rx_dat = <span class="number">0</span>;</span><br><span class="line">... <span class="comment">//省略代码</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">... <span class="comment">//省略代码</span></span><br><span class="line">HAL_UART_Receive_IT(&amp;huart1, &amp;rx_dat, <span class="number">1</span>);</span><br><span class="line">... <span class="comment">//省略代码</span></span><br><span class="line">&#125;</span><br><span class="line">... <span class="comment">//省略代码</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">HAL_UART_RxCpltCallback</span><span class="params">(UART_HandleTypeDef *huart)</span><span class="comment">//开启</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(huart-&gt;Instance == USART1)&#123;</span><br><span class="line">HAL_GPIO_TogglePin(LED0_GPIO_Port, LED0_Pin);</span><br><span class="line">HAL_UART_Transmit(&amp;huart1,&amp;rx_dat, <span class="number">1</span>, TIMEOUT);</span><br><span class="line">HAL_UART_Receive_IT(&amp;huart1, &amp;rx_dat, <span class="number">1</span>);<span class="comment">//接收下一次</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样我们就做好了一个串口控制灯。</p><h2 id="7-4-接收不定长的数据">7.4 接收不定长的数据</h2><p>HAL库最让笔者头疼的就是这个接收函数只能接收固定长度的数据，而现实中，我们接收数据往往是不固定长度的。<br>STM32里支持空闲中断，于是笔者想到可以改进一下我们的代码。<br>/Core/Src/main.c</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">HAL_UART_Receive_IT(&amp;huart1, &amp;rx_dat, <span class="number">1</span>);</span><br></pre></td></tr></table></figure><p>/Core/Src/stm32xxxxx_it.c</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">UART_IDLE_Handler</span><span class="params">(UART_HandleTypeDef *huart)</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">USART1_IRQHandler</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">  HAL_UART_IRQHandler(&amp;huart1);</span><br><span class="line">  UART_IDLE_Handler(&amp;huart1); <span class="comment">//检测空闲事件中断并进行处理</span></span><br><span class="line">  </span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">UART_IDLE_Handler</span><span class="params">(UART_HandleTypeDef *huart)</span></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">UART_IDLE_Callback(huart);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>/Core/Src/usart.h</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">extern</span> <span class="type">uint8_t</span> rx_dat;</span><br><span class="line"><span class="type">void</span> <span class="title function_">UART_IDLE_Callback</span><span class="params">(UART_HandleTypeDef *huart)</span>;</span><br></pre></td></tr></table></figure><p>/Core/Src/usart.c</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">uint8_t</span> rx_dat = <span class="number">0</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">UART_IDLE_Callback</span><span class="params">(UART_HandleTypeDef *huart)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(__HAL_UART_GET_IT_SOURCE(huart,UART_IT_IDLE) == RESET)<span class="comment">//判断IDLE中断是否开启</span></span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">__HAL_UART_CLEAR_IDLEFLAG(huart);<span class="comment">//清除IDLE中断标志位</span></span><br><span class="line">__HAL_UART_DISABLE_IT(huart,UART_IT_IDLE);<span class="comment">//禁止IDLE事件中断</span></span><br><span class="line">HAL_UART_Transmit(&amp;huart1, &amp;rx_dat, <span class="number">1</span>, <span class="number">0xffff</span>);</span><br><span class="line">HAL_UART_Receive_IT(&amp;huart1, &amp;rx_dat, <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">HAL_UART_RxCpltCallback</span><span class="params">(UART_HandleTypeDef *huart)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(huart-&gt;Instance == USART1)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//FlagCompleted = RESET;</span></span><br><span class="line">__HAL_UART_ENABLE_IT(huart,UART_IT_IDLE);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>不过，这段代码写的非常差，笔者是打算利用每次发一个字符然后空闲处理，然后再继续接收，但是笔者没有考虑到数据传输的问题，以至于一旦数据过多，就会有一定的数据接收不到。于是接下来笔者将引入DMA来帮我们来处理这个问题。</p><h2 id="7-5-用dma来不定长接收">7.5 用DMA来不定长接收</h2><h3 id="7-5-1-认识dma">7.5.1 认识DMA</h3><p><strong>DMA基本介绍：</strong><br>DMA，全称Direct Memory Access，即直接存储器访问。<br>众所周知，CPU无时不刻的在处理着大量的事务，但有些事情却没有那么重要，比方说数据的复制和存储数据，如果我们把这部分的CPU资源拿出来，让CPU去处理其他的复杂计算事务，是不是能够更好的利用CPU的资源呢？<br>因此：转移数据（尤其是转移大量数据）是可以不需要CPU参与。比如希望外设A的数据拷贝到外设B，只要给两种外设提供一条数据通路，<strong>直接让数据由A拷贝到B 不经过CPU的处理</strong>。<br><img src="https://img-blog.csdnimg.cn/26199e12a68d4629a7a7dadb66c1bb1d.png#pic_center" alt=""><br>DMA就是基于以上设想设计的，它的作用就是解决大量数据转移过度消耗CPU资源的问题。有了DMA使CPU更专注于更加实用的操作–计算、控制等。</p><p><strong>DMA传输方式：</strong></p><ol><li>外设到内存</li><li>内存到外设</li><li>内存到内存</li><li>外设到外设</li></ol><p><strong>DMA传输参数：</strong><br>我们知道，数据传输，首先需要的是</p><ol><li>数据的源地址</li><li>数据传输位置的目标地址</li><li>传递数据多少的数据传输量</li><li>进行多少次传输的传输模式</li></ol><p>DMA所需要的核心参数，便是这四个。当用户将参数设置好，主要涉及源地址、目标地址、传输数据量这三个，DMA控制器就会启动数据传输，当剩余传输数据量为0时 达到传输终点，结束DMA传输 ，当然，DMA 还有循环传输模式 当到达传输终点时会重新启动DMA传输。也就是说只要剩余传输数据量不是0，而且DMA是启动状态，那么就会发生数据传输。</p><p><strong>DMA的主要特征</strong></p><ul><li><p>每个通道都直接连接专用的硬件DMA请求，每个通道都同样支持软件触发。这些功能通过软件来配置；</p></li><li><p>在同一个DMA模块上，多个请求间的优先权可以通过软件编程设置（共有四级：很高、高、中等和低），优先权设置相等时由硬件决定（请求0优先于请求1，依此类推）；</p></li><li><p>独立数据源和目标数据区的传输宽度（字节、半字、全字），模拟打包和拆包的过程。源和目标地址必须按数据传输宽度对齐； 支持循环的缓冲器管理；</p></li><li><p>每个通道都有3个事件标志（DMA半传输、DMA传输完成和DMA传输出错），这3个事件标志逻辑或成为一个单独的中断请求；</p></li><li><p>存储器和存储器间的传输、外设和存储器、存储器和外设之间的传输；</p></li><li><p>闪存、SRAM、外设的SRAM、APB1、APB2和AHB外设均可作为访问的源和目标； 可编程的数据传输数目：最大为65535。</p></li></ul><h3 id="7-5-2-配置dma">7.5.2 配置DMA</h3><p>从外设（TIMx、ADC、SPIx、I2Cx 和 USARTx）产生的 DMA 请求，通过逻辑或输入到<br>DMA 控制器，这就意味着同时只能有一个请求有效。外设的 DMA 请求，可以通过设置相应的<br>外设寄存器中的控制位，被独立地开启或关闭。<br><img src="https://img-blog.csdnimg.cn/a21177f7f1a04fd58f1ee3f694f35498.png#pic_center" alt=""><br>这里解释一下上面说的逻辑或，例如通道 1 的几个 DMA1 请求（ADC1、TIM2_CH3、TIM4_CH1），<br>这几个是通过逻辑或到通道 1 的，这样我们在同一时间，就只能使用其中的一个。其他通道也<br>是类似的。</p><p>例如我们要用到串口 1 的发送，属于 DMA1 的通道 4，<br>接下来我们就介绍下 DMA1 通道 4 的配置步骤：</p><ol><li><pre><code>使能 DMA1 时钟</code></pre></li></ol><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">__HAL_RCC_DMA1_CLK_ENABLE();</span><br></pre></td></tr></table></figure><ol start="2"><li>初始化 DMA1 数据流 4，包括配置通道，外设地址，存储器地址，传输数据量等。</li></ol><p>在这里的图像化配置会让代码多一些关于DMA的东西，就比如</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">__HAL_LINKDMA(&amp;UART1_Handler,hdmatx,UART1TxDMA_Handler);</span><br></pre></td></tr></table></figure><p>这 句 话 的 含 义 就 是 把 UART1_Handler 句 柄 的 成 员 变 量 <code>hdmatx</code> 和 DMA 句 柄<br><code>UART1TxDMA_Handler</code> 连接起来，是纯软件处理，没有任何硬件操作。<br>这里我们就点到为止，大家可以自行查阅相关HAL库代码和STM32寄存器。</p><ol start="3"><li>使能串口 1 的 DMA 发送</li></ol><p>在实验中，开启一次 DMA 传输传输函数如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//开启一次 DMA 传输</span></span><br><span class="line"><span class="comment">//huart:串口句柄</span></span><br><span class="line"><span class="comment">//pData：传输的数据指针</span></span><br><span class="line"><span class="comment">//Size:传输的数据量</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">MYDMA_USART_Transmit</span><span class="params">(UART_HandleTypeDef *huart, <span class="type">uint8_t</span> *pData, <span class="type">uint16_t</span> Size)</span></span><br><span class="line">&#123;</span><br><span class="line">HAL_DMA_Start(huart-&gt;hdmatx, (u32)pData, (<span class="type">uint32_t</span>)&amp;huart-&gt;Instance-&gt;DR, Size);</span><br><span class="line"><span class="comment">//开启 DMA 传输</span></span><br><span class="line"> huart-&gt;Instance-&gt;CR3 |= USART_CR3_DMAT;<span class="comment">//使能串口 DMA 发送</span></span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><p>HAL 库还提供了对串口的 DMA 发送的停止，暂停，继续等操作函数</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">HAL_StatusTypeDef <span class="title function_">HAL_UART_DMAStop</span><span class="params">(UART_HandleTypeDef *huart)</span>; <span class="comment">//停止</span></span><br><span class="line">HAL_StatusTypeDef <span class="title function_">HAL_UART_DMAPause</span><span class="params">(UART_HandleTypeDef *huart)</span>; <span class="comment">//暂停</span></span><br><span class="line">HAL_StatusTypeDef <span class="title function_">HAL_UART_DMAResume</span><span class="params">(UART_HandleTypeDef *huart)</span>;<span class="comment">//恢复</span></span><br></pre></td></tr></table></figure><ol start="4"><li>使能 DMA1 数据流 4，启动传输。</li></ol><p>使能 DMA 数据流的函数为：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">HAL_StatusTypeDef <span class="title function_">HAL_DMA_Start</span><span class="params">(DMA_HandleTypeDef *hdma, <span class="type">uint32_t</span> SrcAddress,</span></span><br><span class="line"><span class="params"> <span class="type">uint32_t</span> DstAddress, <span class="type">uint32_t</span> DataLength)</span>;</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">hdma： DMA 句柄，</span><br><span class="line">SrcAddress： 传输源地址，</span><br><span class="line">DstAddress：传输目标</span><br><span class="line">DataLength：传输的数据长度。</span><br></pre></td></tr></table></figure><p>通过以上 4 步设置，我们就可以启动一次 USART1 的 DMA 传输了。</p><ol start="5"><li>查询 DMA 传输状态</li></ol><p>在 DMA 传输过程中，我们要查询 DMA 传输通道的状态，使用的方法是：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">__HAL_DMA_GET_FLAG(&amp;UART1TxDMA_Handler,DMA_FLAG_TCIF3_7)</span><br></pre></td></tr></table></figure><p>获取当前传输剩余数据量：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">__HAL_DMA_GET_COUNTER(&amp;UART1TxDMA_Handler);</span><br></pre></td></tr></table></figure><p>DMA 相关的库函数我们就讲解到这里，大家可以查看固件库中文手册详细了解。</p><ol start="6"><li>DMA 中断使用方法</li></ol><p>DMA 中断对于每个流都有一个中断服务函数，比如 DMA1_Channel4 的中断服务函数为<br><code>DMA1_Channel4_IRQHandler</code>。同样，HAL 库也提供了一个通用的 DMA 中断处理函数<br><code>HAL_DMA_IRQHandler</code>，在该函数内部，会对 DMA 传输状态进行分析，然后调用相应的中断处理回调函数：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">HAL_UART_TxCpltCallback</span><span class="params">(UART_HandleTypeDef *huart)</span>;<span class="comment">//发送完成回调函数</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">HAL_UART_TxHalfCpltCallback</span><span class="params">(UART_HandleTypeDef *huart)</span>;/发送一半回调函数</span><br><span class="line"><span class="type">void</span> <span class="title function_">HAL_UART_RxCpltCallback</span><span class="params">(UART_HandleTypeDef *huart)</span>;<span class="comment">//接收完成回调函数</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">HAL_UART_RxHalfCpltCallback</span><span class="params">(UART_HandleTypeDef *huart)</span>;<span class="comment">//接收一半回调函数</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">HAL_UART_ErrorCallback</span><span class="params">(UART_HandleTypeDef *huart)</span>;<span class="comment">//传输出错回调函数</span></span><br></pre></td></tr></table></figure><p>对于串口 DMA 开启，使能数据流，启动传输，这些步骤，如果使用了中断，可以直接调<br>用 HAL 库函数 <code>HAL_USART_Transmit_DMA</code>，该函数声明如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, <span class="type">uint8_t</span> *pData, <span class="type">uint16_t</span> Size)</span><br></pre></td></tr></table></figure><p>不过使用这个函数的时候，要注意：</p><p>由于配置顺序不一样，用STM32CubeMX生成初始化代码之后，导致DMA的初始化函数被软件默认放置在了串口1初始化函数的后面，DMA还未初始化，就在串口一初始化函数里面配置了与DMA有关的参数，这就是串口1只能发送一次的原因。<br>就是</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">MX_USART1_UART_Init();</span><br><span class="line">MX_DMA_Init();</span><br></pre></td></tr></table></figure><p>改成</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">MX_DMA_Init();</span><br><span class="line">MX_USART1_UART_Init();</span><br></pre></td></tr></table></figure><p>参考：<br><a href="https://blog.csdn.net/weixin_46358764/article/details/123116920">HAL库——串口DMA发送函数HAL_UART_Transmit_DMA只能发送一次的原因之一</a></p><ol start="7"><li>DMA 中断相关宏</li></ol><ul><li>使能中断的宏定义</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">__HAL_UART_ENABLE_IT(__HANDLE__, __INTERRUPT__)</span><br></pre></td></tr></table></figure><ul><li>判断是触发哪个中断的宏定义</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">__HAL_UART_GET_FLAG(__HANDLE__, __IT__)</span><br></pre></td></tr></table></figure><ul><li>清除IDLE的中断标志位的宏定义</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">__HAL_UART_CLEAR_IDLEFLAG(__HANDLE__)</span><br></pre></td></tr></table></figure><h3 id="7-5-3-dma实现uart接收">7.5.3 DMA实现UART接收</h3><p>这里我们重写之前没写好的不定长接收：</p><p>/Core/Src/main.c</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">... <span class="comment">//省略代码</span></span><br><span class="line">__HAL_UART_ENABLE_IT(&amp;huart1 , UART_IT_IDLE);<span class="comment">// 使能串口空闲中断</span></span><br><span class="line">... <span class="comment">//省略代码</span></span><br></pre></td></tr></table></figure><p>空闲中断默认关闭，只要自己手动打开。<br>我们的核心逻辑就是每次空闲的时候就说明发完了，我们就去处理缓存区里的数据。</p><p>/Core/Src/stm32xxxxx_it.c</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">... <span class="comment">//省略代码</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">USART1_IRQHandler</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">  HAL_UART_IRQHandler(&amp;huart1);</span><br><span class="line">  UART_IDLE_Handler(&amp;huart1); <span class="comment">//检测空闲事件中断并进行处理</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">UART_IDLE_Handler</span><span class="params">(UART_HandleTypeDef *huart)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(huart-&gt;Instance == USART1)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">// 判断是否是空闲中断</span></span><br><span class="line"><span class="keyword">if</span>(__HAL_UART_GET_FLAG(huart,UART_FLAG_IDLE) != RESET)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">// 清除空闲中断标志（否则会一直不断进入中断）</span></span><br><span class="line">__HAL_UART_CLEAR_IDLEFLAG(huart);</span><br><span class="line"><span class="comment">//调用中断处理函数</span></span><br><span class="line">UART_IDLE_Callback(huart);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">... <span class="comment">//省略代码</span></span><br></pre></td></tr></table></figure><p>这段代码应该要熟悉，这就是一个HAL库的没有封装完的一个原始代码的框架，也是我们处理中断的一般流程。判断<strong>中断标志位-&gt;清除中断标志位-&gt;回调函数</strong>，本来这里可以直接实现的，不过笔者还是模仿HAL库的方式作了一个回调函数，也方便以后我们调用。</p><p>/Core/Src/usart.h</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">... <span class="comment">//省略代码</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> RX_STR_LEN 255</span></span><br><span class="line"><span class="keyword">extern</span> <span class="type">char</span> Rx_str[RX_STR_LEN];</span><br><span class="line"><span class="keyword">extern</span> <span class="type">uint8_t</span> data_length;</span><br><span class="line"><span class="type">void</span> <span class="title function_">UART_IDLE_Callback</span><span class="params">(UART_HandleTypeDef *huart)</span>;</span><br><span class="line">... <span class="comment">//省略代码</span></span><br></pre></td></tr></table></figure><p>/Core/Src/usart.c</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="type">char</span> Rx_str[RX_STR_LEN] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line">... <span class="comment">//省略代码</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">UART_IDLE_Callback</span><span class="params">(UART_HandleTypeDef *huart)</span></span><br><span class="line">&#123;</span><br><span class="line">HAL_UART_DMAStop(huart);<span class="comment">// 停止本次DMA传输</span></span><br><span class="line"><span class="type">uint8_t</span> data_length  = RX_STR_LEN - __HAL_DMA_GET_COUNTER(&amp;hdma_usart1_rx);<span class="comment">//计算收到字符长度</span></span><br><span class="line">HAL_UART_Transmit(&amp;huart1, (<span class="type">uint8_t</span> *)Rx_str, data_length,<span class="number">0xffff</span>);</span><br><span class="line"><span class="built_in">memset</span>(Rx_str, <span class="number">0</span>, data_length);<span class="comment">//初始化Rx_str</span></span><br><span class="line">data_length  = <span class="number">0</span>;</span><br><span class="line">HAL_UART_Receive_DMA(huart, (<span class="type">uint8_t</span> *)Rx_str, RX_STR_LEN); <span class="comment">//重新打开DMA接收</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里就是空闲中断函数了，就是我们处理不定长数据的核心了。这里我们先停止DMA的传输，以免数据被覆盖。然后我们就直接处理我们DMA接收到了的数据。之后不要忘记重新初始化缓存器和长度和重新打开DMA接收了哦。</p><h2 id="7-6-改写printf-进入变参函数的世界">7.6 改写printf 进入变参函数的世界</h2><h3 id="7-6-1-自己的print函数">7.6.1 自己的print函数</h3><p>朋友们有没有发现，我们每次发送一个数据的时候，数据里面不能含有变量，这十分的不方便。回想我们曾经在c语言中学习过一个叫printf的变参函数，这里我们可以想想能不能重写这个printf来方便我们数据的收发呢。<br>重写printf之前，让我补习一下c语言的一些基础知识。<br>总所周知，函数参数是以栈的形式存取的，从右往左入栈。<br>首先是参数存放的格式：参数存放在内存的堆栈里，在执行函数的时候，从最后一个开始入栈。因此<strong>栈底高地址，栈顶低地址</strong>。举个例子，</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">fun</span><span class="params">(<span class="type">int</span> x, <span class="type">float</span> y, <span class="type">char</span> z)</span>;</span><br></pre></td></tr></table></figure><p>那么，我们在调用函数的时候就是z先进栈，然后y，然后z，内存中存放顺序为x-&gt;y-&gt;z，因此，从理论上说，我们只要探测到一个变量的地址，知道其他变量的类型，就能通过指针移位运算，顺藤摸瓜找到其他变量，这就是变参函数的核心。<br>下面是&lt;stdarg.h&gt;的几个重要的宏</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="type">char</span> *  va_list; </span><br></pre></td></tr></table></figure><p>va-list是一个char类型的指针，当被调用函数使用一个可变参数时，它声明一个类型为va-list的变量，该变量用来指向va-arg和va-end所需信息的位置。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> va_start(ap,v)  ( ap = (va_list)&amp;v + _INTSIZEOF(v) ) </span></span><br></pre></td></tr></table></figure><p>va-start它使va-list类型变量<strong>ap指向被传递给函数的可变参数表中的第一个参数</strong>，在第一次调用va-arg和va-end之前，必须首先调用该宏。va-start的第二个参数lastfix是传递给被调用函数的最后一个固定参数的标识符。<strong>va-start使ap只指向lastfix之外的可变参数表中的第一个参数</strong>，很明显它先得到第一个参数内存地址，然后又加上这个参数的内存大小，就是下个参数的内存地址了。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> va_arg(ap,type)    ( *(type *)((ap += _INTSIZEOF(type)) - _INTSIZEOF(type)) )</span></span><br></pre></td></tr></table></figure><p>type va-arg(va-list ap,type)也是一个宏，其使用有双重目的，第一个是返回ap所指对象的值，第二个是修改参数指针ap使其增加以指向表中下一个参数。va-arg的第二个参数提供了修改参数指针所必需的信息。<strong>在第一次使用va-arg时，它返回可变参数表中的第一个参数，后续的调用都返回表中的下一个参数。</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> va_end(ap)      ( ap = (va_list)0 )</span></span><br></pre></td></tr></table></figure><p>va-end必须在va-arg读完所有参数后再调用，否则会产生意想不到的后果。特别地，当可变参数表函数在程序执行过程中不止一次被调用时，<strong>在函数体每次处理完可变参数表之后必须调用一次va-end，以保证正确地恢复栈。</strong><br>我们先照猫画虎地写一下，然后测试一下</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">print</span><span class="params">(<span class="type">char</span> *Data, ...)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">const</span> <span class="type">char</span> *s;</span><br><span class="line">va_list ap;</span><br><span class="line">va_start(ap, Data);</span><br><span class="line">s = va_arg(ap,<span class="type">const</span> <span class="type">char</span> *);</span><br><span class="line"><span class="keyword">for</span> ( ; *s; s++)</span><br><span class="line">&#123;</span><br><span class="line">HAL_UART_Transmit(&amp;huart1,(<span class="type">uint8_t</span> *)s,<span class="number">1</span>,<span class="number">0xFF</span>);</span><br><span class="line">&#125;</span><br><span class="line">s = va_arg(ap,<span class="type">const</span> <span class="type">char</span> *);</span><br><span class="line"><span class="keyword">for</span> ( ; *s; s++)</span><br><span class="line">&#123;</span><br><span class="line">HAL_UART_Transmit(&amp;huart1,(<span class="type">uint8_t</span> *)s,<span class="number">1</span>,<span class="number">0xFF</span>);</span><br><span class="line">&#125;</span><br><span class="line">va_end(ap);</span><br><span class="line">&#125;</span><br><span class="line">print(<span class="string">&quot;&quot;</span>,<span class="string">&quot;hello\n&quot;</span>,<span class="string">&quot;Judge\n&quot;</span>);</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>看来我们成功了<br><img src="https://img-blog.csdnimg.cn/3f04ce7465d44a21bb4fce8380d0049a.png" alt=""><br>明白了变参函数的本质，那我们就编写一个可以用于串口的print吧</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">print</span><span class="params">(<span class="type">char</span> *Data, ... )</span></span><br><span class="line">&#123;</span><br><span class="line"> <span class="type">const</span> <span class="type">char</span> *s;</span><br><span class="line"><span class="type">int</span> d;</span><br><span class="line"><span class="type">char</span> buf[<span class="number">16</span>];</span><br><span class="line"><span class="type">uint8_t</span> txdata;</span><br><span class="line">va_list ap;</span><br><span class="line">va_start(ap, Data);</span><br><span class="line"><span class="keyword">while</span> (*Data != <span class="number">0</span>) <span class="comment">// 判断是否到达字符串结束符</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (*Data == <span class="number">0x5c</span>) <span class="comment">//&#x27;\&#x27;</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">switch</span> (*++Data)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">case</span> <span class="string">&#x27;r&#x27;</span>: <span class="comment">// 回车符</span></span><br><span class="line">txdata = <span class="number">0x0d</span>;</span><br><span class="line">HAL_UART_Transmit(&amp;huart1, &amp;txdata, <span class="number">1</span>, <span class="number">0xFF</span>);</span><br><span class="line">Data++;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="string">&#x27;n&#x27;</span>: <span class="comment">// 换行符</span></span><br><span class="line">txdata = <span class="number">0x0a</span>;</span><br><span class="line">HAL_UART_Transmit(&amp;huart1, &amp;txdata, <span class="number">1</span>, <span class="number">0xFF</span>);</span><br><span class="line">Data++;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">default</span>:</span><br><span class="line">Data++;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (*Data == <span class="string">&#x27;%&#x27;</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">switch</span> (*++Data)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">case</span> <span class="string">&#x27;s&#x27;</span>: <span class="comment">// 字符串</span></span><br><span class="line">s = va_arg(ap, <span class="type">const</span> <span class="type">char</span> *);</span><br><span class="line"><span class="keyword">for</span> (; *s; s++)</span><br><span class="line">&#123;</span><br><span class="line">HAL_UART_Transmit(&amp;huart1, (<span class="type">uint8_t</span> *)s, <span class="number">1</span>, <span class="number">0xFF</span>);</span><br><span class="line"><span class="keyword">while</span> (__HAL_UART_GET_FLAG(&amp;huart1, UART_FLAG_TXE) == <span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line">Data++;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="string">&#x27;d&#x27;</span>: <span class="comment">// 十进制</span></span><br><span class="line">d = va_arg(ap, <span class="type">int</span>);</span><br><span class="line">itoa(d, buf, <span class="number">10</span>);</span><br><span class="line"><span class="keyword">for</span> (s = buf; *s; s++)</span><br><span class="line">&#123;</span><br><span class="line">HAL_UART_Transmit(&amp;huart1, (<span class="type">uint8_t</span> *)s, <span class="number">1</span>, <span class="number">0xFF</span>);</span><br><span class="line"><span class="keyword">while</span> (__HAL_UART_GET_FLAG(&amp;huart1, UART_FLAG_TXE) == <span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line">Data++;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">default</span>:</span><br><span class="line">Data++;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">HAL_UART_Transmit(&amp;huart1, (<span class="type">uint8_t</span> *)Data, <span class="number">1</span>, <span class="number">0xFF</span>);</span><br><span class="line">Data++;</span><br><span class="line"><span class="keyword">while</span> (__HAL_UART_GET_FLAG(&amp;huart1, UART_FLAG_TXE) == <span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>注：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">char</span> *<span class="title function_">itoa</span><span class="params">( <span class="type">int</span> value, <span class="type">char</span> *<span class="built_in">string</span>,<span class="type">int</span> radix)</span>;</span><br><span class="line">value：欲转换的数据。</span><br><span class="line"><span class="built_in">string</span>：目标字符串的地址。</span><br><span class="line">radix：转换后的进制数，可以是<span class="number">10</span>进制、<span class="number">16</span>进制等。</span><br></pre></td></tr></table></figure><p>这里笔者只做了<code>%d</code>，<code>%s</code>，<code>\n</code>，<code>\r</code>的处理，其他的功能或者更还原的printf还需要朋友们自行修改。</p><h3 id="7-6-2-调用重定向的printf和scanf">7.6.2 调用重定向的printf和scanf</h3><p>之前的章节，我们移植了稚晖君的重定向的<code>printf</code>和<code>scanf</code>，我们可以直接调用这两个函数来发送和接收，指定格式字符串，和我们平时c语言的用法基本无异。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;retarget.h&quot;</span></span></span><br><span class="line">RetargetInit(&amp;huart1);</span><br></pre></td></tr></table></figure><p><code>huart1</code>是我们在HAL库图形化界面配置的。<br>接下来直接愉快地使用printf和scanf：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">char</span> buf[<span class="number">100</span>];</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\r\nYour name: &quot;</span>);</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>, buf);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\r\nHello, %s!\r\n&quot;</span>, buf);</span><br></pre></td></tr></table></figure><p>也可以在断言机制里添加错误反馈了：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">ifdef</span> USE_FULL_ASSERT</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">assert_failed</span><span class="params">(<span class="type">uint8_t</span>* file, <span class="type">uint32_t</span> line)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Wrong parameters value: file %s on line %d\r\n&quot;</span>, file, line);</span><br><span class="line">    <span class="keyword">while</span>(<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">#end</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 跟我一起写STM32 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> stm32 </tag>
            
            <tag> 嵌入式 </tag>
            
            <tag> c语言 </tag>
            
            <tag> 单片机 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>按下按键(含EXTI)——跟我一起写STM32(第四期)</title>
      <link href="/2023/01/10/STM32/%E6%8C%89%E4%B8%8B%E6%8C%89%E9%94%AE(%E5%90%ABEXTI)%E2%80%94%E2%80%94%E8%B7%9F%E6%88%91%E4%B8%80%E8%B5%B7%E5%86%99STM32(%E7%AC%AC%E5%9B%9B%E6%9C%9F)/"/>
      <url>/2023/01/10/STM32/%E6%8C%89%E4%B8%8B%E6%8C%89%E9%94%AE(%E5%90%ABEXTI)%E2%80%94%E2%80%94%E8%B7%9F%E6%88%91%E4%B8%80%E8%B5%B7%E5%86%99STM32(%E7%AC%AC%E5%9B%9B%E6%9C%9F)/</url>
      
        <content type="html"><![CDATA[<span id="more"></span><h3 id="文章目录">文章目录</h3><ul><li><a href="#6-%E6%8C%89%E4%B8%8B%E6%8C%89%E9%94%AE">6 按下按键</a><ul><li><a href="#61-%E6%A3%80%E6%B5%8B%E4%B8%80%E4%B8%AA%E6%8C%89%E9%94%AE%E7%9A%84%E6%8C%89%E4%B8%8B">6.1 检测一个按键的按下</a></li><li><a href="#62-%E7%BB%99%E6%8C%89%E9%94%AE%E6%B6%88%E6%8A%96">6.2 给按键消抖</a></li><li><a href="#63-%E6%89%AB%E6%8F%8F%E6%8C%89%E9%94%AE">6.3 扫描按键</a></li><li><a href="#64-%E5%BC%95%E5%85%A5%E4%B8%AD%E6%96%AD%E4%B8%AD%E6%96%AD%E5%90%91%E9%87%8F%E8%A1%A8">6.4 引入中断——中断向量表</a></li><li><a href="#65-%E5%BC%95%E5%85%A5%E4%B8%AD%E6%96%AD%E4%B8%AD%E6%96%AD%E4%BC%98%E5%85%88%E7%BA%A7">6.5 引入中断——中断优先级</a></li><li><a href="#66-%E6%8C%89%E9%94%AE%E7%9A%84%E6%A3%80%E6%B5%8B%E5%A4%96%E9%83%A8%E4%B8%AD%E6%96%ADexti">6.6 按键的检测——外部中断EXTI</a></li><li><a href="#67-%E4%BF%AE%E6%94%B9hal%E5%BA%93%E5%BA%95%E5%B1%82%E6%BA%90%E7%A0%81">6.7 修改HAL库底层源码</a></li><li><a href="#68-%E4%B8%8D%E9%9C%80%E8%A6%81%E6%8C%89%E7%9A%84%E6%8C%89%E9%92%AE%E8%BD%AF%E4%B8%AD%E6%96%AD">6.8 不需要按的按钮——软中断</a></li></ul></li></ul><h1 id="6-按下按键">6 按下按键</h1><h2 id="6-1-检测一个按键的按下">6.1 检测一个按键的按下</h2><p>我们分析一下下面的原理图，不难看出，对于KEY0-KEY2这样的按钮，只要按下就与GND导通了。所以，我们要检测这个按钮是否按下，就可以读取这个按钮相应的GPIO的电平情况：检测为低电平就是有按钮按下。<br><img src="https://img-blog.csdnimg.cn/bfeb6bbc909f4ff38d5c53bbc0258c24.png" alt=""></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">HAL_GPIO_ReadPin(GPIOx, GPIO_Pin)</span><br></pre></td></tr></table></figure><p>有写就有读嘛，参数就是我们之前学的哪些参数，返回值就是高电平或者低电平<code>(GPIO_PIN_SET/GPIO_PIN_RESET)</code><br>那代码的核心思想有了，我们再来想想流程：<br><strong>（基础三件套以后就不重复了：时钟树(先使能RCC)，Debug工具配置，勾选生成.c/.h）</strong><br><strong>1. 配置GPIO</strong></p><p>a) 输入/输出（既然要读它的电平，那么这次就得是配置为输入模式了）</p><p>b) 电气属性：</p><p>GPIO 速度：GPIO速度上我们不作要求<br>GPIO上/下拉：上拉。这样可以保证在我们按下按钮之前这个GPIO的电平为高电平。<br><img src="https://img-blog.csdnimg.cn/7f97c48f7e374806a74a4877adc7cdc1.png" alt=""><br><strong>2. 检测方式</strong>：这里我们先用最简单的方式while+if来检测按键按下</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* USER CODE BEGIN WHILE */</span></span><br><span class="line">  <span class="keyword">while</span> (<span class="number">1</span>)</span><br><span class="line">  &#123;</span><br><span class="line">  <span class="keyword">if</span>(GPIO_PIN_RESET == HAL_GPIO_ReadPin(KEY1_GPIO_Port,KEY1_Pin))</span><br><span class="line">  &#123;</span><br><span class="line">  HAL_GPIO_TogglePin(LED1_GPIO_Port, LED1_Pin);</span><br><span class="line">  &#125;</span><br><span class="line"><span class="comment">/* USER CODE END WHILE */</span></span><br></pre></td></tr></table></figure><h2 id="6-2-给按键消抖">6.2 给按键消抖</h2><p>不过，很多朋友还是发现这样的按钮时不时会失灵，这是为什么呢？<br><img src="https://img-blog.csdnimg.cn/40835d4581de4df29aac775573752943.png" alt=""><br>这其实就是因为我们按下按钮的时候产生了抖动</p><p>不过我们可以给按钮加一些延时来跳过这些抖动<br><img src="https://img-blog.csdnimg.cn/0fdd1b536a2d4119b4674c1425b92a59.png#pic_center" alt=""><br>代码实现就是</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* USER CODE BEGIN WHILE */</span></span><br><span class="line">  <span class="keyword">while</span> (<span class="number">1</span>)</span><br><span class="line">  &#123;</span><br><span class="line">  <span class="keyword">if</span>(GPIO_PIN_RESET == HAL_GPIO_ReadPin(KEY1_GPIO_Port,KEY1_Pin))</span><br><span class="line">  &#123;</span><br><span class="line">  HAL_Delay(<span class="number">20</span>);</span><br><span class="line">  HAL_GPIO_TogglePin(LED1_GPIO_Port, LED1_Pin);</span><br><span class="line">  <span class="keyword">while</span>(GPIO_PIN_RESET == HAL_GPIO_ReadPin(KEY1_GPIO_Port,KEY1_Pin));</span><br><span class="line">  HAL_Delay(<span class="number">20</span>);</span><br><span class="line">  &#125;</span><br><span class="line"><span class="comment">/* USER CODE END WHILE */</span></span><br></pre></td></tr></table></figure><p>这样我们的按钮至少很听话了。</p><h2 id="6-3-扫描按键">6.3 扫描按键</h2><p>假如我们的按键很多，那么就需要扫描按键。<br>创建HardWare/key</p><p>key.h</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// Created by Whisky on 2023/1/8.</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">ifndef</span> HELLOWORLD_KEY_H</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> HELLOWORLD_KEY_H</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;main.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> KEY2_Pin GPIO_PIN_2</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> KEY2_GPIO_Port GPIOE</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> KEY1_Pin GPIO_PIN_3</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> KEY1_GPIO_Port GPIOE</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> KEY0_Pin GPIO_PIN_4</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> KEY0_GPIO_Port GPIOE</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> KEYWKUP_Pin GPIO_PIN_0</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> KEYWKUP_GPIO_Port GPIOA</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __KEY_ALL_CLK_ON() do&#123;__HAL_RCC_GPIOA_CLK_ENABLE();__HAL_RCC_GPIOE_CLK_ENABLE();&#125;while(0)</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> KEY0        HAL_GPIO_ReadPin(KEY0_GPIO_Port,KEY0_Pin)  <span class="comment">//KEY0按键PE4</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> KEY1        HAL_GPIO_ReadPin(KEY1_GPIO_Port,KEY1_Pin)  <span class="comment">//KEY1按键PE3</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> KEY2        HAL_GPIO_ReadPin(KEY2_GPIO_Port,KEY2_Pin) <span class="comment">//KEY2按键PE2</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> WK_UP       HAL_GPIO_ReadPin(KEYWKUP_GPIO_Port,KEYWKUP_Pin)  <span class="comment">//WKUP按键PA0</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> KEY0_PRES     1</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> KEY1_PRES    2</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> KEY2_PRES    3</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> KEYWKUP_PRES    4</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">key_init</span><span class="params">(<span class="type">void</span>)</span>;</span><br><span class="line"><span class="type">uint8_t</span> <span class="title function_">key_scan</span><span class="params">(<span class="type">uint8_t</span> mode)</span>;</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span> <span class="comment">//HELLOWORLD_KEY_H</span></span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>key.c</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// Created by Whisky on 2023/1/8.</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;key.h&quot;</span></span></span><br><span class="line"><span class="type">void</span> <span class="title function_">key_init</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    GPIO_InitTypeDef GPIO_Initure;</span><br><span class="line">    __KEY_ALL_CLK_ON();</span><br><span class="line"></span><br><span class="line">    GPIO_Initure.Mode=GPIO_MODE_INPUT;</span><br><span class="line">    GPIO_Initure.Pull=GPIO_PULLDOWN;</span><br><span class="line">    GPIO_Initure.Speed=GPIO_SPEED_FREQ_HIGH;</span><br><span class="line">    GPIO_Initure.Pin=KEYWKUP_Pin;</span><br><span class="line">    HAL_GPIO_Init(KEYWKUP_GPIO_Port,&amp;GPIO_Initure);</span><br><span class="line"></span><br><span class="line">    GPIO_Initure.Mode=GPIO_MODE_INPUT;</span><br><span class="line">    GPIO_Initure.Pull=GPIO_PULLUP;</span><br><span class="line">    GPIO_Initure.Speed=GPIO_SPEED_FREQ_HIGH;</span><br><span class="line">    GPIO_Initure.Pin=KEY0_Pin;</span><br><span class="line">    HAL_GPIO_Init(KEY0_GPIO_Port,&amp;GPIO_Initure);</span><br><span class="line">    GPIO_Initure.Pin=KEY1_Pin;</span><br><span class="line">    HAL_GPIO_Init(KEY1_GPIO_Port,&amp;GPIO_Initure);</span><br><span class="line">    GPIO_Initure.Pin=KEY2_Pin;</span><br><span class="line">    HAL_GPIO_Init(KEY2_GPIO_Port,&amp;GPIO_Initure);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//同时按下的优先级 ： KEYWKUP &gt; KEY2 &gt; KEY1 &gt; KEY0</span></span><br><span class="line"><span class="comment">//mode : 0  不连续按 当按键按下不放时，只返回第一次按下的值</span></span><br><span class="line"><span class="comment">//       1  连续按   当按键按下不放时，每次调用这个函数都会返回值</span></span><br><span class="line"></span><br><span class="line"><span class="type">uint8_t</span> <span class="title function_">key_scan</span><span class="params">(<span class="type">uint8_t</span> mode)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">static</span> <span class="type">uint8_t</span> key_up=<span class="number">1</span>;     <span class="comment">//按键松开标志</span></span><br><span class="line">    <span class="keyword">if</span>(mode==<span class="number">1</span>)key_up=<span class="number">1</span>;    <span class="comment">//支持连按</span></span><br><span class="line">    <span class="keyword">if</span>(key_up&amp;&amp;(KEY0==<span class="number">0</span>||KEY1==<span class="number">0</span>||KEY2==<span class="number">0</span>||WK_UP==<span class="number">1</span>))</span><br><span class="line">    &#123;</span><br><span class="line">        delay_ms(<span class="number">10</span>);</span><br><span class="line">        key_up=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span>(KEY0==<span class="number">0</span>)       <span class="keyword">return</span> KEY0_PRES;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(KEY1==<span class="number">0</span>)  <span class="keyword">return</span> KEY1_PRES;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(KEY2==<span class="number">0</span>)  <span class="keyword">return</span> KEY2_PRES;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(WK_UP==<span class="number">1</span>) <span class="keyword">return</span> KEYWKUP_PRES;</span><br><span class="line">    &#125;<span class="keyword">else</span> <span class="keyword">if</span>(KEY0==<span class="number">1</span>&amp;&amp;KEY1==<span class="number">1</span>&amp;&amp;KEY2==<span class="number">1</span>&amp;&amp;WK_UP==<span class="number">0</span>)key_up=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;   <span class="comment">//无按键按下</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里主要参考了原子的代码，扫描的时候按键消抖延时也不能太久，不然会出现“读太慢”现象。<br>这样我们在<code>while</code>中调用<code>key_sacn</code>就能实现对多个按键的扫描了。</p><h2 id="6-4-引入中断-中断向量表">6.4 引入中断——中断向量表</h2><p>不过，有的时候，我们需要做一些别的事情，而不能用一直轮询的方式检测按键(即在<code>while</code>中调用<code>key_sacn</code>)。毕竟，一直轮询的方式检测按键的电平实在是太过浪费咱们CPU的处理能力，这种事情其实可以交给外部中断来处理。<br>处理器中的中断：在处理器中，中断是一个过程，即CPU在正常执行程序的过程中，遇到外部/内部的紧急事件需要处理，暂时中止当前程序的执行，转而去为处理紧急的事件，待处理完毕后再返回被打断的程序处继续往下执行。中断在计算机多任务处理，尤其是即时系统中尤为重要。比如uCOS，FreeRTOS等。<br>意义：中断能提高CPU的效率，同时能对突发事件做出实时处理。实现程序的并行化，实现嵌入式系统进程之间的切换。<br>那有朋友就要问了，它是怎么实现的呢？<br>这里不得不提到中断向量表了。<br>我们打开/Core/Startup 里面的.s文件，这是一个由arm汇编编写的stm32的启动文件，它的工作主要是：</p><ol><li>设置堆栈指针 SP = _initial_sp</li><li>设置PC指针 = Reset_Handler</li><li>配置系统时钟</li><li>配置外部 SRAM 用于程序变量等数据存储（可选）</li><li>调用C库的 _main 函数，最终调用main函数</li></ol><p>我们主要看一下我们的主角：中断向量表<br><img src="https://img-blog.csdnimg.cn/f7c30dcb553b4261a6df50a2f0a411f4.png" alt=""><br>这里写出了很多当发生了某个事件就要执行对应中断服务函数的清单，这就是中断向量表。<br>一些非一开始就要用上的中断服务函数，HAL库进行了虚函数处理（__weak函数用于定义变量或者函数，常见于定义函数，在MDK ARM链接时优先链接定义为非weak的函数或变量，如果找不到则再链接weak函数，默认的一般里面也是空函数）<br>而我们重写了的中断服务函数的处理过程一般就是</p><p>进入中断：<br>(1)保存现场(XPSR、PC、LR、R12、R3、R2、R1 和 R0 这 8 个寄存器，具体含义可以参考arm体系结构)到堆栈里面<br>(2)一旦入栈结束，ISR（中断服务例程，就是中断服务函数）便开始执行<br>晚到的中断会重新取ISR地址，但无需再次保存现场(晚到中断机制)</p><p>退出中断：<br>(1)中断前的现场被自动从堆栈中恢复<br>(2)一旦出栈完成，继续执行被中断打断的指令<br>出栈的过程也可被打断，使得随时可以响应新的中断，而不再进行现场保存(咬尾中断机制)</p><p>这里我们可以知道：中断操作有三部曲：<strong>入栈+ISR+出栈</strong><br>采用了咬尾中断机制和晚到中断机制来避免对一次连续的嵌套中断反复出入栈，浪费时间的操作。</p><h2 id="6-5-引入中断-中断优先级">6.5 引入中断——中断优先级</h2><p>其实刚刚提到中断嵌套的时候就有朋友发现了，中断是有优先级的<br>STM32的中断有两种优先级：1、抢占式优先级 2、响应式优先级。</p><p><strong>抢占式优先级</strong>的特点是：具有高抢占式优先级的中断可以在具有低<strong>抢占</strong>式优先级的中断处理过程中被响应，即<strong>中断嵌套</strong>。</p><p><strong>响应式优先级</strong>的特点是：当两个中断源的抢占式优先级相同时，高响应优先级的中断优先被响应，这两个中断将<strong>没有嵌套关系</strong>。</p><p>相同时，如果有低响应优先级中断正在执行，那么高响应优先级的中断要等待已被响应的低响应优先级的中断执行结束后才能得到响应。当一个中断到来后，如果正在处理另一个中断，这个后到来的中断就要等到前一个中断处理完之后才能被处理。如果这两个中断同时到达，则中断控制器根据他们的响应优先级高低来决定先处理哪一个；如果他们的抢占式优先级和响应优先级都相等，则根据他们在中断表中的排位顺序决定先处理哪一个。每一个中断源都必须定义2个优先级。</p><p>STM32设置了组（Group）的概念来管理这些优先级。每一个中断都有一个专门的寄存器（Interrupt Priority Registers）来描述该中断的抢占式优先级和响应式优先级。在这个寄存器中STM32使用了4个二进制位来描述优先级。4位的中断优先级可以分成2组，从高位看，前面定义的是抢占式优先级，后面是响应优先级。按照这种分组，4位一共可以分成5组，分别为：</p><p>第0组：所有4位用于指定响应式优先级；<br>第1组：最高1位用于指定抢占式优先级，后面3位用于指定响应式优先级；<br>第2组：最高2位用于指定抢占式优先级，后面2位用于指定响应式优先级；<br>第3组：最高3位用于指定抢占式优先级，后面1位用于指定响应式优先级；<br>第4组：所有4位用于指定抢占式优先级。</p><p>这里是HAL库的宏，可以眼熟一下</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> NVIC_PriorityGroup_0         ((uint32_t)0x700) <span class="comment">/*!&lt; 0 bits for pre-emption priority</span></span></span><br><span class="line"><span class="comment"><span class="meta">                                                            4 bits for subpriority */</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> NVIC_PriorityGroup_1         ((uint32_t)0x600) <span class="comment">/*!&lt; 1 bits for pre-emption priority</span></span></span><br><span class="line"><span class="comment"><span class="meta">                                                            3 bits for subpriority */</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> NVIC_PriorityGroup_2         ((uint32_t)0x500) <span class="comment">/*!&lt; 2 bits for pre-emption priority</span></span></span><br><span class="line"><span class="comment"><span class="meta">                                                            2 bits for subpriority */</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> NVIC_PriorityGroup_3         ((uint32_t)0x400) <span class="comment">/*!&lt; 3 bits for pre-emption priority</span></span></span><br><span class="line"><span class="comment"><span class="meta">                                                            1 bits for subpriority */</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> NVIC_PriorityGroup_4         ((uint32_t)0x300) <span class="comment">/*!&lt; 4 bits for pre-emption priority</span></span></span><br><span class="line"><span class="comment"><span class="meta">                                                            0 bits for subpriority */</span></span></span><br></pre></td></tr></table></figure><p>知道了这些概念，我们再用NVIC串一下知识<br>NVIC的全称是Nested vectoredinterrupt controller，即嵌套向量中断控制器。<br>功能：</p><ol><li>中断管理-&gt;使能或者禁止中断</li><li>支持异常及中断向量化处理-&gt;采用向量表处理异常，M0处理器会从存储器的向量表中，自动定位异常的程序入口</li><li>支持嵌套中断-&gt;中断优先级的管理</li></ol><h2 id="6-6-按键的检测-外部中断exti">6.6 按键的检测——外部中断EXTI</h2><p>我们直接上手册<br><img src="https://img-blog.csdnimg.cn/d0bb04fdab7c4a538f7145ac573bbeda.png#pic_center" alt=""><br>外部信号进入经过1的边沿检测电路，检测是否符合(有2和3的上升沿和下降沿选择寄存器决定)，产生信号，然后和4软件中断事件寄存器或值，(在这里也就说可以写入软件中断事件寄存器模拟中断和事件)，之后产生信号一分为二，看5挂起屏蔽寄存器和7事件屏蔽寄存器，中断挂起，如果事件没有屏蔽，首先会产生事件，进入脉冲发生器。如果6中断屏蔽寄存器也没有屏蔽，则然后进入NVIC。</p><p>基本的外部中断就是MCU上GPIO引脚作为输入引脚时，电平变化产生的中断。<br>GPIO的映射关系图如下所示</p><p><img src="https://img-blog.csdnimg.cn/c0e53c38f2f8485cb51fa4af4a2c3ebd.png" alt=""><br>那我们检测按键需要干嘛，主要就是检测下降沿或者上升沿嘛，这里笔者就以下降为例。<br>先配置GPIO<br><img src="https://img-blog.csdnimg.cn/e81c4d6d9cfd4fd1876767e6d30a9fe0.png" alt=""><br><img src="https://img-blog.csdnimg.cn/7d921be059c146e3afa943de9e950bc0.png" alt=""><br>这里我们选择中断，不过我也趁机补充一下中断与事件的区别</p><blockquote><p>事件：是表示检测到某一动作（电平边沿）触发事件发生了。</p><p>中断：有某个事件发生并产生中断，并跳转到对应的中断处理程序中。</p></blockquote><p>中断有可能被更优先的中断屏蔽，事件不会。<br>事件本质上就是一个触发信号,是用来触发特定的外设模块或核心本身(唤醒)。</p><p><img src="https://img-blog.csdnimg.cn/6f83d8d2e09243ec824773f44f0e2cae.png" alt=""><br>在NVIC中使能这个EXTI<br><img src="https://img-blog.csdnimg.cn/54fdf7d2e12b411fb337ab9f70a3d936.png" alt=""><br>生成工程<br>在/Core/Src/stm32xxx_it.c文件中找到我们的中断服务函数<br><img src="https://img-blog.csdnimg.cn/79da663b4cc34256a26980a313a23d49.png" alt=""><br>然后我们分析一下这个函数</p><p><img src="https://img-blog.csdnimg.cn/136870d30d2a49198dbafb5043ffaa90.png" alt=""><br>让我来解释一下这些API</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) <span class="comment">//检查某个外部中断是否挂起</span></span><br><span class="line">__HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin); <span class="comment">//清除挂起标志位</span></span><br><span class="line">HAL_GPIO_EXTI_Callback(GPIO_Pin); <span class="comment">//调用回调函数</span></span><br></pre></td></tr></table></figure><p>一个外部中断进去了NVIC之后，它的外部中断挂起标志位就标志它现在正在挂起，等待执行，这个时候我们清除它的标志位，执行回调函数，一次外部中断就完成了。<br>在HAL库中我们只需要再重写身为虚函数的回调函数就可以了。<br>这里笔者选择在/Core/Src/stm32xxx_it.c重写回调函数</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* USER CODE BEGIN 1 */</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">HAL_GPIO_EXTI_Callback</span><span class="params">(<span class="type">uint16_t</span> GPIO_Pin)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(GPIO_Pin == KEY1_Pin)</span><br><span class="line">&#123;</span><br><span class="line">HAL_GPIO_TogglePin(LED1_GPIO_Port, LED1_Pin);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* USER CODE END 1 */</span></span><br></pre></td></tr></table></figure><p>不过细心的朋友发现这个还是有一定的抖动，得做消抖于是加入了Delay延时，然后灯就亮一次就再也不灭了。<br><strong>原因是因为系统时钟设置里给滴答定时器的抢占优先级为15，所以在中断里调用HAL_Delay会卡死。</strong><br>所以我们需要去调高滴答定时器的抢占优先级，调低中断的抢占优先级。<br><img src="https://img-blog.csdnimg.cn/f3612182f9f446c29eaa72794800b96e.png" alt=""></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* USER CODE BEGIN 1 */</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">HAL_GPIO_EXTI_Callback</span><span class="params">(<span class="type">uint16_t</span> GPIO_Pin)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(GPIO_Pin == KEY1_Pin)</span><br><span class="line">&#123;</span><br><span class="line">HAL_Delay(<span class="number">20</span>);</span><br><span class="line">HAL_GPIO_TogglePin(LED1_GPIO_Port, LED1_Pin);</span><br><span class="line"><span class="keyword">while</span>(HAL_GPIO_ReadPin(KEY1_GPIO_Port, KEY1_Pin) == GPIO_PIN_RESET);</span><br><span class="line">HAL_Delay(<span class="number">20</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* USER CODE END 1 */</span></span><br></pre></td></tr></table></figure><p>OHHH！这样我们的按键就可以消抖成功了！</p><h2 id="6-7-修改hal库底层源码">6.7 修改HAL库底层源码</h2><p>不过，细心的朋友可能已经发现，现在只要我们快速连续点击按键，效果还是可能出错。<br><img src="https://img-blog.csdnimg.cn/a751aab7908f4c609fb674b6f1c0f7ab.png" alt=""><br>这是因为HAL库的中断服务函数和我们的需求不符合造成的。HAL库的中断服务函数把清除中断挂起标志位放在中断回调函数的后面，这样确实很棒，因为后面要是有新的中断挂起申请，可以立马响应。不过，我们做按键就不希望这样，我们希望我们上一次的中断回调函数被完整执行了再处理下一次的指令（<strong>即先执行回调函数，执行完了再清除中断挂起标志位</strong>）。所以，我们修改这两句话的顺序：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">HAL_GPIO_EXTI_IRQHandler</span><span class="params">(<span class="type">uint16_t</span> GPIO_Pin)</span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != <span class="number">0x00</span>u)&#123;</span><br><span class="line">  HAL_GPIO_EXTI_Callback(GPIO_Pin);</span><br><span class="line">    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样，我们就得到了一个比较完善的按键检测了。<br>不过，在你每次生成代码的时候这段代码都会被覆盖，这还是非常地让人upset。<br>所以，我们直接模块化，作为我们新的积木代码。<br>在笔者的HardWare 目录下面增加了exti文件，并且包含了头文件 exti.h，extic.c 文件。</p><p>exti.h</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// Created by Whisky on 2023/1/10.</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">ifndef</span> HELLOWORLD_EXTI_H</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> HELLOWORLD_EXTI_H</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;main.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">exti_init</span><span class="params">(<span class="type">void</span>)</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span> <span class="comment">//HELLOWORLD_EXTI_H</span></span></span><br></pre></td></tr></table></figure><p>exti.c</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// Created by Whisky on 2023/1/10.</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;exti.h&quot;</span></span></span><br><span class="line"><span class="type">void</span> <span class="title function_">exti_init</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    GPIO_InitTypeDef GPIO_Initure;</span><br><span class="line"></span><br><span class="line">    __HAL_RCC_GPIOA_CLK_ENABLE();               <span class="comment">//开启GPIOA时钟</span></span><br><span class="line">    __HAL_RCC_GPIOE_CLK_ENABLE();               <span class="comment">//开启GPIOE时钟</span></span><br><span class="line"></span><br><span class="line">    GPIO_Initure.Pin=GPIO_PIN_0;                <span class="comment">//PA0 ，这是正点原子战舰开发板的一个特殊按钮，连接的是VCC，所以为检测高电平有效</span></span><br><span class="line">    GPIO_Initure.Mode=GPIO_MODE_IT_RISING;      <span class="comment">//上升沿触发</span></span><br><span class="line">    GPIO_Initure.Pull=GPIO_PULLDOWN;</span><br><span class="line">    HAL_GPIO_Init(GPIOA,&amp;GPIO_Initure);</span><br><span class="line"></span><br><span class="line">    GPIO_Initure.Pin=GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4; <span class="comment">//PE2,3,4</span></span><br><span class="line">    GPIO_Initure.Mode=GPIO_MODE_IT_FALLING;     <span class="comment">//下降沿触发</span></span><br><span class="line">    GPIO_Initure.Pull=GPIO_PULLUP;</span><br><span class="line">    HAL_GPIO_Init(GPIOE,&amp;GPIO_Initure);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//中断线0-PA0</span></span><br><span class="line">    HAL_NVIC_SetPriority(EXTI0_IRQn,<span class="number">2</span>,<span class="number">0</span>);       <span class="comment">//抢占优先级为2，子优先级为0</span></span><br><span class="line">    HAL_NVIC_EnableIRQ(EXTI0_IRQn);             <span class="comment">//使能中断线0</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//中断线2-PE2</span></span><br><span class="line">    HAL_NVIC_SetPriority(EXTI2_IRQn,<span class="number">2</span>,<span class="number">1</span>);       <span class="comment">//抢占优先级为2，子优先级为1</span></span><br><span class="line">    HAL_NVIC_EnableIRQ(EXTI2_IRQn);             <span class="comment">//使能中断线2</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//中断线3-PE3</span></span><br><span class="line">    HAL_NVIC_SetPriority(EXTI3_IRQn,<span class="number">2</span>,<span class="number">2</span>);       <span class="comment">//抢占优先级为2，子优先级为2</span></span><br><span class="line">    HAL_NVIC_EnableIRQ(EXTI3_IRQn);             <span class="comment">//使能中断线2</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//中断线4-PE4</span></span><br><span class="line">    HAL_NVIC_SetPriority(EXTI4_IRQn,<span class="number">2</span>,<span class="number">3</span>);   <span class="comment">//抢占优先级为2，子优先级为3</span></span><br><span class="line">    HAL_NVIC_EnableIRQ(EXTI4_IRQn);         <span class="comment">//使能中断线4</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">KEY_GPIO_EXTI_IRQHandler</span><span class="params">(<span class="type">uint16_t</span> GPIO_Pin)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != <span class="number">0x00</span>u)&#123;</span><br><span class="line">        HAL_GPIO_EXTI_Callback(GPIO_Pin);</span><br><span class="line">        __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//中断服务函数</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">EXTI0_IRQHandler</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    KEY_GPIO_EXTI_IRQHandler(GPIO_PIN_0);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">EXTI2_IRQHandler</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    KEY_GPIO_EXTI_IRQHandler(GPIO_PIN_2);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">EXTI3_IRQHandler</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    KEY_GPIO_EXTI_IRQHandler(GPIO_PIN_3);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">EXTI4_IRQHandler</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    KEY_GPIO_EXTI_IRQHandler(GPIO_PIN_4);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">HAL_GPIO_EXTI_Callback</span><span class="params">(<span class="type">uint16_t</span> GPIO_Pin)</span></span><br><span class="line">&#123;</span><br><span class="line">    delay_ms(<span class="number">100</span>);      <span class="comment">//消抖</span></span><br><span class="line">    <span class="keyword">switch</span>(GPIO_Pin)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">case</span> GPIO_PIN_0:</span><br><span class="line">            <span class="keyword">if</span>(WK_UP==<span class="number">1</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                LED1(<span class="number">0</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> GPIO_PIN_2:</span><br><span class="line">            <span class="keyword">if</span>(KEY2==<span class="number">0</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                LED0(<span class="number">0</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> GPIO_PIN_3:</span><br><span class="line">            <span class="keyword">if</span>(KEY1==<span class="number">0</span>)</span><br><span class="line">            &#123;</span><br><span class="line">               LED0(<span class="number">1</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> GPIO_PIN_4:</span><br><span class="line">            <span class="keyword">if</span>(KEY0==<span class="number">0</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                LED1(<span class="number">1</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="6-8-不需要按的按钮-软中断">6.8 不需要按的按钮——软中断</h2><p>刚刚我们发现了中断框图里面有一个软件中断事件寄存器<br>其实我们按下按钮的动作的事件可以靠软件模拟的，让我们来认识一下这个宏</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">__HAL_GPIO_EXTI_GENERATE_SWIT(__EXTI_LINE__)</span><br></pre></td></tr></table></figure><p>于是我们在main.c里面模拟每一秒钟按下按钮</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* USER CODE BEGIN WHILE */</span></span><br><span class="line">  <span class="keyword">while</span> (<span class="number">1</span>)&#123;</span><br><span class="line">  __HAL_GPIO_EXTI_GENERATE_SWIT(KEY1_Pin);</span><br><span class="line">  delay_ms(<span class="number">1000</span>);</span><br><span class="line"><span class="comment">/* USER CODE END WHILE */</span></span><br></pre></td></tr></table></figure><p>这样，我们就有了一个每一秒钟自动按下的按钮啦。</p>]]></content>
      
      
      <categories>
          
          <category> 跟我一起写STM32 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> stm32 </tag>
            
            <tag> 嵌入式 </tag>
            
            <tag> c语言 </tag>
            
            <tag> 单片机 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>模范工程——跟我一起写STM32(第三期)</title>
      <link href="/2023/01/10/STM32/%E6%A8%A1%E8%8C%83%E5%B7%A5%E7%A8%8B%E2%80%94%E2%80%94%E8%B7%9F%E6%88%91%E4%B8%80%E8%B5%B7%E5%86%99STM32(%E7%AC%AC%E4%B8%89%E6%9C%9F)/"/>
      <url>/2023/01/10/STM32/%E6%A8%A1%E8%8C%83%E5%B7%A5%E7%A8%8B%E2%80%94%E2%80%94%E8%B7%9F%E6%88%91%E4%B8%80%E8%B5%B7%E5%86%99STM32(%E7%AC%AC%E4%B8%89%E6%9C%9F)/</url>
      
        <content type="html"><![CDATA[<span id="more"></span><h3 id="文章目录">文章目录</h3><ul><li><a href="#5-%E6%A8%A1%E8%8C%83%E5%B7%A5%E7%A8%8B">5 模范工程</a><ul><li><a href="#51-delay">5.1 delay</a></li><li><a href="#52-%E5%B8%B8%E7%94%A8%E7%9A%84%E7%BC%A9%E5%86%99">5.2 常用的缩写</a></li><li><a href="#53-%E7%A5%9E%E5%A5%87%E7%9A%84%E4%BD%8D%E5%B8%A6%E6%93%8D%E4%BD%9C">5.3 神奇的位带操作</a></li><li><a href="#54-usart">5.4 usart</a></li><li><a href="#55-bsph">5.5 bsp.h</a></li></ul></li></ul><h1 id="5-模范工程">5 模范工程</h1><p>我们建立一个模范工程，把常用的功能整合到一起，以后只用将模范工程粘贴复制就能快速创建一个拥有很多自己写的库的工程文件了。</p><h2 id="5-1-delay">5.1 delay</h2><p>总所周知，<code>HAL_Delay()</code>只能实现ms级别的延时，但如果我们想实现us级别的延时，则HAL库就没有相应的库函数了。于是，得我们自己编写。<br>这里笔者创建了新的路径，根目录下创建System文件夹(用于放笔者觉得经常调用的函数)，里面创建delay文件夹，并在其中新建delay.c/.h</p><p>那么如何实现延时呢？<br>笔者相信玩过51的朋友不会没有想法，最简单的两种想法就是使用执行语句时产生的延时，或者使用硬件定时器实现精确定时。这次我们要讲的就是基于定时器的精确定时。<br>SysTick定时器，我们在之前配置时系统时钟时就见过它一面。这是一个很基础的定时器，它有三个常用寄存器，分别是 CTRL、LOAD、VAL。当然，我们可以用上章讲的结构体指针去实现指向地址偏移而访问这个寄存器。<br><strong>SysTick-&gt;CTRL</strong><br><img src="https://img-blog.csdnimg.cn/d83b9812151341a9b55c0260f97fb01c.png" alt="请添加图片描述"><br><strong>SysTick-&gt; LOAD</strong><br><img src="https://img-blog.csdnimg.cn/1bf834e5d38642ff956623693dfd839e.png" alt="请添加图片描述"><br><strong>SysTick-&gt; VAL</strong><br><img src="https://img-blog.csdnimg.cn/592258f48d9343e0b0226d917d74f7c2.png" alt="请添加图片描述"><br>但由于我们之前配置系统时钟使用的是SysTick定时器，所以我们还有一个要求就是不能修改SysTick值的情况下，实现计数。</p><p>delay.h</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// Created by Whisky on 2023/1/8.</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">ifndef</span> HELLOWORLD_DELAY_H</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> HELLOWORLD_DELAY_H</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;main.h&quot;</span></span></span><br><span class="line"><span class="type">void</span> <span class="title function_">delay_init</span><span class="params">(<span class="type">uint16_t</span> sysclk)</span>;    <span class="comment">//单位为MHZ</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">delay_ms</span><span class="params">(<span class="type">uint16_t</span> nms)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">delay_us</span><span class="params">(<span class="type">uint32_t</span> nus)</span>;</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span> <span class="comment">//HELLOWORLD_DELAY_H</span></span></span><br></pre></td></tr></table></figure><p>delay.c里</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">static</span> <span class="type">uint32_t</span> fac_us=<span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">delay_init</span><span class="params">(<span class="type">uint16_t</span> sysclk)</span></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">    HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);</span><br><span class="line">    fac_us = sysclk;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);</code>这一句把 SysTick 的时钟选择外部时钟，这里需要注意的是：SysTick 的时钟源自 HCLK，假设我们外部晶振为 8M，然后倍频到 72M，那么 SysTick 的时钟即为 72Mhz，也就是 SysTick 的计数器 VAL 每减 1，就代表时间过了 1/72us。<br>所以 <code>fac_us=SYSCLK;</code>这句话就是计算在 SYSCLK 时钟频率下延时 1us需要多少个 SysTick 时钟周期。<br>fac_us，为 us 延时的基数，也就是延时 1us，Systick 定时器需要走过的时钟周期数。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">delay_us</span><span class="params">(<span class="type">uint32_t</span> nus)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">uint32_t</span> ticks;</span><br><span class="line">    <span class="type">uint32_t</span> told,tnow,tcnt=<span class="number">0</span>;</span><br><span class="line">    <span class="type">uint32_t</span> reload=SysTick-&gt;LOAD;<span class="comment">//LOAD的值</span></span><br><span class="line">    ticks=nus*fac_us; <span class="comment">//需要的节拍数</span></span><br><span class="line">    told=SysTick-&gt;VAL;        <span class="comment">//刚进入时的计数器值</span></span><br><span class="line">    <span class="keyword">while</span>(<span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        tnow=SysTick-&gt;VAL;</span><br><span class="line">        <span class="keyword">if</span>(tnow!=told)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(tnow&lt;told)tcnt+=told-tnow;<span class="comment">//这里注意一下SYSTICK是一个递减的计数器就可以了.</span></span><br><span class="line">            <span class="keyword">else</span> tcnt+=reload-tnow+told;</span><br><span class="line">            told=tnow;</span><br><span class="line">            <span class="keyword">if</span>(tcnt&gt;=ticks)<span class="keyword">break</span>;<span class="comment">//时间超过/等于要延迟的时间,则退出.</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里就正是利用了我们前面提到的时钟摘取法，ticks 是延时 nus 需要等待的 SysTick 计数次数（也就是延时时间），told 用于记录最近一次的 SysTick-&gt;VAL 值，然后 tnow 则是当前的SysTick-&gt;VAL 值，通过他们的对比累加，实现 SysTick 计数次数的统计，统计值存放在 tcnt 里面，然后通过对比 tcnt 和 ticks，来判断延时是否到达，从而达到不修改 SysTick 实现 nus 的延时。</p><p>这样实现<code>delay_ms</code>的函数就非常容易了</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">delay_ms</span><span class="params">(<span class="type">uint16_t</span> nms)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">uint32_t</span> i;</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;nms;i++) delay_us(<span class="number">1000</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>附上整个delay.c</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// Created by Whisky on 2023/1/8.</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;delay.h&quot;</span></span></span><br><span class="line"><span class="comment">//单位为MHZ</span></span><br><span class="line"></span><br><span class="line"><span class="type">static</span> <span class="type">uint32_t</span> fac_us=<span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">delay_init</span><span class="params">(<span class="type">uint16_t</span> sysclk)</span></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">    HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);</span><br><span class="line">    fac_us = sysclk;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">delay_us</span><span class="params">(<span class="type">uint32_t</span> nus)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">uint32_t</span> ticks;</span><br><span class="line">    <span class="type">uint32_t</span> told,tnow,tcnt=<span class="number">0</span>;</span><br><span class="line">    <span class="type">uint32_t</span> reload=SysTick-&gt;LOAD;<span class="comment">//LOAD的值</span></span><br><span class="line">    ticks=nus*fac_us; <span class="comment">//需要的节拍数</span></span><br><span class="line">    told=SysTick-&gt;VAL;        <span class="comment">//刚进入时的计数器值</span></span><br><span class="line">    <span class="keyword">while</span>(<span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        tnow=SysTick-&gt;VAL;</span><br><span class="line">        <span class="keyword">if</span>(tnow!=told)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(tnow&lt;told)tcnt+=told-tnow;<span class="comment">//这里注意一下SYSTICK是一个递减的计数器就可以了.</span></span><br><span class="line">            <span class="keyword">else</span> tcnt+=reload-tnow+told;</span><br><span class="line">            told=tnow;</span><br><span class="line">            <span class="keyword">if</span>(tcnt&gt;=ticks)<span class="keyword">break</span>;<span class="comment">//时间超过/等于要延迟的时间,则退出.</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">delay_ms</span><span class="params">(<span class="type">uint16_t</span> nms)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">uint32_t</span> i;</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;nms;i++) delay_us(<span class="number">1000</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在main函数的初始化代码中添加对头文件的引用并调用初始化函数：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;delay&quot;</span></span></span><br><span class="line">delay_init(<span class="number">72</span>); <span class="comment">//因为笔者之前设置的频率为72MHZ</span></span><br></pre></td></tr></table></figure><h2 id="5-2-常用的缩写">5.2 常用的缩写</h2><p>uint8_t 实在太长，相信你经常能看见有u8这样的简写<br>我们也整一个<br>创建System/sys.h</p><p>sys.h</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// Created by Whisky on 2023/1/9.</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">ifndef</span> HELLOWORLD_SYS_H</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> HELLOWORLD_SYS_H</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;main.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="type">uint64_t</span> u64;</span><br><span class="line"><span class="keyword">typedef</span> <span class="type">uint32_t</span> u32;</span><br><span class="line"><span class="keyword">typedef</span> <span class="type">uint16_t</span> u16;</span><br><span class="line"><span class="keyword">typedef</span> <span class="type">uint8_t</span> u8;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span> <span class="comment">//HELLOWORLD_SYS_H</span></span></span><br></pre></td></tr></table></figure><h2 id="5-3-神奇的位带操作">5.3 神奇的位带操作</h2><p>假如有学习过51的朋友就会感觉STM32的代码真是又臭又长，想我51大法只用0、1赋值便能控制寄存器相位原子位(相应bit位)，而这STM32还要Read来Write去，填这么多参数。<br>这里，笔者就要告诉大家，其实是有方法的——位带操作。<br>先来看一下Cortex-M3权威指南中描述的位带操作：<br>支持了位带操作后，可以使用普通的加载/存储指令来对单一的比特进行读写操作。在CM3中，有两个区中实现了位带。其中一个是 SRAM 区的最低1MB 范围，第二个则是片内外设区的最低 1MB 范围。这两个区中的地址除了可以像普通的 RAM 一样使用外，它们还都有自己的“位带别名区”，位带别名区把每个比特膨胀成一个 32 位的字。当你通过位带别名区访问这些字时，就可以达到访问原始比特的目的。<br><img src="https://img-blog.csdnimg.cn/f5a08ec4698c4f83baf74d202099ce31.png" alt=""></p><p>位带操作简单的说，就是把每个比特膨胀为一个 32 位的字，当访问这些字的时候就达到了访问比特的目的，比如说 BSRR 寄存器有 32 个位，那么可以映射到 32 个地址上，我们去访问这 32 个地址就达到访问 32 个比特的目的。这样我们往某个地址写 1 就达到往对应比特位写 1 的目的，同样往某个地址写 0 就达到往对应的比特位写 0 的目的。<br><img src="https://img-blog.csdnimg.cn/475a4425513943c3bdecea8a60f8ce82.png" alt=""><br>在STM32中有两个区域可以进行位带操作，支持位带操作的两个内存区的范围是:<br>0x2000 0000-0x200F FFFF (SRAM区中的最低1MB)<br>0x4000 0000-0x400F FFFF (片上外设区中的最低1MB)<br>对应别名区的范围为：<br>0x2200 0000-0x23FF FFFF<br>0x4200 0000-0x43FF FFFF<br>下面就是SRAM的位带图：<br><img src="https://img-blog.csdnimg.cn/d9c39edc3e184fb6932c376d6e789cc7.png" alt=""><br>位带区的一位，在别名区是32位。</p><p><strong>转换方式</strong><br>例如操作GPIOB5-&gt;ODR寄存器（GPIOB_ODR寄存器的地址为0x4001080c，则A=0x4001080c）</p><p><strong>位带区： 支持位带操作的地址区。</strong></p><p><strong>位带别名： 对别名地址的访问最终会变换成对位带区的访问。</strong></p><blockquote><p>AliasAddr＝ 0x42000000 + ( (A - 0x40000000) * 8 + n) * 4 =0x42000000+ (A - 0x40000000) * 32 + 4*n</p></blockquote><p>所操作的位带别名区地址：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">AliasAddr=*（<span class="keyword">volatile</span> <span class="type">uint32_t</span>）<span class="number">0x42000000</span>+((<span class="number">0x4001080c</span><span class="number">-0x40000000</span>)*<span class="number">8</span>+<span class="number">5</span>)*<span class="number">4</span></span><br><span class="line"></span><br><span class="line">=*（<span class="keyword">volatile</span> <span class="type">uint32_t</span>）<span class="number">0x42000000</span>+ (<span class="number">0x4001080c</span><span class="number">-0x40000000</span>)*<span class="number">32</span> + <span class="number">5</span>*<span class="number">4</span></span><br><span class="line"></span><br><span class="line">=*（<span class="keyword">volatile</span> <span class="type">uint32_t</span>）<span class="number">0x42218194</span></span><br></pre></td></tr></table></figure><p>这样我们就了解是如何进行转化的了，但是这就有新的问题了，32位的位带地址是如何给的位带区传递值的呐。</p><p>官方文档给出了解释：<br>在位带区中，每个比特都映射到别名地址区的一个字，这是只有一个 LSB有效的字。当一个别名地址被访问时，会先把该地址变换成位带地址。对于读操作，读取位带地址中的一个字，再把需要的位右移到LSB，并把LSB返回。对于写操作，把需要写的位左移至对应的位序号处，然后执行一个原子的“读一改一写”过程。<br>注释：LSB–最低有效位</p><p>这样位带操作就显得很简单了：</p><ol><li>将位带区地址的计算宏定义成“地址+偏移”</li><li>再将该地址转换成一个指向该位带别名区的指针</li><li>宏定义访问位带别名区地址</li></ol><p>于是完善sys.h</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// Created by Whisky on 2023/1/9.</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">ifndef</span> HELLOWORLD_SYS_H</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> HELLOWORLD_SYS_H</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;main.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="type">uint64_t</span> u64;</span><br><span class="line"><span class="keyword">typedef</span> <span class="type">uint32_t</span> u32;</span><br><span class="line"><span class="keyword">typedef</span> <span class="type">uint16_t</span> u16;</span><br><span class="line"><span class="keyword">typedef</span> <span class="type">uint8_t</span> u8;</span><br><span class="line"></span><br><span class="line"><span class="comment">//位带操作,实现51类似的GPIO控制功能</span></span><br><span class="line"><span class="comment">//具体实现思想,参考&lt;&lt;CM3权威指南&gt;&gt;第五章(87页~92页).</span></span><br><span class="line"><span class="comment">//IO口操作宏定义</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> BITBAND(addr, bitnum) ((addr &amp; 0xF0000000)+0x2000000+((addr &amp;0xFFFFF)&lt;&lt;5)+(bitnum&lt;&lt;2))</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MEM_ADDR(addr)  *((volatile unsigned long  *)(addr))</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> BIT_ADDR(addr, bitnum)   MEM_ADDR(BITBAND(addr, bitnum))</span></span><br><span class="line"><span class="comment">//IO口地址映射</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> GPIOA_ODR_Addr    (GPIOA_BASE+12) <span class="comment">//0x4001080C</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> GPIOB_ODR_Addr    (GPIOB_BASE+12) <span class="comment">//0x40010C0C</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> GPIOC_ODR_Addr    (GPIOC_BASE+12) <span class="comment">//0x4001100C</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> GPIOD_ODR_Addr    (GPIOD_BASE+12) <span class="comment">//0x4001140C</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> GPIOE_ODR_Addr    (GPIOE_BASE+12) <span class="comment">//0x4001180C</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> GPIOF_ODR_Addr    (GPIOF_BASE+12) <span class="comment">//0x40011A0C</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> GPIOG_ODR_Addr    (GPIOG_BASE+12) <span class="comment">//0x40011E0C</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> GPIOA_IDR_Addr    (GPIOA_BASE+8) <span class="comment">//0x40010808</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> GPIOB_IDR_Addr    (GPIOB_BASE+8) <span class="comment">//0x40010C08</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> GPIOC_IDR_Addr    (GPIOC_BASE+8) <span class="comment">//0x40011008</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> GPIOD_IDR_Addr    (GPIOD_BASE+8) <span class="comment">//0x40011408</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> GPIOE_IDR_Addr    (GPIOE_BASE+8) <span class="comment">//0x40011808</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> GPIOF_IDR_Addr    (GPIOF_BASE+8) <span class="comment">//0x40011A08</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> GPIOG_IDR_Addr    (GPIOG_BASE+8) <span class="comment">//0x40011E08</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">//IO口操作,只对单一的IO口!</span></span><br><span class="line"><span class="comment">//确保n的值小于16!</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> PAout(n)   BIT_ADDR(GPIOA_ODR_Addr,n)  <span class="comment">//输出</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> PAin(n)    BIT_ADDR(GPIOA_IDR_Addr,n)  <span class="comment">//输入</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> PBout(n)   BIT_ADDR(GPIOB_ODR_Addr,n)  <span class="comment">//输出</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> PBin(n)    BIT_ADDR(GPIOB_IDR_Addr,n)  <span class="comment">//输入</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> PCout(n)   BIT_ADDR(GPIOC_ODR_Addr,n)  <span class="comment">//输出</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> PCin(n)    BIT_ADDR(GPIOC_IDR_Addr,n)  <span class="comment">//输入</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> PDout(n)   BIT_ADDR(GPIOD_ODR_Addr,n)  <span class="comment">//输出</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> PDin(n)    BIT_ADDR(GPIOD_IDR_Addr,n)  <span class="comment">//输入</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> PEout(n)   BIT_ADDR(GPIOE_ODR_Addr,n)  <span class="comment">//输出</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> PEin(n)    BIT_ADDR(GPIOE_IDR_Addr,n)  <span class="comment">//输入</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> PFout(n)   BIT_ADDR(GPIOF_ODR_Addr,n)  <span class="comment">//输出</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> PFin(n)    BIT_ADDR(GPIOF_IDR_Addr,n)  <span class="comment">//输入</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> PGout(n)   BIT_ADDR(GPIOG_ODR_Addr,n)  <span class="comment">//输出</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> PGin(n)    BIT_ADDR(GPIOG_IDR_Addr,n)  <span class="comment">//输入</span></span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span> <span class="comment">//HELLOWORLD_SYS_H</span></span></span><br></pre></td></tr></table></figure><p>这样out为输出，in为输入</p><p>于是，我们开灯甚至可以写成：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">PBout(<span class="number">5</span>) = <span class="number">0</span>;<span class="comment">//GPIO已经提前配置好了</span></span><br></pre></td></tr></table></figure><p>闪光灯</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">PBout(<span class="number">5</span>) = !PBout(<span class="number">5</span>);</span><br><span class="line">delay_ms(<span class="number">500</span>);</span><br></pre></td></tr></table></figure><p>非常的优雅。</p><p>主要参考：<br><a href="https://blog.csdn.net/weixin_46897073/article/details/110727064">STM32位带操作-详解-计算过程</a><br><a href="https://blog.csdn.net/sudoeast/article/details/127933175?utm_medium=distribute.pc_relevant.none-task-blog-2~default~baidujs_baidulandingword~default-1-127933175-blog-110727064.pc_relevant_landingrelevant&amp;spm=1001.2101.3001.4242.2&amp;utm_relevant_index=4">【32单片机学习】（1）stm32位带操作</a><br>正点原子STM32F103官方例程</p><h2 id="5-4-usart">5.4 usart</h2><p>串口相关知识，笔者将在之后讲解串口的时候给大家详细讲解。本节我们只给大家讲解比较独立的 printf 函数支持相关的知识。<br>这里使用重定向方式，实现对printf的改写<br>源码来源：<br><a href="https://zhuanlan.zhihu.com/p/145801160">配置CLion用于STM32开发【优雅の嵌入式开发】</a></p><p>创建System/usart文件夹，在里面添加</p><p>retarget.h</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">ifndef</span> HELLOWORLD_RETARGET_H</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> HELLOWORLD_RETARGET_H</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;stm32f1xx_hal.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/stat.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">void</span> <span class="title function_">RetargetInit</span><span class="params">(UART_HandleTypeDef *huart)</span>;</span><br><span class="line"><span class="type">int</span> _isatty(<span class="type">int</span> fd);</span><br><span class="line"><span class="type">int</span> _write(<span class="type">int</span> fd, <span class="type">char</span> *ptr, <span class="type">int</span> len);</span><br><span class="line"><span class="type">int</span> _close(<span class="type">int</span> fd);</span><br><span class="line"><span class="type">int</span> _lseek(<span class="type">int</span> fd, <span class="type">int</span> ptr, <span class="type">int</span> dir);</span><br><span class="line"><span class="type">int</span> _read(<span class="type">int</span> fd, <span class="type">char</span> *ptr, <span class="type">int</span> len);</span><br><span class="line"><span class="type">int</span> _fstat(<span class="type">int</span> fd, <span class="keyword">struct</span> stat *st);</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span> <span class="comment">//HELLOWORLD_RETARGET_H</span></span></span><br></pre></td></tr></table></figure><p>retarget.c</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;_ansi.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;_syslist.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;errno.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/time.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/times.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;retarget.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdint.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">if</span> !defined(OS_USE_SEMIHOSTING)</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> STDIN_FILENO  0</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> STDOUT_FILENO 1</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> STDERR_FILENO 2</span></span><br><span class="line"></span><br><span class="line">UART_HandleTypeDef *gHuart;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">RetargetInit</span><span class="params">(UART_HandleTypeDef *huart)</span></span><br><span class="line">&#123;</span><br><span class="line">    gHuart = huart;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* Disable I/O buffering for STDOUT stream, so that</span></span><br><span class="line"><span class="comment">     * chars are sent out as soon as they are printed. */</span></span><br><span class="line">    setvbuf(<span class="built_in">stdout</span>, <span class="literal">NULL</span>, _IONBF, <span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> _isatty(<span class="type">int</span> fd)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> (fd &gt;= STDIN_FILENO &amp;&amp; fd &lt;= STDERR_FILENO)</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    errno = EBADF;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> _write(<span class="type">int</span> fd, <span class="type">char</span> *ptr, <span class="type">int</span> len)</span><br><span class="line">&#123;</span><br><span class="line">    HAL_StatusTypeDef hstatus;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (fd == STDOUT_FILENO || fd == STDERR_FILENO)</span><br><span class="line">    &#123;</span><br><span class="line">        hstatus = HAL_UART_Transmit(gHuart, (<span class="type">uint8_t</span> *) ptr, len, HAL_MAX_DELAY);</span><br><span class="line">        <span class="keyword">if</span> (hstatus == HAL_OK)</span><br><span class="line">            <span class="keyword">return</span> len;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            <span class="keyword">return</span> EIO;</span><br><span class="line">    &#125;</span><br><span class="line">    errno = EBADF;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> _close(<span class="type">int</span> fd)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> (fd &gt;= STDIN_FILENO &amp;&amp; fd &lt;= STDERR_FILENO)</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    errno = EBADF;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> _lseek(<span class="type">int</span> fd, <span class="type">int</span> ptr, <span class="type">int</span> dir)</span><br><span class="line">&#123;</span><br><span class="line">    (<span class="type">void</span>) fd;</span><br><span class="line">    (<span class="type">void</span>) ptr;</span><br><span class="line">    (<span class="type">void</span>) dir;</span><br><span class="line"></span><br><span class="line">    errno = EBADF;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> _read(<span class="type">int</span> fd, <span class="type">char</span> *ptr, <span class="type">int</span> len)</span><br><span class="line">&#123;</span><br><span class="line">    HAL_StatusTypeDef hstatus;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (fd == STDIN_FILENO)</span><br><span class="line">    &#123;</span><br><span class="line">        hstatus = HAL_UART_Receive(gHuart, (<span class="type">uint8_t</span> *) ptr, <span class="number">1</span>, HAL_MAX_DELAY);</span><br><span class="line">        <span class="keyword">if</span> (hstatus == HAL_OK)</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            <span class="keyword">return</span> EIO;</span><br><span class="line">    &#125;</span><br><span class="line">    errno = EBADF;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> _fstat(<span class="type">int</span> fd, <span class="keyword">struct</span> stat *st)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> (fd &gt;= STDIN_FILENO &amp;&amp; fd &lt;= STDERR_FILENO)</span><br><span class="line">    &#123;</span><br><span class="line">        st-&gt;st_mode = S_IFCHR;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    errno = EBADF;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span> <span class="comment">//#if !defined(OS_USE_SEMIHOSTING)</span></span></span><br></pre></td></tr></table></figure><p>添加这两个文件到工程，编译之后会发现，有几个系统函数重复定义了，被重复定义的函数位于Src目录的syscalls.c文件中，我们把里面重复的几个函数删掉即可。<br>在main函数的初始化代码中添加对头文件的引用并注册重定向的串口号：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;retarget.h&quot;</span></span></span><br><span class="line">RetargetInit(&amp;huart1);</span><br></pre></td></tr></table></figure><p>然后就可以愉快地使用<code>printf</code>和<code>scanf</code>啦：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">char</span> buf[<span class="number">100</span>];</span><br><span class="line">​</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\r\nYour name: &quot;</span>);</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>, buf);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\r\nHello, %s!\r\n&quot;</span>, buf);</span><br></pre></td></tr></table></figure><p>当然，如果你不知道huart如何来的，不用慌张，等到笔者讲解到串口时，便会告诉大家。</p><h2 id="5-5-bsp-h">5.5 bsp.h</h2><p>由于发现我们一下子要引用很多的头文件，而且这些头文件可能相互引用。<br>于是，我们在/Core/Inc里创建bsp.h</p><p>bsp.h</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// Created by Whisky on 2023/1/8.</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">ifndef</span> HELLOWORLD_BSP_H</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> HELLOWORLD_BSP_H</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;sys.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;retarget.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;delay.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;led.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> bsp_init()  &#123;   delay_init(72);             \</span></span><br><span class="line"><span class="meta">                        RetargetInit(&amp;huart1);      \</span></span><br><span class="line"><span class="meta">                        led_init();                 \</span></span><br><span class="line"><span class="meta">                    &#125;</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span> <span class="comment">//HELLOWORLD_BSP_H</span></span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>并在main.h中引用它</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* USER CODE BEGIN Includes */</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;bsp.h&quot;</span></span></span><br><span class="line"><span class="comment">/* USER CODE END Includes */</span></span><br></pre></td></tr></table></figure><p>这样我们后面需要添加什么初始化和引用头文件就可以在bsp.h统一添加。</p>]]></content>
      
      
      <categories>
          
          <category> 跟我一起写STM32 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> stm32 </tag>
            
            <tag> 嵌入式 </tag>
            
            <tag> c语言 </tag>
            
            <tag> 单片机 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>点灯——跟我一起写STM32(第二期)</title>
      <link href="/2023/01/10/STM32/%E7%82%B9%E7%81%AF%E2%80%94%E2%80%94%E8%B7%9F%E6%88%91%E4%B8%80%E8%B5%B7%E5%86%99STM32(%E7%AC%AC%E4%BA%8C%E6%9C%9F)/"/>
      <url>/2023/01/10/STM32/%E7%82%B9%E7%81%AF%E2%80%94%E2%80%94%E8%B7%9F%E6%88%91%E4%B8%80%E8%B5%B7%E5%86%99STM32(%E7%AC%AC%E4%BA%8C%E6%9C%9F)/</url>
      
        <content type="html"><![CDATA[<span id="more"></span><h3 id="文章目录">文章目录</h3><ul><li><a href="#3-%E6%88%90%E4%B8%BA%E7%82%B9%E7%81%AF%E5%B7%A5%E7%A8%8B%E5%B8%88">3. 成为点灯工程师</a><ul><li><a href="#31-%E5%BB%BA%E7%AB%8B%E5%B7%A5%E7%A8%8B">3.1 建立工程</a></li><li><a href="#32-%E9%85%8D%E7%BD%AEgpio">3.2 配置GPIO</a><ul><li><a href="#321-%E6%98%8E%E7%A1%AE%E7%9B%AE%E6%A0%87%E5%92%8C%E6%B5%81%E7%A8%8B">3.2.1 明确目标和流程</a></li><li><a href="#322-%E9%85%8D%E7%BD%AEgpio%E6%97%B6%E9%92%9F">3.2.2 配置GPIO时钟</a></li><li><a href="#323-%E9%85%8D%E7%BD%AE%E5%A4%8D%E7%94%A8%E5%92%8C%E6%93%8D%E4%BD%9C%E7%9B%B8%E5%BA%94%E7%9A%84%E9%85%8D%E7%BD%AE%E5%AF%84%E5%AD%98%E5%99%A8">3.2.3 配置复用和操作相应的配置寄存器</a></li><li><a href="#324-%E6%93%8D%E4%BD%9C%E7%9B%B8%E5%BA%94%E7%9A%84%E6%8E%A7%E5%88%B6%E5%AF%84%E5%AD%98%E5%99%A8">3.2.4 操作相应的控制寄存器</a></li></ul></li><li><a href="#33-led%E9%A9%B1%E5%8A%A8%E6%B5%8B%E8%AF%95">3.3 LED驱动测试</a></li><li><a href="#34-%E8%8A%B1%E5%BC%8F%E7%82%B9%E7%81%AF">3.4 花式点灯</a></li></ul></li><li><a href="#4%E6%8F%AD%E7%A7%98%E7%82%B9%E7%81%AF%E8%83%8C%E5%90%8E%E7%9A%84%E6%95%85%E4%BA%8B">4.揭秘点灯背后的故事</a><ul><li><a href="#41-%E6%96%AD%E8%A8%80%E6%9C%BA%E5%88%B6">4.1 断言机制</a></li><li><a href="#42-%E6%96%B0%E7%9A%84%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B">4.2 新的数据类型？</a></li><li><a href="#43-%E7%BB%93%E6%9E%84%E4%BD%93%E6%8C%87%E9%92%88%E7%9A%84%E5%A6%99%E7%94%A8">4.3 结构体指针的妙用</a></li><li><a href="#44-%E7%9C%8B%E4%B8%8D%E8%A7%81%E7%9A%84%E5%AF%84%E5%AD%98%E5%99%A8">4.4 看不见的寄存器</a></li><li><a href="#45-%E6%A8%A1%E5%9D%97%E5%8C%96%E7%BC%96%E7%A8%8B">4.5 模块化编程</a></li></ul></li></ul><h1 id="3-成为点灯工程师">3. 成为点灯工程师</h1><h2 id="3-1-建立工程">3.1 建立工程</h2><p><img src="https://img-blog.csdnimg.cn/686fb50b380b4a168ac2f322b0dd9488.png" alt="1"><br><img src="https://img-blog.csdnimg.cn/d1a65a3568b048f299c523f7a01b4eab.png" alt="2"></p><p>然后确定</p><p><img src="https://img-blog.csdnimg.cn/01ca8a78481841e9bf9a49f3ed7fe49b.png" alt="3"></p><p>配置项目信息，这里我们直接完成。</p><p><img src="https://img-blog.csdnimg.cn/745de9d9f91b4537bcf1bd05de7c32a6.png" alt="4"></p><p>开启透视图 -&gt; 是</p><h2 id="3-2-配置gpio">3.2 配置GPIO</h2><h3 id="3-2-1-明确目标和流程">3.2.1 明确目标和流程</h3><p>配置GPIO之前，我们先要知道我们的目的是干什么，哦对，点灯，那怎么才能点亮一个LED呢？<br>当LED处于正向工作状态时，电流从LED阳极流向阴极时，半导体晶体就发出从紫外到红外不同颜色的光线，光的强弱与电流有关。<br>那我们目的明确了，就是要让LED导通嘛，看一眼商家发的原理图</p><p><img src="https://img-blog.csdnimg.cn/af9f3a7da4764c9bb3ea0a3f1e1b1861.png" alt="led"><br>当我们向对应GPIO写入低电平的时候，(VCC作为高电平，GPIO作为低电平)，则可以导通LED，即可以点亮LED。<br>有同学可能就要问了啥是GPIO啊？<br>GPIO就是<strong>通用输入输出</strong>。在最基本的层面上，GPIO 是指计算机主板或附加卡上的一组引脚。这些引脚可以发送或接收电信号，但它们不是为任何特定目的而设计的。这就是为什么它们被称为“通用”IO。<br>那我们现在就要让STM32运行时让对应的GPIO输出为低电平，则可以点亮LED了。<br>现在让笔者来告诉你<strong>配置GPIO的基本流程</strong>吧<br><img src="https://img-blog.csdnimg.cn/e35456339bc144bca859092ad5165d4b.png" alt="way"></p><h3 id="3-2-2-配置gpio时钟">3.2.2 配置GPIO时钟</h3><p>为什么要配置 GPIO 的时钟？<br>人有心脏，MCU 也有，<strong>时钟就是 MCU 的心脏</strong>。心脏的周期性收缩将血液泵向身体各处，MCU 也一样。心脏对于人体好比时钟对于 MCU，微控制器（MCU）的运行要靠周期性的时钟脉冲来驱动，而这个脉冲的始源往往是由外部晶体振荡器提供时钟输入，最终转换为多个外部设备的周期性运作。这种时钟“能量”的传递路径犹如大树的养分由主干流向个分支，因此称为时钟树。<br>在 STM32 中每个外设都有其单独的时钟，在使用某个外设之前必须打开该外设的时钟 。而咱们的 STM32 自身的时钟频率非常的高的(相比而言)，对于下面控制的外设，咱们就要“迁就一下”（由该外设的时钟频率决定），所以需要进行一层又一层的分频。<br>STM32CubeIDE 有一个非常友好的图形化界面的配置工具<br><strong>1. 选择时钟源（配置 RCC）</strong><br><img src="https://img-blog.csdnimg.cn/8508f60c370b439f8f1a66b9156bff71.png" alt="1"><br>HSI是高速内部时钟，RC振荡器，频率为8MHz<br>HSE是高速外部时钟，可接石英/陶瓷谐振器，或者接外部时钟源，频率范围为4MHz~16MHz<br>里面的选项：<br>BYPASS Clock Source（旁路时钟源）<br>Crystal/Ceramic Resonator（晶体/陶瓷晶振）<br>下面来解释一下：<br>所谓HSE旁路时钟源，是指无需使用外部晶体时所需的芯片内部时钟驱动组件，直接从外界导入时钟信号。犹如芯片内部的驱动组件被旁路了。<br>外部晶体/陶瓷谐振器(HSE晶体)模式该时钟源是由外部无源晶体与MCU内部时钟驱动电路共同配合形成，有一定的启动时间，精度较高。<br>笔者使用的开发板都为Crystal/Ceramic Resonator，故都选择这个选项。</p><p><strong>2. 选择Clock Configuration，进入时钟树的图形化配置</strong><br><img src="https://img-blog.csdnimg.cn/fc50c15e2b1d463e8db75f2365b2f243.png" alt="2"><br><img src="https://img-blog.csdnimg.cn/fc36bb69ee114335998bc1fe59b77986.png" alt="2"></p><p>因为是初学者，我们就不追求节能，我们就安装开发板的最高性能去配置分频器。</p><p><img src="https://img-blog.csdnimg.cn/1faaf2f5742a48e89819a933abf88af8.png" alt="2"></p><p>当我们发现出现了一些红色的框时，这就是告诉我们，我们的配置超出了当前外设的最大承载能力，需要我们重新设置分频器，来降低频率适应外设。</p><p><img src="https://img-blog.csdnimg.cn/def0f198e59c4691ba5f49718ef42d75.png" alt="2"></p><p>直到全员蓝色。<br>至此，我们便配置完了时钟树。Yeah！</p><h3 id="3-2-3-配置复用和操作相应的配置寄存器">3.2.3 配置复用和操作相应的配置寄存器</h3><p><strong>1. 查看原理图</strong></p><p>配置之前，你得先知道你的LED所对应的GPIO是哪个<br><img src="https://img-blog.csdnimg.cn/6348e3f40d96448ca7d9f1bb4c431644.png" alt="3"><br>笔者的LED对应的是PA8，上面的图随便找的，主要是告诉大家可以通过原理图来得知自己的GPIO对应外设。</p><p><strong>2. 配置复用</strong></p><p>配置复用为GPIO，并同时选择GPIO方向为输出<br>前面分析过，点亮LED应该让PA8输出低电平，所以这个配置输出<br>(这里解释复用的含义：一个引脚可以干很多事情，配置复用为GPIO就是设置该引脚现在的功能为GPIO)<br><img src="https://img-blog.csdnimg.cn/0de2d42a7af243da9205fc27a352a837.png" alt="3"><br><strong>3. 配置GPIO的电气属性</strong></p><p>System Core-&gt;GPIO中点击PA8<br><img src="https://img-blog.csdnimg.cn/f7c05047799b4b66a78715a470b82c54.png" alt="3"><br>笔者现在来解释一下这些选项的含义：</p><table><thead><tr><th></th><th></th></tr></thead><tbody><tr><td><strong>GPIO output level</strong></td><td>Low / High</td></tr></tbody></table><p>通常有两种选项：高电平/ 低电平，分别代表将该Output口设为默认输出高电平/ 默认输出低电平。</p><table><thead><tr><th></th><th></th></tr></thead><tbody><tr><td><strong>GPIO mode</strong></td><td>Output Push Pull / Output Open Drain</td></tr></tbody></table><p><strong>推挽模式</strong>（Output Push Pull）：在该结构中<strong>输入高电平</strong>时，经过反向后，上方的P-MOS导通，下方的N-MOS关闭，<strong>对外输出高电平</strong>；而在该结构中<strong>输入低电平</strong>时，经过反向后，N-MOS管导通，P-MOS关闭，<strong>对外输出低电平</strong>。当引脚高低电平切换时，两个管子轮流导通，P管负责灌电流，N管负责拉电流，使其负载能力和开关速度都比普通的方式有很大的提高。推挽输出的低电平为0伏，高电平为3.3伏。<br><strong>开漏模式</strong>（Output Open Drain）：在开漏输出模式时，上方的P-MOS管完全不工作。如果我们<strong>控制GPIO输出为0</strong>，低电平，则P-MOS管关闭，N-MOS管导通，<strong>使输出接地</strong>，若控制<strong>GPIO输出为1</strong> 时，则P-MOS管和N-MOS管都关闭，所以引脚既不输出高电平，也不输出低电平，为<strong>高阻态</strong>。</p><table><thead><tr><th></th><th></th></tr></thead><tbody><tr><td><strong>GPIO Pull-up/Pull-down</strong></td><td>No Pull-up and Pull-down / Pull-up / Pull-down</td></tr></tbody></table><p>这三个选项分别对应的是 不拉（让它悬空）或者 上拉 或者 下拉<br><strong>上拉电阻的目的是为了保证在无信号输入时输入端的电平为高电平</strong>。而在信号输入为低电平是输入端的电平应该也为低电平。如果没有上拉电阻，在没有外界输入的情况下输入端是<strong>悬空</strong>的，它的电平是<strong>未知的无法保证的</strong>，上拉电阻就是为了保证无信号输入时输入端的电平为高电平，同样还有<strong>下拉电阻它是为了保证无信号输入时输入端的电平为低电平</strong>。</p><table><thead><tr><th></th><th></th></tr></thead><tbody><tr><td><strong>Maximum output speed</strong></td><td>High / Medium / Low</td></tr></tbody></table><p>引脚速度，又称输出驱动电路的响应速度。<br>GPIO的引脚速度跟应用相匹配，速度配置越高，噪声越大，功耗越大。可以理解为输出驱动电路的带宽：即一个驱动电路可以不失真地通过信号的最大频率，就好比是公路的设计时速，汽车速度低于设计时速时，可以平稳地运行，如果超过设计时速就会颠簸，甚至翻车。</p><table><thead><tr><th></th><th></th></tr></thead><tbody><tr><td><strong>User Label</strong></td><td>自己定义</td></tr></tbody></table><p>用户定义的该GPIO的别名，STM32CubeIDE里面会以宏的形式命名在main.h</p><p><strong>4. 配置Debug 环境</strong></p><p>笔者将代码下载到STM32的方式选择使用STLink等Debug工具进行。<br>若使用ISP烧录：<br>即STM32复位之后，如果检测到Boot1引脚为低电平，boot0引脚为高电平，芯片就执行内部固话的ISP引导程序。<br>这样比较麻烦，也相对比较缓慢。</p><p>这里笔者使用的STLink调试工具，故选择Serial Wire。<br>(若未选择，将默认使用烧录模式，这时候Debug的方式就下载不了程序了，<br>解决方法：<br>BOOT0设置为1<br>BOOT1设置为0<br>重新使用Debug方式下载程序代码<br>最后再将BOOT0改为0即可)<br><img src="https://img-blog.csdnimg.cn/91331e8d4bea41a6a127140ae062322f.png" alt="3">时钟源在没有使用OS操作系统时，我们默认用滴答定时器作为我们的时钟源（主要用于实现 HAL_Delay () 以及作为各种 timeout 的时钟基准）</p><p><strong>5. 生成工程文件</strong></p><p><img src="https://img-blog.csdnimg.cn/cc540fd897ae4a5cb3f6a3d388a84add.png" alt="3"></p><p><img src="https://img-blog.csdnimg.cn/4fc8cf2dc43844ec935897958cb609d9.png" alt="3"></p><p>当然点锤子(编译构建)或者保存都可以开始构建工程代码。</p><p><img src="https://img-blog.csdnimg.cn/997a1f8123ed4632a60f85569f2360a2.png" alt="3"><br>OHHHHHHHH！</p><h3 id="3-2-4-操作相应的控制寄存器">3.2.4 操作相应的控制寄存器</h3><p><strong>1. 必须知道概念：沙盒</strong></p><p><img src="https://img-blog.csdnimg.cn/f38d652886d541bb979982a2d4a17864.png" alt="4"><br><strong>代码只有写在这里面才有效，不然下一次生成就给你洗掉了。</strong></p><p><strong>2. 因为HAL的封装，我们已经不用直接操作控制寄存器了，所以我们可以直接使用HAL的函数来操作PA8。</strong></p><p>讲个STM32CubeIDE必学快捷键：<strong>Alt + / 代码补全</strong><br><strong>输入个开头就能帮你补全了，非常地实用</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">HAL_GPIO_WritePin(GPIOx, GPIO_Pin, PinState);</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">GPIOx：GPIOA</span><br><span class="line">GPIO_Pin： GPIO_PIN_8</span><br><span class="line">PinState：GPIO_PIN_RESET/ GPIO_PIN_SET</span><br><span class="line">GPIO_PIN_RESET:低电平</span><br><span class="line">GPIO_PIN_SET:高电平</span><br></pre></td></tr></table></figure><p>因为笔者要控制的GPIO为PA8，即GPIOA的IO8号，配置为低电平</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_RESET);</span><br></pre></td></tr></table></figure><p>不过，还记得我们设置了User Label了吗，所以我们的代码也可以写成这样，</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET);</span><br></pre></td></tr></table></figure><p>至此，我们的Led驱动就完成了！<br>可以去测试一下了。</p><h2 id="3-3-led驱动测试">3.3 LED驱动测试</h2><p>准备好的东西有：<br>STM32板子 x 1：<br><img src="https://img-blog.csdnimg.cn/33a04f40cb4a4ccfa5c93807081e6ac3.png" alt="stm32"></p><p>STLink x 1：<br><img src="https://img-blog.csdnimg.cn/fe4ea3213ec944878442248014f04f92.png" alt="stlink"></p><p>接线<br>按照笔者买的型号的话：</p><table><thead><tr><th>STLINK</th><th>STM32</th></tr></thead><tbody><tr><td>SWCLK</td><td>CLK</td></tr><tr><td>SWDIO</td><td>DIO</td></tr><tr><td>GND</td><td>GND</td></tr><tr><td>3V3</td><td>3V3</td></tr></tbody></table><p>如果是正点原子的开发板，使用的12V电源供电，要避免重供电，则不接3V3线，仅接入另外三根即可。<br><img src="https://img-blog.csdnimg.cn/408901e851674437ab672b4d732d74b9.jpeg#pic" alt="请添加图片描述"><br><img src="https://img-blog.csdnimg.cn/cbf2e56f6be44a118f515567633eb5c1.jpeg#pic" alt="请添加图片描述"></p><p>这里笔者已经接好了</p><p><img src="https://img-blog.csdnimg.cn/8a433d82639243c387417213b18c1d48.png" alt="在这里插入图片描述"></p><p>然后插上电脑</p><p><img src="https://img-blog.csdnimg.cn/09308baddb504ef2a2324d88175ba7a3.png" alt="在这里插入图片描述"></p><p>电源灯亮起 电脑也响了一声，就说明OK了</p><p><img src="https://img-blog.csdnimg.cn/f30ad8a548da487f9473770055e580c5.png" alt="在这里插入图片描述"></p><p><img src="https://img-blog.csdnimg.cn/9c935a3e19664007a271af86badb9f9a.png" alt="在这里插入图片描述"></p><p>可能遇见的情况：<br>一般第一次使用STLink需要STLinkUpgrade，在上方菜单栏help(帮助)栏中找到STLinkUpgrade(STLink更新)</p><ol><li>STLinkUpgrade<br><img src="https://img-blog.csdnimg.cn/3d1bff25e012458283c062d95ac14db2.png" alt=""><br>点击Refresh device list和Open in updata mode，等待Upgrade亮起并点击（若无效，可尝试插拔STLink，点击Open in updata mode，当Upgrade亮起后并点击Upgrade）</li></ol><p>若一切正常：</p><p><img src="https://img-blog.csdnimg.cn/30496195dec94a4881784d02d70652d1.png" alt=""></p><p>烧录成功！</p><p><img src="https://img-blog.csdnimg.cn/d6ae95bdb97f40bfa87915531f9bcaf9.png#pic" alt=""></p><p>LED成功点亮<br>恭喜你，你已经迈入了点灯工程师的大门了。</p><h2 id="3-4-花式点灯">3.4 花式点灯</h2><p>那我们再学一个API，延时函数</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">HAL_Delay(Delay);</span><br><span class="line"><span class="comment">//Delay：延时的时间，单位为毫秒</span></span><br></pre></td></tr></table></figure><p>于是，我们有了下面这个闪光灯，1秒亮灭</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* USER CODE BEGIN WHILE */</span></span><br><span class="line">  <span class="keyword">while</span> (<span class="number">1</span>)</span><br><span class="line">  &#123;</span><br><span class="line">  HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET);</span><br><span class="line">  HAL_Delay(<span class="number">1000</span>);</span><br><span class="line">  HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_SET);</span><br><span class="line">  HAL_Delay(<span class="number">1000</span>);</span><br><span class="line">    <span class="comment">/* USER CODE END WHILE */</span></span><br></pre></td></tr></table></figure><p>不过，这代码还不够简洁，让我们再学习一个API，GPIO输出反转函数</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">HAL_GPIO_TogglePin(GPIOx, GPIO_Pin);</span><br></pre></td></tr></table></figure><p>这两个参数和之前的一样，选择你需要控制的GPIO，往上面一填写就可以了<br>这个API的功能就是实现电平反转，之前是低电平现在就是高电平，之前是高电平现在就是低电平。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* USER CODE BEGIN WHILE */</span></span><br><span class="line">  <span class="keyword">while</span> (<span class="number">1</span>)</span><br><span class="line">  &#123;</span><br><span class="line">  HAL_GPIO_TogglePin(LED1_GPIO_Port, LED1_Pin);</span><br><span class="line">  HAL_Delay(<span class="number">1000</span>);</span><br><span class="line"><span class="comment">/* USER CODE END WHILE */</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>于是我们就用了两句话来实现这个反转灯了，是不是非常的优雅。</p><h1 id="4-揭秘点灯背后的故事">4.揭秘点灯背后的故事</h1><p>作为好奇宝宝，笔者非常好奇刚刚的API以及图形化界面为什么能实现配置我们的底层寄存器。<br>于是我们先右键点开了我们刚刚使用的API的内部实现。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">HAL_GPIO_WritePin</span><span class="params">(GPIO_TypeDef *GPIOx, <span class="type">uint16_t</span> GPIO_Pin, GPIO_PinState PinState)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="comment">/* Check the parameters */</span></span><br><span class="line">  assert_param(IS_GPIO_PIN(GPIO_Pin));</span><br><span class="line">  assert_param(IS_GPIO_PIN_ACTION(PinState));</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (PinState != GPIO_PIN_RESET)</span><br><span class="line">  &#123;</span><br><span class="line">    GPIOx-&gt;BSRR = GPIO_Pin;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">  &#123;</span><br><span class="line">    GPIOx-&gt;BSRR = (<span class="type">uint32_t</span>)GPIO_Pin &lt;&lt; <span class="number">16u</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="4-1-断言机制">4.1 断言机制</h2><p>我们可以看见头两句都是什么<code>assert_param()</code>的东东<br>我们又点开它的实现</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">ifdef</span>  USE_FULL_ASSERT</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> assert_param(expr) ((expr) ? (void)0U : assert_failed((uint8_t *)__FILE__, __LINE__))</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">assert_failed</span><span class="params">(<span class="type">uint8_t</span>* file, <span class="type">uint32_t</span> line)</span>;</span><br><span class="line"><span class="meta">#<span class="keyword">else</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> assert_param(expr) ((void)0U)</span></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span> <span class="comment">/* USE_FULL_ASSERT */</span></span></span><br></pre></td></tr></table></figure><p>笔者来解读一下，就是<br>如果<code>USE_FULL_ASSERT</code>没有宏定义，则执行<code>((void)0)</code>，即什么都不做。<br>如果<code>USE_FULL_ASSERT</code>宏定义了，则执行下面的代码：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> assert_param(expr) ((expr) ? (void)0 : assert_failed((uint8_t *)__FILE__, __LINE__))　　</span></span><br></pre></td></tr></table></figure><p>参数<code>expr</code>为<code>false</code>，则执行后面的assert_failed()函数。<code>__FILE__</code>, <code>__LINE__</code>是标准库函数中的宏定义，表示文件名和行号。</p><p>而这个<code>assert_failed</code>我们在<code>main.c</code>中对此进行了原形定义：<br><img src="https://img-blog.csdnimg.cn/84e328761ea44f4fbdb44a092029690f.png" alt="0"><br>不过呢，现在里面默认什么都没有。<br>等以后我们学到了串口打印，我们便可以加入</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">ifdef</span> USE_FULL_ASSERT</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">assert_failed</span><span class="params">(<span class="type">uint8_t</span>* file, <span class="type">uint32_t</span> line)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Wrong parameters value: file %s on line %d\r\n&quot;</span>, file, line);</span><br><span class="line">    <span class="keyword">while</span>(<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">#end</span></span><br></pre></td></tr></table></figure><p>在进入断言后，则函数停止运行，同时输出错误信息，HAL库中的大部分函数都有断言机制！<br>知道了这些我们也可以在自己的函数中加入断言了(记得定义USE_FULL_ASSERT)</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">odd</span><span class="params">(<span class="type">uint8_t</span> k)</span></span><br><span class="line">&#123;</span><br><span class="line">    assert_param((k%<span class="number">2</span>)?<span class="number">1</span>:<span class="number">0</span>);</span><br><span class="line">    <span class="comment">//函数实现</span></span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面的函数是对k进行运算，断言机制则判断是k是否是奇数，如果为偶数，则会进入assert，输出报错信息，中止信息，这种机制在调试过程中应该是很有用的！<br>结果串口输出如下信息：（串口信息是通过printf函数重定义进行输出的，至于printf的具体实现，后面笔者也将会更新）</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Wrong parameters value: file ..\User\main.c on line <span class="number">211</span></span><br></pre></td></tr></table></figure><p>报错信息清晰的输出了错误所在文件和行号，是不是很方便呢<br>你也许会好奇串口竟然输出了文件和行号，简直太神奇了（我承认刚接触时我自己确实认为太神奇了，哈哈），不要着急咱们继续往下看<br>我们首先来看几个编译器内置宏<br>ANSI C标准中有几个标准预定义宏（也是常用的）：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">__LINE__：在源代码中插入当前源代码行号；</span><br><span class="line">__FILE__：在源文件中插入当前源文件名；</span><br><span class="line">__DATE__：在源文件中插入当前的编译日期</span><br><span class="line">__TIME__：在源文件中插入当前编译时间；</span><br><span class="line">__STDC__：当要求程序严格遵循ANSI C标准时该标识被赋值为<span class="number">1</span>；</span><br><span class="line">__cplusplus：当编写C++程序时该标识符被定义。</span><br></pre></td></tr></table></figure><p>想了解更多关于断言机制的，可以参考：<br><a href="https://blog.csdn.net/mrwang80/article/details/75433964">stm32之断言详细讲解</a></p><p>那我们现在看看HAL用了这个断言机制判断了什么呢<br><code>IS_GPIO_PIN(GPIO_Pin)</code>这个从字面上理解其实很简单，意思就是：<br>这个()里面的东西它是一个GPIO的Pin吗？<br>从它的实现也能看出</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> IS_GPIO_PIN(PIN) (((((uint32_t)PIN) &amp; GPIO_PIN_MASK ) != 0x00u) &amp;&amp; ((((uint32_t)PIN) &amp; ~GPIO_PIN_MASK) == 0x00u))</span></span><br></pre></td></tr></table></figure><p>这是GPIO_Pin的定义</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> GPIO_PIN_0                 ((uint16_t)0x0001)  <span class="comment">/* Pin 0 selected    */</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> GPIO_PIN_1                 ((uint16_t)0x0002)  <span class="comment">/* Pin 1 selected    */</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> GPIO_PIN_2                 ((uint16_t)0x0004)  <span class="comment">/* Pin 2 selected    */</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> GPIO_PIN_3                 ((uint16_t)0x0008)  <span class="comment">/* Pin 3 selected    */</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> GPIO_PIN_4                 ((uint16_t)0x0010)  <span class="comment">/* Pin 4 selected    */</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> GPIO_PIN_5                 ((uint16_t)0x0020)  <span class="comment">/* Pin 5 selected    */</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> GPIO_PIN_6                 ((uint16_t)0x0040)  <span class="comment">/* Pin 6 selected    */</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> GPIO_PIN_7                 ((uint16_t)0x0080)  <span class="comment">/* Pin 7 selected    */</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> GPIO_PIN_8                 ((uint16_t)0x0100)  <span class="comment">/* Pin 8 selected    */</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> GPIO_PIN_9                 ((uint16_t)0x0200)  <span class="comment">/* Pin 9 selected    */</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> GPIO_PIN_10                ((uint16_t)0x0400)  <span class="comment">/* Pin 10 selected   */</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> GPIO_PIN_11                ((uint16_t)0x0800)  <span class="comment">/* Pin 11 selected   */</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> GPIO_PIN_12                ((uint16_t)0x1000)  <span class="comment">/* Pin 12 selected   */</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> GPIO_PIN_13                ((uint16_t)0x2000)  <span class="comment">/* Pin 13 selected   */</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> GPIO_PIN_14                ((uint16_t)0x4000)  <span class="comment">/* Pin 14 selected   */</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> GPIO_PIN_15                ((uint16_t)0x8000)  <span class="comment">/* Pin 15 selected   */</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> GPIO_PIN_All               ((uint16_t)0xFFFF)  <span class="comment">/* All pins selected */</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> GPIO_PIN_MASK              0x0000FFFFu <span class="comment">/* PIN mask for assert test */</span></span></span><br></pre></td></tr></table></figure><p>可以看出<code>(((uint32_t)PIN) &amp; GPIO_PIN_MASK ) != 0x00u</code> ，即上面的<code>PIN</code>的值，和0xffff相与，肯定不是0x00。<br><code>(((uint32_t)PIN) &amp; ~GPIO_PIN_MASK) == 0x00u</code>也一样，<code>~ GPIO_PIN_MASK</code>就等于0xffff0000，和<code>PIN</code>相与，若是上面的<code>PIN</code>的值，那也是必定成立。<br>于是，这个<code>IS_GPIO_PIN(PIN)</code>就是判断<code>PIN</code>是否为<code>GPIO_PIN_x</code>其中一个。<br>同理，</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> IS_GPIO_PIN_ACTION(ACTION) (((ACTION) == GPIO_PIN_RESET) || ((ACTION) == GPIO_PIN_SET))</span></span><br></pre></td></tr></table></figure><p>这个宏则是判断<code>PinState</code>是否为<code>GPIO_PIN_RESET</code> 或者<code>GPIO_PIN_SET</code></p><h2 id="4-2-新的数据类型？">4.2 新的数据类型？</h2><p>相信大家也看见了，有些不认识的数据类型：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">uint8_t</span> / <span class="type">uint16_t</span> / <span class="type">uint32_t</span> /<span class="type">uint64_t</span> </span><br></pre></td></tr></table></figure><p>这些数据类型是 C99 中定义的，具体定义在：/usr/include/stdint.h ISO C99: 7.18 Integer types</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">  </span><br><span class="line"><span class="meta">#<span class="keyword">ifndef</span> __int8_t_defined  </span></span><br><span class="line"><span class="meta"># <span class="keyword">define</span> __int8_t_defined  </span></span><br><span class="line"><span class="keyword">typedef</span> <span class="type">signed</span> <span class="type">char</span>             <span class="type">int8_t</span>;   </span><br><span class="line"><span class="keyword">typedef</span> <span class="type">short</span> <span class="type">int</span>               <span class="type">int16_t</span>;  </span><br><span class="line"><span class="keyword">typedef</span> <span class="type">int</span>                     <span class="type">int32_t</span>;  </span><br><span class="line"><span class="meta"># <span class="keyword">if</span> __WORDSIZE == 64  </span></span><br><span class="line"><span class="keyword">typedef</span> <span class="type">long</span> <span class="type">int</span>                <span class="type">int64_t</span>;  </span><br><span class="line"><span class="meta"># <span class="keyword">else</span>  </span></span><br><span class="line">__extension__  </span><br><span class="line"><span class="keyword">typedef</span> <span class="type">long</span> <span class="type">long</span> <span class="type">int</span>           <span class="type">int64_t</span>;  </span><br><span class="line"><span class="meta"># <span class="keyword">endif</span>  </span></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span>  </span></span><br><span class="line">  </span><br><span class="line"> </span><br><span class="line"><span class="keyword">typedef</span> <span class="type">unsigned</span> <span class="type">char</span>           <span class="type">uint8_t</span>;  </span><br><span class="line"><span class="keyword">typedef</span> <span class="type">unsigned</span> <span class="type">short</span> <span class="type">int</span>      <span class="type">uint16_t</span>;  </span><br><span class="line"><span class="meta">#<span class="keyword">ifndef</span> __uint32_t_defined  </span></span><br><span class="line"><span class="keyword">typedef</span> <span class="type">unsigned</span> <span class="type">int</span>            <span class="type">uint32_t</span>;  </span><br><span class="line"><span class="meta"># <span class="keyword">define</span> __uint32_t_defined  </span></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span>  </span></span><br><span class="line"><span class="meta">#<span class="keyword">if</span> __WORDSIZE == 64  </span></span><br><span class="line"><span class="keyword">typedef</span> <span class="type">unsigned</span> <span class="type">long</span> <span class="type">int</span>       <span class="type">uint64_t</span>;  </span><br><span class="line"><span class="meta">#<span class="keyword">else</span>  </span></span><br><span class="line">__extension__  </span><br><span class="line"><span class="keyword">typedef</span> <span class="type">unsigned</span> <span class="type">long</span> <span class="type">long</span> <span class="type">int</span>  <span class="type">uint64_t</span>;  </span><br><span class="line"><span class="meta">#<span class="keyword">endif</span>  </span></span><br></pre></td></tr></table></figure><p>其实都是些老朋友了，这是换了名字罢了，<br>这个名字的含义其实就是他们的数据大小的位数，例如：<br><code>uint8_t</code>就是<code>unsigned char</code>的大小：<br>2个字节 = 8位</p><p>还有一个常用的就是<code>volatile</code>了。<br>这是HAL库里<code>volatile</code>的一些别名</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span>     __I     volatile const        <span class="comment">/*!&lt; defines &#x27;read only&#x27; permissions      */</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span>     __O     volatile                  <span class="comment">/*!&lt; defines &#x27;write only&#x27; permissions     */</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span>     __IO    volatile                  <span class="comment">/*!&lt; defines &#x27;read / write&#x27; permissions   */</span></span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p><code>volatile</code> 影响编译器编译的结果,<code>volatile</code>指出 变量是随时可能发生变化的，与<code>volatile</code>变量有关的运算，不要进行编译优化，以免出错。<br>例如：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">volatile</span> <span class="type">int</span> i=<span class="number">10</span>; </span><br><span class="line"><span class="type">int</span> j = i; </span><br><span class="line">... </span><br><span class="line"><span class="type">int</span> k = i;</span><br></pre></td></tr></table></figure><p><code>volatile</code> 告诉编译器<code>i</code>是随时可能发生变化的，每次使用它的时候必须从<code>i</code>的地址中读取，因而编译器生成的可执行码会重新从<code>i</code>的地址读取数据放在<code>k</code>中。<br>而优化做法是，由于编译器 发现两次从<code>i</code>读数据的代码之间的代码没有对i进行过操作，它会自动把上次读的数据放在<code>k</code>中。而不是重新从<code>i</code>里面读。<br>这样以来，如果<code>i</code>是一个<strong>寄存器变量</strong>或者<strong>表示一个端口数据</strong>就容易出错，所以说<code>volatile</code>可以保证对特殊地址的稳定访问，不会出错。</p><p>详情可以参考：<br><a href="https://blog.csdn.net/u010879456/article/details/53705089">C语言中volatile的用法及意义</a><br><a href="https://zhuanlan.zhihu.com/p/138819184">volatile 关键字，你真的理解吗？</a></p><h2 id="4-3-结构体指针的妙用">4.3 结构体指针的妙用</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">GPIOx-&gt;BSRR = GPIO_Pin;</span><br></pre></td></tr></table></figure><p>我们看见了这个句子<br>仔细观察，不难发现，GPIOx是一个结构体指针，它的类型是<code>GPIO_TypeDef</code>，</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">  __IO <span class="type">uint32_t</span> CRL;</span><br><span class="line">  __IO <span class="type">uint32_t</span> CRH;</span><br><span class="line">  __IO <span class="type">uint32_t</span> IDR;</span><br><span class="line">  __IO <span class="type">uint32_t</span> ODR;</span><br><span class="line">  __IO <span class="type">uint32_t</span> BSRR;</span><br><span class="line">  __IO <span class="type">uint32_t</span> BRR;</span><br><span class="line">  __IO <span class="type">uint32_t</span> LCKR;</span><br><span class="line">&#125; GPIO_TypeDef;</span><br></pre></td></tr></table></figure><p>那么为什么要定义这么一个结构体呢，我们不能直接像51那样定义一个宏等于一个寄存器的地址吗？<br>可以是可以，但那样就需要定义的太多了。这样的方式可以只做一个GPIO寄存器的模板，后面相似的GPIO的寄存器分布是一样，只需改变指针就行了。</p><p>结构体分配的内存空间的连续的，也就是说CRL到LCKR的这些<code>__IO uint32_t</code>的结构体成员将会每个人分到32位的空间，而且还是连续的。<br>就比如</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">N</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="type">int</span> a;</span><br><span class="line"><span class="type">int</span> b; </span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>假设若能指定在地址为0x8080000这个地址开始声明这个结构体，那么就会有</p><p><img src="https://img-blog.csdnimg.cn/d50a8fbe8aea4794b04a2a075c305db9.png" alt="struct"></p><p>而指定结构体一开始在哪里声明的方法就是结构体指针，让我们来看一下HAL库是怎么实现的吧</p><p><img src="https://img-blog.csdnimg.cn/a02d5bccd4a34ed28fce9fa37a34b6fc.png" alt="struct"></p><p>OMG，原来是一个又一次的地址偏移。<br>让我们算一下<code>GPIOA</code>的地址为0x40010800</p><p><img src="https://img-blog.csdnimg.cn/7845775a169a4ba18a234e89846a0a61.png" alt="在这里插入图片描述"><br>就是当<code>GPIOx</code>被传入<code>GPIOA</code>的时候，也就是一个<code>((GPIO_TypeDef *)0x40010800)</code><br>让我们查看一下参考手册，验证一下我们的计算是否正确</p><p><img src="https://img-blog.csdnimg.cn/b7cd2930c2c3401e994892f462653e4d.png" alt=""><br>和我们的计算结果一致，非常好。<br>看来是算对了的！！可以好好休息一下，奖励一下自己了。</p><p>有了首地址（这个结构体指针），我们在这个首地址建立结构体，映射到实际的物理地址上的每个寄存器，再使用结构体指针去访问。<br>这样就是实现了结构体的每个成员按照寄存器地址偏移的多少来“各找各妈，各回各家”。就比如我们只要<code>GPIOA-&gt;BSRR = 8</code>，就能向这个BSRR寄存器里写入8这个值了，非常的方便！<br><img src="https://img-blog.csdnimg.cn/872ce7e11d5343819b25255795a0c5d9.png" alt=""></p><h2 id="4-4-看不见的寄存器">4.4 看不见的寄存器</h2><p>那么BSRR寄存器是干嘛的呢<br>这个寄存器就是我们前面说的控制寄存器，这里的用法是BRy(高16位) 为清除端口x的位y，（Port x的pin_y，y = 0…15），清除嘛，就是写0了，就是低电平。而BSy(低16位) 为设置端口x的位y，（Port x的pin_y，y = 0…15），就是配置高电平咯。<br><img src="https://img-blog.csdnimg.cn/819ec870f02d43e8ad97483489e2e239.png" alt=""><br>至此，我们揭秘了一个HAL库封装起来的<code>HAL_GPIO_WritePin</code>函数。</p><p>和BSRR类似的还有ODR寄存器，也能控制GPIO输出的高低电平。</p><p>可以参考：<br><a href="https://blog.csdn.net/u010448932/article/details/80230356">ODR, BSRR, BRR的差别</a></p><p>那我们再用这些知识看看HAL库为我们生成的图像化配置的代码。<br>Core/Src/gpio.c</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">MX_GPIO_Init</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">  GPIO_InitTypeDef GPIO_InitStruct = &#123;<span class="number">0</span>&#125;;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/* GPIO Ports Clock Enable */</span></span><br><span class="line">  __HAL_RCC_GPIOE_CLK_ENABLE();</span><br><span class="line">  __HAL_RCC_GPIOA_CLK_ENABLE();</span><br><span class="line"></span><br><span class="line">  <span class="comment">/*Configure GPIO pin Output Level */</span></span><br><span class="line">  HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_SET);</span><br><span class="line"></span><br><span class="line">  <span class="comment">/*Configure GPIO pin : PtPin */</span></span><br><span class="line">  GPIO_InitStruct.Pin = LED1_Pin;</span><br><span class="line">  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;</span><br><span class="line">  GPIO_InitStruct.Pull = GPIO_NOPULL;</span><br><span class="line">  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;</span><br><span class="line">  HAL_GPIO_Init(LED1_GPIO_Port, &amp;GPIO_InitStruct);</span><br><span class="line">  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里仔细讲解一下</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">GPIO_InitTypeDef GPIO_InitStruct = &#123;<span class="number">0</span>&#125;;</span><br></pre></td></tr></table></figure><p>声明结构体来存放配置所需要的信息，就像填表一样，最后方便统一赋值给初始化函数。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* GPIO Ports Clock Enable */</span></span><br><span class="line">  __HAL_RCC_GPIOE_CLK_ENABLE();</span><br><span class="line">  __HAL_RCC_GPIOA_CLK_ENABLE();</span><br></pre></td></tr></table></figure><p>使能时钟。我们之前只是配置了时钟树，但具体到一些外设头上来，这个时钟是默认关闭的，我们需要为这个时钟使能。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_SET);</span><br></pre></td></tr></table></figure><p>默认高电平</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">GPIO_InitStruct.Pin = LED1_Pin;</span><br><span class="line">GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;</span><br><span class="line">GPIO_InitStruct.Pull = GPIO_NOPULL;</span><br><span class="line">GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;</span><br><span class="line"> HAL_GPIO_Init(LED1_GPIO_Port, &amp;GPIO_InitStruct);</span><br></pre></td></tr></table></figure><p>配置这个存放配置信息的结构体，并把这个结构体交给<code>HAL_GPIO_Init()</code>,就像交表一样。按照我们刚刚的知识，我们可以知道这个初始化函数肯定也是拿着我们配置信息，配置了很多很多配置寄存器。这里笔者不再多言，朋友们感兴趣可以查看函数内部实现和参考手册对应部分。</p><h2 id="4-5-模块化编程">4.5 模块化编程</h2><p>为了让我们的学习更加有成就感，也是为了方便我们的代码，我们会对代码进行模块化管理。<br><img src="https://img-blog.csdnimg.cn/49c08c91ac5d4c43b8ccbe22b1e0e1d3.png" alt="请添加图片描述"></p><p>我们在主目录创建HardWare/led目录</p><p><img src="https://img-blog.csdnimg.cn/ea87c26625b6443b8101c936da1a010f.png" alt="请添加图片描述"></p><p><img src="https://img-blog.csdnimg.cn/71b75ac076f54d02a452cabe5d58a154.png" alt="请添加图片描述"></p><p>创建led.c<br>相同方法创建led.h文件</p><p>编写他们</p><p>led.h</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// Created by Whisky on 2023/1/8.</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">ifndef</span> HELLOWORLD_LED_H</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> HELLOWORLD_LED_H</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;main.h&quot;</span></span></span><br><span class="line"><span class="type">void</span> <span class="title function_">led_init</span><span class="params">(<span class="type">void</span>)</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> LED1_Pin GPIO_PIN_5</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> LED1_GPIO_Port GPIOE</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __LED1_CLK_ON() do&#123;__HAL_RCC_GPIOE_CLK_ENABLE(); &#125;while(0)</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> LED0_Pin GPIO_PIN_5</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> LED0_GPIO_Port GPIOB</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __LED0_CLK_ON() do&#123;__HAL_RCC_GPIOB_CLK_ENABLE(); &#125;while(0)</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> LED1(x) LED1_GPIO_Port-&gt;BSRR |= (LED1_Pin &lt;&lt; (16 * (!x)))</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> LED0(x) LED0_GPIO_Port-&gt;BSRR |= (LED0_Pin &lt;&lt; (16 * (!x)))</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> LED0_Tog() HAL_GPIO_TogglePin(LED0_GPIO_Port,LED0_Pin)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> LED1_Tog() HAL_GPIO_TogglePin(LED1_GPIO_Port,LED1_Pin)</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span> <span class="comment">//HELLOWORLD_LED_H</span></span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>led.c</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// Created by Whisky on 2023/1/8.</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;led.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">led_init</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    GPIO_InitTypeDef GPIO_InitStruct = &#123;<span class="number">0</span>&#125;;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* GPIO Ports Clock Enable */</span></span><br><span class="line">    __LED0_CLK_ON();</span><br><span class="line">    __LED1_CLK_ON();</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*Configure GPIO pin Output Level */</span></span><br><span class="line">    LED0(<span class="number">1</span>);</span><br><span class="line">    LED1(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*Configure GPIO pin : PtPin */</span></span><br><span class="line"></span><br><span class="line">    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;</span><br><span class="line">    GPIO_InitStruct.Pull = GPIO_NOPULL;</span><br><span class="line">    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;</span><br><span class="line">    GPIO_InitStruct.Pin = LED0_Pin;</span><br><span class="line">    HAL_GPIO_Init(LED0_GPIO_Port, &amp;GPIO_InitStruct);</span><br><span class="line">    GPIO_InitStruct.Pin = LED1_Pin;</span><br><span class="line">    HAL_GPIO_Init(LED1_GPIO_Port, &amp;GPIO_InitStruct);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>不过，我们也要让这两个文件也被编译，就得添加头文件和源文件。</p><p><img src="https://img-blog.csdnimg.cn/95ff7ca54d2448339aefaa153cc85d5a.png" alt="请添加图片描述"></p><p><img src="https://img-blog.csdnimg.cn/582d7c425864404a9586a112880f47bd.png" alt="请添加图片描述"></p><p><img src="https://img-blog.csdnimg.cn/a6e25f684df94fb280ef6b1a199dad17.png" alt="请添加图片描述"></p><p><img src="https://img-blog.csdnimg.cn/aaeb3f2a0aab4db69ed01a70e9bce12a.png" alt="请添加图片描述"></p><p><img src="https://img-blog.csdnimg.cn/b13e492578004e5d96a777c73b1a12e0.png" alt="请添加图片描述"></p><p>分别为Debug和release添加源文件</p><p><img src="https://img-blog.csdnimg.cn/91458ec1f26a49c6963eb84372e561c9.png" alt="请添加图片描述"></p><p><img src="https://img-blog.csdnimg.cn/a9a275c0e69c4a3dac537df4489202cd.png" alt="请添加图片描述"></p><p>为main.c添加：<br><code>#include &quot;led.h&quot;</code> 头文件引用<br><code>led_init();</code> 初始化函数</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* USER CODE BEGIN Header */</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">  ******************************************************************************</span></span><br><span class="line"><span class="comment">  * @file           : main.c</span></span><br><span class="line"><span class="comment">  * @brief          : Main program body</span></span><br><span class="line"><span class="comment">  ******************************************************************************</span></span><br><span class="line"><span class="comment">  * @attention</span></span><br><span class="line"><span class="comment">  *</span></span><br><span class="line"><span class="comment">  * Copyright (c) 2023 STMicroelectronics.</span></span><br><span class="line"><span class="comment">  * All rights reserved.</span></span><br><span class="line"><span class="comment">  *</span></span><br><span class="line"><span class="comment">  * This software is licensed under terms that can be found in the LICENSE file</span></span><br><span class="line"><span class="comment">  * in the root directory of this software component.</span></span><br><span class="line"><span class="comment">  * If no LICENSE file comes with this software, it is provided AS-IS.</span></span><br><span class="line"><span class="comment">  *</span></span><br><span class="line"><span class="comment">  ******************************************************************************</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"><span class="comment">/* USER CODE END Header */</span></span><br><span class="line"><span class="comment">/* Includes ------------------------------------------------------------------*/</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;main.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;gpio.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* Private includes ----------------------------------------------------------*/</span></span><br><span class="line"><span class="comment">/* USER CODE BEGIN Includes */</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;led.h&quot;</span></span></span><br><span class="line"><span class="comment">/* USER CODE END Includes */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* Private typedef -----------------------------------------------------------*/</span></span><br><span class="line"><span class="comment">/* USER CODE BEGIN PTD */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* USER CODE END PTD */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* Private define ------------------------------------------------------------*/</span></span><br><span class="line"><span class="comment">/* USER CODE BEGIN PD */</span></span><br><span class="line"><span class="comment">/* USER CODE END PD */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* Private macro -------------------------------------------------------------*/</span></span><br><span class="line"><span class="comment">/* USER CODE BEGIN PM */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* USER CODE END PM */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* Private variables ---------------------------------------------------------*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* USER CODE BEGIN PV */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* USER CODE END PV */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* Private function prototypes -----------------------------------------------*/</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">SystemClock_Config</span><span class="params">(<span class="type">void</span>)</span>;</span><br><span class="line"><span class="comment">/* USER CODE BEGIN PFP */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* USER CODE END PFP */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* Private user code ---------------------------------------------------------*/</span></span><br><span class="line"><span class="comment">/* USER CODE BEGIN 0 */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* USER CODE END 0 */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">  * @brief  The application entry point.</span></span><br><span class="line"><span class="comment">  * @retval int</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="comment">/* USER CODE BEGIN 1 */</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">/* USER CODE END 1 */</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">/* MCU Configuration--------------------------------------------------------*/</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">/* Reset of all peripherals, Initializes the Flash interface and the Systick. */</span></span><br><span class="line">  HAL_Init();</span><br><span class="line"></span><br><span class="line">  <span class="comment">/* USER CODE BEGIN Init */</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">/* USER CODE END Init */</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">/* Configure the system clock */</span></span><br><span class="line">  SystemClock_Config();</span><br><span class="line"></span><br><span class="line">  <span class="comment">/* USER CODE BEGIN SysInit */</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">/* USER CODE END SysInit */</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">/* Initialize all configured peripherals */</span></span><br><span class="line">  MX_GPIO_Init();</span><br><span class="line">  <span class="comment">/* USER CODE BEGIN 2 */</span></span><br><span class="line"> led_init();</span><br><span class="line">  <span class="comment">/* USER CODE END 2 */</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">/* Infinite loop */</span></span><br><span class="line">  <span class="comment">/* USER CODE BEGIN WHILE */</span></span><br><span class="line">  <span class="keyword">while</span> (<span class="number">1</span>)</span><br><span class="line">  &#123;</span><br><span class="line">  LED0(<span class="number">0</span>);</span><br><span class="line">  HAL_Delay(<span class="number">500</span>);</span><br><span class="line">  LED0(<span class="number">1</span>);</span><br><span class="line">  HAL_Delay(<span class="number">500</span>);</span><br><span class="line">    <span class="comment">/* USER CODE END WHILE */</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/* USER CODE BEGIN 3 */</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">/* USER CODE END 3 */</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">  * @brief System Clock Configuration</span></span><br><span class="line"><span class="comment">  * @retval None</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">SystemClock_Config</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">  RCC_OscInitTypeDef RCC_OscInitStruct = &#123;<span class="number">0</span>&#125;;</span><br><span class="line">  RCC_ClkInitTypeDef RCC_ClkInitStruct = &#123;<span class="number">0</span>&#125;;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/** Initializes the RCC Oscillators according to the specified parameters</span></span><br><span class="line"><span class="comment">  * in the RCC_OscInitTypeDef structure.</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line">  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;</span><br><span class="line">  RCC_OscInitStruct.HSEState = RCC_HSE_ON;</span><br><span class="line">  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;</span><br><span class="line">  RCC_OscInitStruct.HSIState = RCC_HSI_ON;</span><br><span class="line">  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;</span><br><span class="line">  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;</span><br><span class="line">  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;</span><br><span class="line">  <span class="keyword">if</span> (HAL_RCC_OscConfig(&amp;RCC_OscInitStruct) != HAL_OK)</span><br><span class="line">  &#123;</span><br><span class="line">    Error_Handler();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/** Initializes the CPU, AHB and APB buses clocks</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line">  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK</span><br><span class="line">                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;</span><br><span class="line">  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;</span><br><span class="line">  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;</span><br><span class="line">  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;</span><br><span class="line">  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (HAL_RCC_ClockConfig(&amp;RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)</span><br><span class="line">  &#123;</span><br><span class="line">    Error_Handler();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* USER CODE BEGIN 4 */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* USER CODE END 4 */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">  * @brief  This function is executed in case of error occurrence.</span></span><br><span class="line"><span class="comment">  * @retval None</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">Error_Handler</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="comment">/* USER CODE BEGIN Error_Handler_Debug */</span></span><br><span class="line">  <span class="comment">/* User can add his own implementation to report the HAL error return state */</span></span><br><span class="line">  __disable_irq();</span><br><span class="line">  <span class="keyword">while</span> (<span class="number">1</span>)</span><br><span class="line">  &#123;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">/* USER CODE END Error_Handler_Debug */</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">ifdef</span>  USE_FULL_ASSERT</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">  * @brief  Reports the name of the source file and the source line number</span></span><br><span class="line"><span class="comment">  *         where the assert_param error has occurred.</span></span><br><span class="line"><span class="comment">  * @param  file: pointer to the source file name</span></span><br><span class="line"><span class="comment">  * @param  line: assert_param error line source number</span></span><br><span class="line"><span class="comment">  * @retval None</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">assert_failed</span><span class="params">(<span class="type">uint8_t</span> *file, <span class="type">uint32_t</span> line)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="comment">/* USER CODE BEGIN 6 */</span></span><br><span class="line">  <span class="comment">/* User can add his own implementation to report the file name and line number,</span></span><br><span class="line"><span class="comment">     ex: printf(&quot;Wrong parameters value: file %s on line %d\r\n&quot;, file, line) */</span></span><br><span class="line">  <span class="comment">/* USER CODE END 6 */</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span> <span class="comment">/* USE_FULL_ASSERT */</span></span></span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/48e4d2525ea64a4583baaf0fa185c9ac.png#pic_center" alt=""><br>当然，这个时候我们可以关闭STM32CubeIDE自动生成GPIO的代码了，因为都被我们抄到我们的<code>led_init</code>里面去了。</p><p>于是，我们有了我们的第一块积木——LED模块</p><p>这只是我们STM32之旅的一个小小的开始。(￣_,￣ )</p>]]></content>
      
      
      <categories>
          
          <category> 跟我一起写STM32 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> stm32 </tag>
            
            <tag> 嵌入式 </tag>
            
            <tag> c语言 </tag>
            
            <tag> 单片机 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>启航——跟我一起写STM32(第一期)</title>
      <link href="/2023/01/10/STM32/%E5%90%AF%E8%88%AA%E2%80%94%E2%80%94%E8%B7%9F%E6%88%91%E4%B8%80%E8%B5%B7%E5%86%99STM32(%E7%AC%AC%E4%B8%80%E6%9C%9F)/"/>
      <url>/2023/01/10/STM32/%E5%90%AF%E8%88%AA%E2%80%94%E2%80%94%E8%B7%9F%E6%88%91%E4%B8%80%E8%B5%B7%E5%86%99STM32(%E7%AC%AC%E4%B8%80%E6%9C%9F)/</url>
      
        <content type="html"><![CDATA[<span id="more"></span><h3 id="文章目录">文章目录</h3><ul><li><a href="#1-%E5%89%8D%E8%A8%80">1. 前言</a></li><li><a href="#2-%E9%85%8D%E7%BD%AE%E7%8E%AF%E5%A2%83">2. 配置环境</a><ul><li><a href="#21-%E5%9F%BA%E6%9C%AC%E4%BB%8B%E7%BB%8D">2.1 基本介绍</a></li><li><a href="#22-%E4%B8%8B%E8%BD%BD%E5%AE%89%E8%A3%85">2.2 下载安装</a></li><li><a href="#23-stm%E4%B8%BB%E6%B5%81%E5%BC%80%E5%8F%91%E6%96%B9%E5%BC%8F">2.3 STM主流开发方式</a></li><li><a href="#24-%E5%8F%82%E8%80%83%E8%B5%84%E6%96%99%E4%BB%8B%E7%BB%8D">2.4 参考资料介绍</a></li><li><a href="#25-%E7%A1%AC%E4%BB%B6%E8%AE%BE%E5%A4%87">2.5 硬件设备</a></li></ul></li></ul><h1 id="1-前言">1. 前言</h1><p>笔者出此系列STM32教学仅供和大家一起学习，笔者也是小白，此笔记也算是和大家一起学习。<br>本笔记也参考了大多数资料和文章，笔者只是拾人牙慧的小屁孩。</p><h1 id="2-配置环境">2. 配置环境</h1><h2 id="2-1-基本介绍">2.1 基本介绍</h2><p>那我们废话多说，现在介绍一下本次学习所使用的工具-----STM32CubeIDE。<br>笔者了解到目前主流的stm32编程环境有：</p><ol><li>Keil</li><li>IAR</li><li>STM32CubeMX + VSCode/Clion</li><li>STM32CubeIDE</li></ol><p>现在我们来说一下优劣：</p><ol><li>Keil：作为刚入门的新手来说，keil开发32的优势确实很明显，简单说就是配置不繁琐，网上教程较多，比较容易上手，调试功能什么的很不错。如果用标准固件库的开发者，也许就第一次配置需要多花一些时间进行配置，第一个工程文档建好之后，强烈建议保存！可以作为模板为以后的开发提供便利。不过，Keil的IDE风格实在太老土了，笔者觉得并不好看。</li><li>IAR：首先IAR的界面，怎么说呢，比keil好一些，但也只是好一些。功能方面覆盖了keil的功能了，但是编译效率更加高，速度更加快。一般使用IAR+source insight，在source insight里面编辑，在IAR编译，美滋滋，可以满足绝大部分的人的需求了。</li><li>STM32CubeMX：STM32CubeMX生成工程文件，再使用自己喜欢的IDE进行编程，例子嘛，可以看看知乎大神 稚晖 的“配置CLion用于STM32开发【优雅の嵌入式开发】”，非常的优雅。</li><li>STM32CubeIDE：比较美观的界面，基于 Eclipse / CDT 框架和 GCC 工具链进行开发，多功能的多操作系统开发工具。</li></ol><p>笔者教程中会选择STM32CubeIDE的主要原因是其简单易上手(手动滑稽)，接下来也会重点讲它的安装。<br>笔者日常生活中喜欢STM32CubeMX+Clion的方式(毕竟是稚晖君的粉丝)，想体验的可以参考：<br>视频(b站)资料参考<img src="https://img-blog.csdnimg.cn/9e0134affbec4af393b0cf6d7c2eb145.png#pic_center" alt="b站视频"><br>文章资料参考<br><a href="https://zhuanlan.zhihu.com/p/145801160">配置CLion用于STM32开发【优雅の嵌入式开发】</a></p><h2 id="2-2-下载安装">2.2 下载安装</h2><p>(1) 找到官网下载地址<br>(2) 找到适合自己的版本下载，笔者一般下最新版<br><img src="https://img-blog.csdnimg.cn/763c5141002e4cf998758e9f2866e9a9.png" alt=""><br>(3) 下载好后无脑安装<br><img src="https://img-blog.csdnimg.cn/74dd6225770447338565bf942cf95af1.png" alt=""><br><img src="https://img-blog.csdnimg.cn/ad784d5262be4897b7c4b199fc21be69.png" alt=""><br>(4) 打开 STM32CubeIDE 软件，选择合适的工作路径(接下来一系列的项目的保存地址)，点击 Launch<br>(5) 好了，大功告成，可以休息一下奖励自己了</p><h2 id="2-3-stm主流开发方式">2.3 STM主流开发方式</h2><ol><li><strong>直接配置寄存器</strong><br>不少先学了 51 的朋友可能会知道，我们开发51单片机时，使用C语言或者汇编语言直接操作指针或物理地址来配置寄存器，以实现我们需要的功能。这样的好处是高效，但代价是我们编程时反复查阅参考手册，影响效率。而且这种方法到了 STM32 就变得不太容易行得通了，因为 STM32 的寄存器数量是 51 单片机的十数倍，如此多的寄存器根本无法全部记忆，开发时需要经常的翻查芯片的数据手册，此时直接操作寄存器就变得非常的费力了。</li><li><strong>使用标准外设库开发</strong><br>上面也提到了，STM32 有非常多的寄存器，而导致了开发困难，所以为此 ST 公司就为每款芯片都编写了一份库文件，也就是工程文件里 stm32F1xx…之类的。在这些 .c .h 文件中，包括一些常用量的宏定义，把一些外设也通过结构体变量封装起来，如 GPIO 口时钟等。所以我们只需要配置结构体变量成员就可以修改外设的配置寄存器，从而选择不同的功能。不过目前停止了更新和维护。</li><li><strong>使用HAL/LL库开发</strong><br>HAL 库是 ST 公司目前主力推的开发方式，全称就是 Hardware Abstraction Layer（抽象印象层）。词如其名，主要就是封装和抽象，方便我们的编程。<br>ST在推行HAL库的时候，逐渐停止了对于标准库的更新（新出的芯片以及不再提供标准库了），但他们也意识到了HAL库效率较低的问题，因此同时也推出了LL（ Low-layer ）库。低层驱动程序概述低层（LL）驱动程序旨在提供快速的轻量级面向专家的层，该层比HAL更接近硬件。与HAL相反，对于优化访问权限不是关键功能的外围设备，或需要大量软件配置和/或复杂上层堆栈（例如FSMC，USB或SDMMC）的外围设备，则不提供LL API。<br>总结一下就是，HAL更抽象，LL是相比于HAL贴近底层的抽象。</li></ol><p>综上，我们选择HAL库开发</p><h2 id="2-4-参考资料介绍">2.4 参考资料介绍</h2><p>代码风格： <a href="http://47.111.11.73/docs/index.html"><em>正点原子</em></a><br>部分源码： <a href="http://47.111.11.73/docs/index.html"><em>正点原子</em></a><br><img src="https://img-blog.csdnimg.cn/13a5359196624f15a4e8342b730764e0.png" alt="alientek"></p><p>书籍： <em>《STM32Cube高效开发教程(基础篇)》</em><br><img src="https://img-blog.csdnimg.cn/501403c8f6a04f86b177b39f63c6e5ba.png" alt="book"></p><p>手册： <em>《STM32F10xxx中文参考手册_V10》</em><br>手册下载途径：<br><a href="http://www.st.com/mcu/">ST官网</a></p><h2 id="2-5-硬件设备">2.5 硬件设备</h2><ol><li>一台电脑</li><li>STM32开发板 (笔者自己用的有：正点原子战舰V3(STM32F103ZET6)、STM32RCT6)</li><li>STLink(若是没有连接线，则需要杜邦线连接到STM32上)</li><li>CH340(用于串口调试)</li><li>OLED(SSD1306)</li><li>LCD(正点原子 2.8/2.4 电阻LCD触摸屏)</li></ol><p><em>注：并不是说这些就是最好的配置，只是从学长那儿买来的二手货正好有这些，就将使用了</em></p>]]></content>
      
      
      <categories>
          
          <category> 跟我一起写STM32 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> stm32 </tag>
            
            <tag> 嵌入式 </tag>
            
            <tag> c语言 </tag>
            
            <tag> 单片机 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>STM32内存管理方法</title>
      <link href="/2023/01/08/ProgramLog/STM32%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86%E6%96%B9%E6%B3%95/"/>
      <url>/2023/01/08/ProgramLog/STM32%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86%E6%96%B9%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<span id="more"></span><h1 id="一-问题背景">一、问题背景</h1><p>最近在研究内存管理的时候，看见了正点原子的代码，不过由于我使用的是GCC编译，很多地方必须修改，于是就看见了下面这篇文章，并解决了问题。</p><p><a href="https://www.cnblogs.com/RegressionWorldLine/p/11968467.html">STM32 .ld链接文件分析及一次bug解决过程</a></p><p>不过，在查资料的途中又遇见了这篇文章，开了眼界。</p><p><a href="https://blog.csdn.net/u012183892/article/details/105375796">两种内存池管理方法对比</a></p><p>于是，为了学习内存管理思想的精妙，故留下此学习笔记，以作总结，有错误还请多多包涵。</p><h1 id="二-介绍">二、介绍</h1><p>内存管理，是指软件运行时对计算机内存资源的分配和使用的技术。其最主要的目的是如</p><p>何高效，快速的分配，并且在适当的时候释放和回收内存资源。</p><p>在我们学习C语言的时候，有学习到malloc和free，一般情况下，C程序使用malloc()在堆上分配内存，free()释放内存。</p><p>malloc工作原理</p><p>malloc函数分配的内存是在堆（heap）上的。操作系统有一个记录空闲内存地址的链表，当系统收到程序的申请时，会遍历该链表，寻找第一个空间大于所申请空间的堆结点，然后将该结点从空闲结点链表中删除，并将该结点的空间分配给程序，另外，对于大多数系统，会在这块内存空间中的首地址处记录本次分配的大小，这样代码中的delete或free语句才能正确的释放本内存空间。我们常说的内存泄露，最常见的就是堆泄露（还有资源泄露），它是指程序在运行中出现泄露，如果程序被关闭掉的话，操作系统会帮助释放泄漏的内存。</p><p>malloc的使用</p><p>malloc函数使用起来倒是挺简单的，主要的使用范例有两种：一是动态分配结构体，通常用于被称为“链表”的数据结构中；二是分配可变长度的数组。</p><p>有几点值得注意：</p><p>1.调用malloc函数后，应该对函数返回值进行检查。前面说过，内存分配一旦失败，malloc（）会返回NULL。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">char</span> *p = <span class="literal">NULL</span>;</span><br><span class="line">p = (<span class="type">char</span> *)<span class="built_in">malloc</span>(<span class="built_in">sizeof</span>(<span class="type">char</span>));</span><br><span class="line"><span class="keyword">if</span>(!p)</span><br><span class="line">    <span class="keyword">return</span>;</span><br></pre></td></tr></table></figure><p>2.在程序结束时，应该调用free函数对malloc函数分配的内存进行释放。</p><p>实际上，c语言标准没有规定要这么做，而且普通的PC上的操作系统，在进程结束时，肯定会释放曾经分配给当前进程的内存空间，也就是说，在程序结束之前，没有必要调用free（）。但是，对于一串连续的程序处理事件，如果先前程序分配的内存没有及时释放掉，那后面的工作就遭殃了。所以”malloc与free配套出现”还是相当合理的。</p><h1 id="三-固定大小内存块分配">三、固定大小内存块分配</h1><p>讲了这么多题外话，现在让我们在单片机上实现内存管理吧。</p><p>参考《STM32F1开发指南-HAL库版本_V1.1.pdf》</p><p><img src="https://img-blog.csdnimg.cn/img_convert/64bdef147bbc72a0898ee7d1bf130287.png" alt=""></p><p>我们将内存池分为n块，对应到内存管理表上。</p><p>内存管理表的意义就是：</p><p>当该项值为 0 的时候，代表对应的内存块未被占用；</p><p>当该项值非零的时候，代表该项对应的内存块已经被占用，其数值则代表被连续占用的内存块数。</p><p>比如某项值为 10，那么说明包括本项对应的内存块在内，总共分配了 10 个内存块给外部的某</p><p>个指针。</p><p>内寸分配方向如图所示，是从顶→底的分配方向。即首先从最末端开始找空内存。当内存管理刚初始化的时候，内存表全部清零，表示没有任何内存块被占用。</p><p>分配原理</p><p>当指针p调用malloc申请内存的时候，先判断p要分配的内存块数（m），然后从第n项开始，向下查找，直到找到m块连续的空内存块（即对应内存管理表项为0），然后将这m个内存管理表项的值都设置为m（标记被占用），最后，把最后的这个空内存块的地址返回指针p，完成一次分配。注意，如果当内存不够的时候（找到最后也没找到连续的m块空闲内存），则返回NULL给p，表示分配失败。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">u32 _mem_malloc(u8 memx, u32 size)<span class="comment">//memx:要选择申请的内存区域 size:申请的大小</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">signed</span> <span class="type">long</span> offset;<span class="comment">//地址偏移</span></span><br><span class="line">    u32 nmemb;      <span class="comment">//需要的内存块数</span></span><br><span class="line">    u32 cmemb = <span class="number">0</span>;  <span class="comment">//连续空内存块数</span></span><br><span class="line">    <span class="keyword">if</span> (!malloc_dev.memrdy[memx])   malloc_dev.<span class="built_in">init</span>(memx);<span class="comment">//未初始化</span></span><br><span class="line">    <span class="keyword">if</span> (size == <span class="number">0</span>)  <span class="keyword">return</span> <span class="number">0xFFFFFFFF</span>;  <span class="comment">//不需要分配了</span></span><br><span class="line">    nmemb = size / memblksize[memx];  <span class="comment">//获取需要分配的连续内存块数</span></span><br><span class="line">    <span class="keyword">if</span>(size % memblksize[memx]) nmemb++;<span class="comment">//不满一块的按一块算</span></span><br><span class="line">    <span class="keyword">for</span>(offset = memtblsize[memx]<span class="number">-1</span>; offset &gt;= <span class="number">0</span>; offset --)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(!malloc_dev.memmap[memx][offset])cmemb++;<span class="comment">//连着是空的</span></span><br><span class="line">        <span class="keyword">else</span> cmemb = <span class="number">0</span>;<span class="comment">//连续的条件被打断了</span></span><br><span class="line">        <span class="keyword">if</span>(cmemb == nmemb)          <span class="comment">//找到了</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">for</span>(u32 i = <span class="number">0</span>; i &lt; nmemb; i++)</span><br><span class="line">            &#123;</span><br><span class="line">                malloc_dev.memmap[memx][offset + i] = nmemb;    <span class="comment">//填表</span></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> (offset*memblksize[memx]);;<span class="comment">//返回偏移地址</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0XFFFFFFFF</span>;<span class="comment">//未找到符合分配条件的内存块</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>释放原理</p><p>当p申请的内存用完，需要释放的时候，调用free函数实现。free函数先判断p指向的内存地址所对应的内存块，然后找到对应的内存管理表项目，得到p所占用的内存块数目m（内存管理表项目的值就是所分配内存块的数目），将这m个内存管理表项目的值都清零，标记释放，完成一次内存释放。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">u8 _mem_free(u8 memx,u32 offset)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> (!malloc_dev.memrdy[memx])</span><br><span class="line">    &#123;</span><br><span class="line">        malloc_dev.<span class="built_in">init</span>(memx);<span class="comment">//未初始化</span></span><br><span class="line">        <span class="keyword">return</span> Fail;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (offset &lt; memsize[memx]) <span class="comment">//偏移在内存池中</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> index = offset/memblksize[memx];        <span class="comment">//偏移所在内存块号码</span></span><br><span class="line">        <span class="type">int</span> nmemb=malloc_dev.memmap[memx][index];   <span class="comment">//内存块数量</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>; i &lt; nmemb; i++)                <span class="comment">//给这些内存块清零</span></span><br><span class="line">        &#123;</span><br><span class="line">            malloc_dev.memmap[memx][index+i] = <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> OK;<span class="comment">//释放成功了,yeah</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span>    <span class="comment">//偏移超区了.</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> Fail;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>看一下完整的代码：</p><p>malloc.h</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">ifndef</span> HELLOWORLD_MALLOC_H</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> HELLOWORLD_MALLOC_H</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;main.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">ifndef</span> NULL</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> NULL 0</span></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">ifndef</span> OK</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> OK 0</span></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">ifndef</span> Fail</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> Fail 1</span></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> SRAM_IN 0    <span class="comment">//内部SRAM</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> SRAM_EX 1    <span class="comment">//外部SRAM</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> SRAMBANK 2</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//mem1 内部SRAM</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MEM1_BLOCK_SIZE         16                                      <span class="comment">//每个内存块为16字节</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MEM1_MAX_SIZE           40*1024                                 <span class="comment">//40KB</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MEM1_ALLOC_TABLE_SIZE   MEM1_MAX_SIZE/MEM1_BLOCK_SIZE</span></span><br><span class="line"><span class="comment">//mem2 外部SRAM</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MEM2_BLOCK_SIZE         32                                      <span class="comment">//每个内存块为32字节</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MEM2_MAX_SIZE           960*1024                                <span class="comment">//960KB</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MEM2_ALLOC_TABLE_SIZE   MEM2_MAX_SIZE/MEM2_BLOCK_SIZE</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//内存管理控制器</span></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">_malloc_dev</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">void</span> (*init)(u8);          <span class="comment">//初始化</span></span><br><span class="line">    <span class="built_in">u8</span> (*perused)(u8);    <span class="comment">//内存使用率</span></span><br><span class="line">    u8 *membase[SRAMBANK];     <span class="comment">//内存池</span></span><br><span class="line">    u16 *memmap[SRAMBANK];     <span class="comment">//内存管理状态表</span></span><br><span class="line">    u8 memrdy[SRAMBANK];       <span class="comment">//内存管理是否就绪</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">extern</span> <span class="keyword">struct</span> <span class="title class_">_malloc_dev</span> malloc_dev;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> *<span class="title">mem_realloc</span><span class="params">(u8 memx, <span class="type">void</span> *ptr, u32 size)</span></span>;</span><br><span class="line"><span class="function"><span class="type">void</span> *<span class="title">mem_malloc</span><span class="params">(u8 memx, u32 size)</span></span>;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">mem_free</span><span class="params">(u8 memx, <span class="type">void</span> *ptr)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">mem_cpy</span><span class="params">(<span class="type">void</span> *des, <span class="type">void</span> *src, u32 len)</span></span>;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">mem_set</span><span class="params">(<span class="type">void</span> *addr, u8 val, u32 len)</span></span>;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">mem_init</span><span class="params">(u8 memx)</span></span>;<span class="comment">//memx:所属内存块</span></span><br><span class="line"><span class="function">u8 <span class="title">mem_perused</span><span class="params">(u8 memx)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span> <span class="comment">//HELLOWORLD_MALLOC_H</span></span></span><br></pre></td></tr></table></figure><p>malloc.c</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;malloc.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">pragma</span> pack(4)    <span class="comment">//4字节对齐</span></span></span><br><span class="line">u8 mem1base[MEM1_MAX_SIZE];                                    <span class="comment">//内部SRAM内存池</span></span><br><span class="line">u8 mem2base[MEM2_MAX_SIZE]__attribute__((<span class="built_in">section</span> (<span class="string">&quot;.malloc&quot;</span>)));<span class="comment">//外部SRAM内存池</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//MAP</span></span><br><span class="line">u16 mem1mapbase[MEM1_ALLOC_TABLE_SIZE];</span><br><span class="line">u16 mem2mapbase[MEM2_ALLOC_TABLE_SIZE]__attribute__((<span class="built_in">section</span> (<span class="string">&quot;.mallocmap&quot;</span>)));</span><br><span class="line"></span><br><span class="line"><span class="comment">//内存管理参数</span></span><br><span class="line"><span class="type">const</span> u32 memtblsize[SRAMBANK] = &#123;MEM1_ALLOC_TABLE_SIZE, MEM2_ALLOC_TABLE_SIZE&#125;;<span class="comment">//内存表大小(一共多少块)</span></span><br><span class="line"><span class="type">const</span> u32 memblksize[SRAMBANK] = &#123;MEM1_BLOCK_SIZE, MEM2_BLOCK_SIZE&#125;;<span class="comment">//每个快的大小</span></span><br><span class="line"><span class="type">const</span> u32 memsize[SRAMBANK] = &#123;MEM1_MAX_SIZE, MEM2_MAX_SIZE&#125;;<span class="comment">//内存总大小</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//内存管理控制器</span></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">_malloc_dev</span> malloc_dev=</span><br><span class="line">&#123;</span><br><span class="line">        mem_init,</span><br><span class="line">        mem_perused,</span><br><span class="line">        mem1base, mem2base,</span><br><span class="line">        mem1mapbase, mem2mapbase,</span><br><span class="line">        <span class="number">0</span>, <span class="number">0</span>,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//复制内存</span></span><br><span class="line"><span class="comment">//*des:目的地址(Destination)</span></span><br><span class="line"><span class="comment">//*src:源地址</span></span><br><span class="line"><span class="comment">//len:单位：字节</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">mem_cpy</span><span class="params">(<span class="type">void</span> *des, <span class="type">void</span> *src, u32 len)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    u8 *xdes = des;</span><br><span class="line">    u8 *xsrc = src;</span><br><span class="line">    <span class="keyword">while</span> (len--)</span><br><span class="line">    &#123;</span><br><span class="line">        *xdes++ = *xsrc++;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">mem_set</span><span class="params">(<span class="type">void</span> *addr, u8 val, u32 len)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    u8 *xaddr = addr;</span><br><span class="line">    <span class="keyword">while</span> (len--)</span><br><span class="line">    &#123;</span><br><span class="line">        *xaddr++ = val;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//memx:所属内存块</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">mem_init</span><span class="params">(u8 memx)</span><span class="comment">//初始化时，只用将内存池和内存管理表都清零即可。</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">mem_set</span>(malloc_dev.memmap[memx], <span class="number">0</span>, memtblsize[memx] * <span class="number">2</span>);</span><br><span class="line">    <span class="built_in">mem_set</span>(malloc_dev.membase[memx], <span class="number">0</span>, memsize[memx]);</span><br><span class="line">    malloc_dev.memrdy[memx]=<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function">u8 <span class="title">mem_perused</span><span class="params">(u8 memx)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    u32 used=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(u32 i=<span class="number">0</span>;i&lt;memtblsize[memx];i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(malloc_dev.memmap[memx][i])</span><br><span class="line">            used++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> (used*<span class="number">100</span>)/(memtblsize[memx]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//返回值:0XFFFFFFFF,代表错误;其他,内存偏移地址</span></span><br><span class="line">u32 _mem_malloc(u8 memx, u32 size)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">signed</span> <span class="type">long</span> offset;</span><br><span class="line">    u32 nmemb;      <span class="comment">//需要的内存块数</span></span><br><span class="line">    u32 cmemb = <span class="number">0</span>;  <span class="comment">//连续空内存块数</span></span><br><span class="line">    <span class="keyword">if</span> (!malloc_dev.memrdy[memx])   malloc_dev.<span class="built_in">init</span>(memx);<span class="comment">//未初始化</span></span><br><span class="line">    <span class="keyword">if</span> (size == <span class="number">0</span>)  <span class="keyword">return</span> <span class="number">0xFFFFFFFF</span>;  <span class="comment">//不需要分配了</span></span><br><span class="line">    nmemb = size / memblksize[memx];  <span class="comment">//获取需要分配的连续内存块数</span></span><br><span class="line">    <span class="keyword">if</span>(size % memblksize[memx]) nmemb++;</span><br><span class="line">    <span class="keyword">for</span>(offset = memtblsize[memx]<span class="number">-1</span>; offset &gt;= <span class="number">0</span>; offset --)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(!malloc_dev.memmap[memx][offset])cmemb++;</span><br><span class="line">        <span class="keyword">else</span> cmemb = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span>(cmemb == nmemb)          <span class="comment">//找到了</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">for</span>(u32 i = <span class="number">0</span>; i &lt; nmemb; i++)</span><br><span class="line">            &#123;</span><br><span class="line">                malloc_dev.memmap[memx][offset + i] = nmemb;    <span class="comment">//填表</span></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> (offset*memblksize[memx]);;<span class="comment">//返回偏移地址</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0XFFFFFFFF</span>;<span class="comment">//未找到符合分配条件的内存块</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//返回值:  0,释放成功;   1,释放失败;</span></span><br><span class="line">u8 _mem_free(u8 memx,u32 offset)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> (!malloc_dev.memrdy[memx])</span><br><span class="line">    &#123;</span><br><span class="line">        malloc_dev.<span class="built_in">init</span>(memx);<span class="comment">//未初始化</span></span><br><span class="line">        <span class="keyword">return</span> Fail;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (offset &lt; memsize[memx]) <span class="comment">//偏移在内存池中</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> index = offset/memblksize[memx];        <span class="comment">//偏移所在内存块号码</span></span><br><span class="line">        <span class="type">int</span> nmemb=malloc_dev.memmap[memx][index];   <span class="comment">//内存块数量</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>; i &lt; nmemb; i++)                <span class="comment">//内存块清零</span></span><br><span class="line">        &#123;</span><br><span class="line">            malloc_dev.memmap[memx][index+i] = <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> OK;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span>    <span class="comment">//偏移超区了.</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> Fail;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//返回值:分配到的内存首地址 (为NULL就错误)</span></span><br><span class="line"><span class="function"><span class="type">void</span> *<span class="title">mem_malloc</span><span class="params">(u8 memx, u32 size)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    u32 offset;</span><br><span class="line">    offset = _mem_malloc(memx,size);</span><br><span class="line">    <span class="keyword">if</span>(offset == <span class="number">0xFFFFFFFF</span>) <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">    <span class="keyword">else</span> <span class="built_in">return</span> (<span class="type">void</span>*)((u32)malloc_dev.membase[memx]+offset);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">mem_free</span><span class="params">(u8 memx, <span class="type">void</span> *ptr)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    u32 offset;</span><br><span class="line">    <span class="keyword">if</span>(ptr==<span class="literal">NULL</span>)<span class="keyword">return</span>;<span class="comment">//地址为 0.</span></span><br><span class="line">    offset=(u32)ptr-(u32)malloc_dev.membase[memx];</span><br><span class="line">    _mem_free(memx,offset); <span class="comment">//释放内存</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//返回值:分配到的内存首地址 (为NULL就错误)</span></span><br><span class="line"><span class="function"><span class="type">void</span> *<span class="title">mem_realloc</span><span class="params">(u8 memx, <span class="type">void</span> *ptr, u32 size)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    u32 offset;</span><br><span class="line">    offset=_mem_malloc(memx,size);</span><br><span class="line">    <span class="keyword">if</span>(offset==<span class="number">0XFFFFFFFF</span>)<span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">mem_cpy</span>((<span class="type">void</span> *) ((u32) malloc_dev.membase[memx] + offset), ptr, size); <span class="comment">//拷贝</span></span><br><span class="line">        <span class="built_in">mem_free</span>(memx,ptr); <span class="comment">//释放旧内存</span></span><br><span class="line">        <span class="keyword">return</span> (<span class="type">void</span>*)((u32)malloc_dev.membase[memx]+offset); <span class="comment">//返回新内存首地址</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>不过，由于是GCC编译，如果继续使用</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">__align(<span class="number">32</span>) u8 mem2base[MEM2_MAX_SIZE] __attribute__((<span class="built_in">at</span>(<span class="number">0X68000000</span>)));</span><br></pre></td></tr></table></figure><p>就会出现</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">warning: <span class="string">&#x27;at&#x27;</span> attribute directive ignored [-Wattributes]</span><br></pre></td></tr></table></figure><p>解决方法</p><p>arm-gcc同样支持指定变量地址，只不过语法是下面这样的：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">__attribute__ ((<span class="built_in">section</span> (<span class="string">&quot;SECTIONNAME&quot;</span>)))</span><br></pre></td></tr></table></figure><p>换句话说，在link文件中划分一个新的段，将这个变量放到这个段内就可以解决了。</p><p>于是，</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">u8 mem1base[MEM1_MAX_SIZE];                                    <span class="comment">//内部SRAM内存池</span></span><br><span class="line">u8 mem2base[MEM2_MAX_SIZE]__attribute__((<span class="built_in">section</span> (<span class="string">&quot;.malloc&quot;</span>)));<span class="comment">//外部SRAM内存池</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//MAP</span></span><br><span class="line">u16 mem1mapbase[MEM1_ALLOC_TABLE_SIZE];</span><br><span class="line">u16 mem2mapbase[MEM2_ALLOC_TABLE_SIZE]__attribute__((<span class="built_in">section</span> (<span class="string">&quot;.mallocmap&quot;</span>)));</span><br></pre></td></tr></table></figure><p>然后我们在去ld文件中创建这个段。CubeMX生成的工程下面找到</p><p><img src="https://img-blog.csdnimg.cn/img_convert/c67c19365215fb2af027a8c819fd1cfa.png" alt=""></p><p>在里面我们找到Specify the memory areas</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">MEMORY</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">RAM</span> (xrw)      : ORIGIN = <span class="number">0x20000000</span>, LENGTH = <span class="number">64</span>K</span><br><span class="line"><span class="built_in">FLASH</span> (rx)      : ORIGIN = <span class="number">0x8000000</span>, LENGTH = <span class="number">512</span>K</span><br><span class="line"><span class="built_in">MALLOC</span>(rw)     : ORIGIN = <span class="number">0x68000000</span>, LENGTH = <span class="number">1024</span>K</span><br><span class="line"><span class="built_in">MALLOCMAP</span>(rw)     : ORIGIN = <span class="number">0x680F0000</span>, LENGTH = <span class="number">60</span>K</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>给出地址的划分区间，这里增加了一个由malloc使用的MALLOC段，放在外部SRAM上，地址0x68000000，然后把表放在MALLOC之后，表的大小可以由表的数据类型大小乘以块的数量得到。</p><p>然后再</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">.malloc :</span><br><span class="line">    &#123;</span><br><span class="line">      . = <span class="built_in">ALIGN</span>(<span class="number">4</span>);</span><br><span class="line">      __MALLOC_SYMBOLS = .;</span><br><span class="line">      *(.malloc)</span><br><span class="line">      *(.malloc*)</span><br><span class="line"></span><br><span class="line">      . = <span class="built_in">ALIGN</span>(<span class="number">4</span>);</span><br><span class="line">      __EMALLOC_SYMBOLS = .;</span><br><span class="line">    &#125; &gt;MALLOC</span><br><span class="line"></span><br><span class="line">    .mallocmap :</span><br><span class="line">    &#123;</span><br><span class="line">      . = <span class="built_in">ALIGN</span>(<span class="number">4</span>);</span><br><span class="line">      __MALLOCMAP_SYMBOLS = .;</span><br><span class="line">      *(.mallocmap)</span><br><span class="line">      *(.mallocmap*)</span><br><span class="line"></span><br><span class="line">      . = <span class="built_in">ALIGN</span>(<span class="number">4</span>);</span><br><span class="line">      __EMALLOCMAP_SYMBOLS = .;</span><br><span class="line">    &#125; &gt;MALLOCMAP </span><br></pre></td></tr></table></figure><ul><li>. = ALIGN(4);是指4字节对齐</li></ul><ul><li><p>.，小数点表示当前的地址位置，例如__MALLOC_SYMBOLS = .;的意思是`__MALLOC_SYMBOLS 的地址就是.malloc段的地址</p></li><li><p>一般的程序中包含常见的几个段：text(存放程序),rodata(存放被初始化的数据),data(表示初始化不为0的变量),bss(表示初始化值为默认的全局变量)</p></li><li><p>text,rodata放在flash中，而data中的初始化值作为rodata放在flash中，变量在ram中占有空间，bss占ram空间</p></li><li><p>段可以自定义，如上面写的malloc段，由于编译obj过程中不会生成用户自定义的段，因此在源码中需要指定需要特殊处理的段</p></li><li><p>结尾的&gt;MALLOC指上面花括号内的内容都放在第二部分中定义的MALLOC空间中。如果没有AT&gt; FLASH，那么编译bin文件时地址是连续的。不过我加上了之后会出现报错section `.malloc’ will not fit in region `FLASH’，于是没加，不过好像也能运行。希望明白的网友给出解答。</p></li></ul><p>这里附上整个ld文件：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">******************************************************************************</span></span><br><span class="line"><span class="comment">**</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">**  File        : LinkerScript.ld</span></span><br><span class="line"><span class="comment">**</span></span><br><span class="line"><span class="comment">**  Author        : STM32CubeMX</span></span><br><span class="line"><span class="comment">**</span></span><br><span class="line"><span class="comment">**  Abstract    : Linker script for STM32F103ZETx series</span></span><br><span class="line"><span class="comment">**                512Kbytes FLASH and 64Kbytes RAM</span></span><br><span class="line"><span class="comment">**</span></span><br><span class="line"><span class="comment">**                Set heap size, stack size and stack location according</span></span><br><span class="line"><span class="comment">**                to application requirements.</span></span><br><span class="line"><span class="comment">**</span></span><br><span class="line"><span class="comment">**                Set memory bank area and size if external memory is used.</span></span><br><span class="line"><span class="comment">**</span></span><br><span class="line"><span class="comment">**  Target      : STMicroelectronics STM32</span></span><br><span class="line"><span class="comment">**</span></span><br><span class="line"><span class="comment">**  Distribution: The file is distributed “as is,” without any warranty</span></span><br><span class="line"><span class="comment">**                of any kind.</span></span><br><span class="line"><span class="comment">**</span></span><br><span class="line"><span class="comment">*****************************************************************************</span></span><br><span class="line"><span class="comment">** @attention</span></span><br><span class="line"><span class="comment">**</span></span><br><span class="line"><span class="comment">** &lt;h2&gt;&lt;center&gt;&amp;copy; COPYRIGHT(c) 2019 STMicroelectronics&lt;/center&gt;&lt;/h2&gt;</span></span><br><span class="line"><span class="comment">**</span></span><br><span class="line"><span class="comment">** Redistribution and use in source and binary forms, with or without modification,</span></span><br><span class="line"><span class="comment">** are permitted provided that the following conditions are met:</span></span><br><span class="line"><span class="comment">**   1. Redistributions of source code must retain the above copyright notice,</span></span><br><span class="line"><span class="comment">**      this list of conditions and the following disclaimer.</span></span><br><span class="line"><span class="comment">**   2. Redistributions in binary form must reproduce the above copyright notice,</span></span><br><span class="line"><span class="comment">**      this list of conditions and the following disclaimer in the documentation</span></span><br><span class="line"><span class="comment">**      and/or other materials provided with the distribution.</span></span><br><span class="line"><span class="comment">**   3. Neither the name of STMicroelectronics nor the names of its contributors</span></span><br><span class="line"><span class="comment">**      may be used to endorse or promote products derived from this software</span></span><br><span class="line"><span class="comment">**      without specific prior written permission.</span></span><br><span class="line"><span class="comment">**</span></span><br><span class="line"><span class="comment">** THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS &quot;AS IS&quot;</span></span><br><span class="line"><span class="comment">** AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE</span></span><br><span class="line"><span class="comment">** IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE</span></span><br><span class="line"><span class="comment">** DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE</span></span><br><span class="line"><span class="comment">** FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL</span></span><br><span class="line"><span class="comment">** DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR</span></span><br><span class="line"><span class="comment">** SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER</span></span><br><span class="line"><span class="comment">** CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,</span></span><br><span class="line"><span class="comment">** OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE</span></span><br><span class="line"><span class="comment">** OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.</span></span><br><span class="line"><span class="comment">**</span></span><br><span class="line"><span class="comment">*****************************************************************************</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* Entry Point */</span></span><br><span class="line"><span class="built_in">ENTRY</span>(Reset_Handler)</span><br><span class="line"></span><br><span class="line"><span class="comment">/* Highest address of the user mode stack */</span></span><br><span class="line">_estack = <span class="built_in">ORIGIN</span>(RAM) + <span class="built_in">LENGTH</span>(RAM);    <span class="comment">/* end of RAM */</span></span><br><span class="line"><span class="comment">/* Generate a link error if heap and stack don&#x27;t fit into RAM */</span></span><br><span class="line">_Min_Heap_Size = <span class="number">0x200</span>;      <span class="comment">/* required amount of heap  */</span></span><br><span class="line">_Min_Stack_Size = <span class="number">0x400</span>; <span class="comment">/* required amount of stack */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* Specify the memory areas */</span></span><br><span class="line">MEMORY</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">RAM</span> (xrw)      : ORIGIN = <span class="number">0x20000000</span>, LENGTH = <span class="number">64</span>K</span><br><span class="line"><span class="built_in">FLASH</span> (rx)      : ORIGIN = <span class="number">0x8000000</span>, LENGTH = <span class="number">512</span>K</span><br><span class="line"><span class="built_in">MALLOC</span>(rw)     : ORIGIN = <span class="number">0x68000000</span>, LENGTH = <span class="number">1024</span>K</span><br><span class="line"><span class="built_in">MALLOCMAP</span>(rw)     : ORIGIN = <span class="number">0x680F0000</span>, LENGTH = <span class="number">60</span>K</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* Define output sections */</span></span><br><span class="line">SECTIONS</span><br><span class="line">&#123;</span><br><span class="line">  <span class="comment">/* The startup code goes first into FLASH */</span></span><br><span class="line">  .isr_vector :</span><br><span class="line">  &#123;</span><br><span class="line">    . = <span class="built_in">ALIGN</span>(<span class="number">4</span>);</span><br><span class="line">    <span class="built_in">KEEP</span>(*(.isr_vector)) <span class="comment">/* Startup code */</span></span><br><span class="line">    . = <span class="built_in">ALIGN</span>(<span class="number">4</span>);</span><br><span class="line">  &#125; &gt;FLASH</span><br><span class="line"></span><br><span class="line">  <span class="comment">/* The program code and other data goes into FLASH */</span></span><br><span class="line">  .text :</span><br><span class="line">  &#123;</span><br><span class="line">    . = <span class="built_in">ALIGN</span>(<span class="number">4</span>);</span><br><span class="line">    *(.text)           <span class="comment">/* .text sections (code) */</span></span><br><span class="line">    *(.text*)          <span class="comment">/* .text* sections (code) */</span></span><br><span class="line">    *(.glue_7)         <span class="comment">/* glue arm to thumb code */</span></span><br><span class="line">    *(.glue_7t)        <span class="comment">/* glue thumb to arm code */</span></span><br><span class="line">    *(.eh_frame)</span><br><span class="line"></span><br><span class="line">    <span class="built_in">KEEP</span> (*(.init))</span><br><span class="line">    <span class="built_in">KEEP</span> (*(.fini))</span><br><span class="line"></span><br><span class="line">    . = <span class="built_in">ALIGN</span>(<span class="number">4</span>);</span><br><span class="line">    _etext = .;        <span class="comment">/* define a global symbols at end of code */</span></span><br><span class="line">  &#125; &gt;FLASH</span><br><span class="line"></span><br><span class="line">  <span class="comment">/* Constant data goes into FLASH */</span></span><br><span class="line">  .rodata :</span><br><span class="line">  &#123;</span><br><span class="line">    . = <span class="built_in">ALIGN</span>(<span class="number">4</span>);</span><br><span class="line">    *(.rodata)         <span class="comment">/* .rodata sections (constants, strings, etc.) */</span></span><br><span class="line">    *(.rodata*)        <span class="comment">/* .rodata* sections (constants, strings, etc.) */</span></span><br><span class="line">    . = <span class="built_in">ALIGN</span>(<span class="number">4</span>);</span><br><span class="line">  &#125; &gt;FLASH</span><br><span class="line"></span><br><span class="line">  .ARM.extab   : &#123; *(.ARM.extab* .gnu.linkonce.armextab.*) &#125; &gt;FLASH</span><br><span class="line">  .ARM : &#123;</span><br><span class="line">    __exidx_start = .;</span><br><span class="line">    *(.ARM.exidx*)</span><br><span class="line">    __exidx_end = .;</span><br><span class="line">  &#125; &gt;FLASH</span><br><span class="line"></span><br><span class="line">  .preinit_array     :</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">PROVIDE_HIDDEN</span> (__preinit_array_start = .);</span><br><span class="line">    <span class="built_in">KEEP</span> (*(.preinit_array*))</span><br><span class="line">    <span class="built_in">PROVIDE_HIDDEN</span> (__preinit_array_end = .);</span><br><span class="line">  &#125; &gt;FLASH</span><br><span class="line">  .init_array :</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">PROVIDE_HIDDEN</span> (__init_array_start = .);</span><br><span class="line">    <span class="built_in">KEEP</span> (*(<span class="built_in">SORT</span>(.init_array.*)))</span><br><span class="line">    <span class="built_in">KEEP</span> (*(.init_array*))</span><br><span class="line">    <span class="built_in">PROVIDE_HIDDEN</span> (__init_array_end = .);</span><br><span class="line">  &#125; &gt;FLASH</span><br><span class="line">  .fini_array :</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">PROVIDE_HIDDEN</span> (__fini_array_start = .);</span><br><span class="line">    <span class="built_in">KEEP</span> (*(<span class="built_in">SORT</span>(.fini_array.*)))</span><br><span class="line">    <span class="built_in">KEEP</span> (*(.fini_array*))</span><br><span class="line">    <span class="built_in">PROVIDE_HIDDEN</span> (__fini_array_end = .);</span><br><span class="line">  &#125; &gt;FLASH</span><br><span class="line"></span><br><span class="line">  <span class="comment">/* used by the startup to initialize data */</span></span><br><span class="line">  _sidata = <span class="built_in">LOADADDR</span>(.data);</span><br><span class="line"></span><br><span class="line">  <span class="comment">/* Initialized data sections goes into RAM, load LMA copy after code */</span></span><br><span class="line">  .data : </span><br><span class="line">  &#123;</span><br><span class="line">    . = <span class="built_in">ALIGN</span>(<span class="number">4</span>);</span><br><span class="line">    _sdata = .;        <span class="comment">/* create a global symbol at data start */</span></span><br><span class="line">    *(.data)           <span class="comment">/* .data sections */</span></span><br><span class="line">    *(.data*)          <span class="comment">/* .data* sections */</span></span><br><span class="line"></span><br><span class="line">    . = <span class="built_in">ALIGN</span>(<span class="number">4</span>);</span><br><span class="line">    _edata = .;        <span class="comment">/* define a global symbol at data end */</span></span><br><span class="line">  &#125; &gt;RAM AT&gt; FLASH</span><br><span class="line"></span><br><span class="line">  </span><br><span class="line">  <span class="comment">/* Uninitialized data section */</span></span><br><span class="line">  . = <span class="built_in">ALIGN</span>(<span class="number">4</span>);</span><br><span class="line">  .bss :</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="comment">/* This is used by the startup in order to initialize the .bss secion */</span></span><br><span class="line">    _sbss = .;         <span class="comment">/* define a global symbol at bss start */</span></span><br><span class="line">    __bss_start__ = _sbss;</span><br><span class="line">    *(.bss)</span><br><span class="line">    *(.bss*)</span><br><span class="line">    *(COMMON)</span><br><span class="line"></span><br><span class="line">    . = <span class="built_in">ALIGN</span>(<span class="number">4</span>);</span><br><span class="line">    _ebss = .;         <span class="comment">/* define a global symbol at bss end */</span></span><br><span class="line">    __bss_end__ = _ebss;</span><br><span class="line">  &#125; &gt;RAM</span><br><span class="line"></span><br><span class="line">  <span class="comment">/* User_heap_stack section, used to check that there is enough RAM left */</span></span><br><span class="line">  ._user_heap_stack :</span><br><span class="line">  &#123;</span><br><span class="line">    . = <span class="built_in">ALIGN</span>(<span class="number">8</span>);</span><br><span class="line">    <span class="built_in">PROVIDE</span> ( end = . );</span><br><span class="line">    <span class="built_in">PROVIDE</span> ( _end = . );</span><br><span class="line">    . = . + _Min_Heap_Size;</span><br><span class="line">    . = . + _Min_Stack_Size;</span><br><span class="line">    . = <span class="built_in">ALIGN</span>(<span class="number">8</span>);</span><br><span class="line">  &#125; &gt;RAM</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/* My Code */</span></span><br><span class="line">  .malloc :</span><br><span class="line">    &#123;</span><br><span class="line">      . = <span class="built_in">ALIGN</span>(<span class="number">4</span>);</span><br><span class="line">      __MALLOC_SYMBOLS = .;</span><br><span class="line">      *(.malloc)</span><br><span class="line">      *(.malloc*)</span><br><span class="line"></span><br><span class="line">      . = <span class="built_in">ALIGN</span>(<span class="number">4</span>);</span><br><span class="line">      __EMALLOC_SYMBOLS = .;</span><br><span class="line">    &#125; &gt;MALLOC</span><br><span class="line"></span><br><span class="line">    .mallocmap :</span><br><span class="line">        &#123;</span><br><span class="line">          . = <span class="built_in">ALIGN</span>(<span class="number">4</span>);</span><br><span class="line">          __MALLOCMAP_SYMBOLS = .;</span><br><span class="line">          *(.mallocmap)</span><br><span class="line">          *(.mallocmap*)</span><br><span class="line"></span><br><span class="line">          . = <span class="built_in">ALIGN</span>(<span class="number">4</span>);</span><br><span class="line">          __EMALLOCMAP_SYMBOLS = .;</span><br><span class="line">        &#125; &gt;MALLOCMAP AT&gt; FLASH</span><br><span class="line">    <span class="comment">/* My Code End */</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="comment">/* Remove information from the standard libraries */</span></span><br><span class="line">  /DISCARD/ :</span><br><span class="line">  &#123;</span><br><span class="line">    libc.<span class="built_in">a</span> ( * )</span><br><span class="line">    libm.<span class="built_in">a</span> ( * )</span><br><span class="line">    libgcc.<span class="built_in">a</span> ( * )</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  .ARM.attributes <span class="number">0</span> : &#123; *(.ARM.attributes) &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>于是就实现了malloc,free,realloc(对一段地址重新分配)的功能。</p><h1 id="四-可变大小内存块分配">四、可变大小内存块分配</h1><p>可见，上面固定大小内存块方式在查找和释放时，都需要遍历、置/清内存表标志位，比较费时间。而可变大小内存块的思想是：将待分配的内存分为大、中、小这么几类。每一类由相同大小的内存块通过一个单链表链接在一起组成。初始化后，空闲链表*pFree就指向这个单链表头。</p><p>当需要申请内存的时候，按照从小到大的顺序，在这几类里面找到刚好能够容纳下申请内存的buf。如果找到，就直接将这类内存块的空闲链表头返回给它即可。然后空闲链表头指向next即可完成内存的申请。</p><p>在释放的时候，按照从大到小的顺序，找到和待释放的内存块大小相同的那类内存块，将其重新插入那类内存块空闲链表头，即完成释放。</p><p>这就是可变大小内存池的分配基本思路。</p><table class="kdocs-table" border="1" style="table-layout:fixed;width:28px;"><tbody><tr class="kdocs-tableRow"><td class="kdocs-tableCell" style="width:130px;vertical-align:top;height:52px;"><p style=""></p></td><td class="kdocs-tableCell" style="width:419px;vertical-align:top;height:52px;"><p style="">优点</p></td><td class="kdocs-tableCell" style="width:493px;vertical-align:top;height:52px;"><p style="">缺点</p></td></tr><tr class="kdocs-tableRow"><td class="kdocs-tableCell" style="width:130px;vertical-align:top;height:52px;"><p style="">固定大小内存块</p></td><td class="kdocs-tableCell" style="width:419px;vertical-align:top;height:52px;"><p style="">灵活度高，能以较少的内存碎片，分配各种大小的内存；</p></td><td class="kdocs-tableCell" style="width:493px;vertical-align:top;height:52px;"><p style="">效率低，每次都要从尾部遍历一遍memmap，找合适大小的内存，置/清内存表；</p></td></tr><tr class="kdocs-tableRow"><td class="kdocs-tableCell" style="width:130px;vertical-align:top;height:52px;"><p style="">可变大小内存块</p></td><td class="kdocs-tableCell" style="width:419px;vertical-align:top;height:52px;"><p style="">申请和释放速度快，效率高；</p></td><td class="kdocs-tableCell" style="width:493px;vertical-align:top;height:52px;"><p style="">1.需提前估算大概的内存需求大小；</p><p style="">2.灵活度不够，分配不好很容易内存碎片；</p></td></tr></tbody></table><p>具体实现可以参照：</p><p><a href="https://blog.csdn.net/u012183892/article/details/105375796">两种内存池管理方法对比</a></p>]]></content>
      
      
      <categories>
          
          <category> 遇到的问题及解决 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> stm32 </tag>
            
            <tag> 嵌入式 </tag>
            
            <tag> c语言 </tag>
            
            <tag> 内存管理 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
    
    
    <entry>
      <title>分类</title>
      <link href="/categories/index.html"/>
      <url>/categories/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>link</title>
      <link href="/link/index.html"/>
      <url>/link/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>关于</title>
      <link href="/about/index.html"/>
      <url>/about/index.html</url>
      
        <content type="html"><![CDATA[<p>笔者将在这里记录笔者的生活<br>谢谢您的关注</p>]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>电影</title>
      <link href="/movies/index.html"/>
      <url>/movies/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>音乐</title>
      <link href="/music/index.html"/>
      <url>/music/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>tags</title>
      <link href="/tags/index.html"/>
      <url>/tags/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>QQ</title>
      <link href="/info/qq/index.html"/>
      <url>/info/qq/index.html</url>
      
        <content type="html"><![CDATA[<h1 id="如有需要-可以注明原因-添加笔者的qq">如有需要，可以注明原因，添加笔者的QQ:</h1><p><img src="https://cdn.staticaly.com/gh/mico845/blog-cdn@main/img/qq.png" alt="QQ"></p>]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>Wechat</title>
      <link href="/info/wechat/index.html"/>
      <url>/info/wechat/index.html</url>
      
        <content type="html"><![CDATA[<h1 id="如有需要-可以注明原因-添加笔者的微信">如有需要，可以注明原因，添加笔者的微信:</h1><p><img src="https://cdn.staticaly.com/gh/mico845/blog-cdn@main/img/wechat.jpg" alt="WeChat"></p>]]></content>
      
    </entry>
    
    
  
</search>
